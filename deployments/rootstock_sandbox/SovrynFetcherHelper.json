{
  "address": "0xbC758FCB97e06Ec635DFf698f55e41aCC35e1d2d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sovrynSwapNetwork",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SovrynFetcherHelper.InputData[]",
          "name": "_data",
          "type": "tuple[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "internalType": "struct SovrynFetcherHelper.Price[]",
          "name": "prices",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sovrynSwapNetwork",
      "outputs": [
        {
          "internalType": "contract ISovrynSwapNetwork",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x716a0b10084ad26ea59c71512026cd8e62d1398e046439f34e49790fbb8ac9ab",
  "receipt": {
    "to": null,
    "from": "0x66f13FDceed822E74b6a1e08e082Fa699fF36454",
    "contractAddress": "0xbC758FCB97e06Ec635DFf698f55e41aCC35e1d2d",
    "transactionIndex": 1,
    "gasUsed": "665015",
    "logsBloom": "0x
    "blockHash": "0xd31d5d8ae0975ed476111d2a2c8023c9ea2ae33c3277f039c868894ecdf16c4b",
    "transactionHash": "0x716a0b10084ad26ea59c71512026cd8e62d1398e046439f34e49790fbb8ac9ab",
    "logs": [],
    "blockNumber": 5122387,
    "cumulativeGasUsed": "757812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6390df6de9f24902b29740371525c2ceaa8f5a4f"
  ],
  "numDeployments": 1,
  "solcInputHash": "0e90433887f0bf6ba85dbfecfb384613",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sovrynSwapNetwork\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SovrynFetcherHelper.InputData[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"struct SovrynFetcherHelper.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sovrynSwapNetwork\",\"outputs\":[{\"internalType\":\"contract ISovrynSwapNetwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrices((address,address,uint256)[])\":{\"details\":\"this method will return estimations for swap for provided amounts\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fetchers/soveryn/SovrynFetcherHelper.sol\":\"SovrynFetcherHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/fetchers/soveryn/ISovrynSwapNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISovrynSwapNetwork {\\n    /**\\n      * @dev returns the conversion path between two tokens in the network\\n      * note that this method is quite expensive in terms of gas and should generally be called off-chain\\n      *\\n      * @param _sourceToken source token address\\n      * @param _targetToken target token address\\n      *\\n      * @return conversion path between the two tokens\\n    */\\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\\n\\n    /**\\n      * @dev returns the expected target amount of converting a given amount on a given path\\n      * note that there is no support for circular paths\\n      *\\n      * @param _path        conversion path (see conversion path format above)\\n      * @param _amount      amount of _path[0] tokens received from the sender\\n      *\\n      * @return expected target amount\\n    */\\n    function rateByPath(address[] calldata _path, uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9ca183a90831503629683a15e93685a6676c8a5b1fd87b5f1aa96de0940d1f93\",\"license\":\"UNLICENSED\"},\"contracts/fetchers/soveryn/SovrynFetcherHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ISovrynSwapNetwork} from \\\"./ISovrynSwapNetwork.sol\\\";\\n\\ncontract SovrynFetcherHelper {\\n    struct InputData {\\n        address base;\\n        address quote;\\n        uint256 amount;\\n    }\\n\\n    /// @param price is amount out (normalized to 18 decimals) returned by Uniswap pool for 1 quote token\\n    struct Price {\\n        uint256 price;\\n        bool success;\\n    }\\n\\n    ISovrynSwapNetwork immutable public sovrynSwapNetwork;\\n\\n    constructor(address _sovrynSwapNetwork) {\\n        sovrynSwapNetwork = ISovrynSwapNetwork(_sovrynSwapNetwork);\\n    }\\n\\n    /// @dev this method will return estimations for swap for provided amounts\\n    function getPrices(InputData[] calldata _data)\\n        external\\n        view\\n        virtual\\n        returns (Price[] memory prices, uint256 timestamp)\\n    {\\n        timestamp = block.timestamp;\\n        uint256 n = _data.length;\\n        prices = new Price[](n);\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            InputData memory inputData = _data[i];\\n            Price memory price = prices[i];\\n\\n            (address[] memory path, bool success) = _conversionPath(inputData.base, inputData.quote);\\n            if (!success) continue;\\n\\n            (price.price, success) = _rateByPath(path, inputData.amount);\\n            if (!success) continue;\\n\\n            price.success = true;\\n        }\\n    }\\n\\n    function _conversionPath(address _base, address _quote)\\n        internal\\n        view\\n        returns (address[] memory conversionPath, bool success)\\n    {\\n        try sovrynSwapNetwork.conversionPath(_base, _quote) returns (address[] memory path) {\\n            return (path, true);\\n        } catch (bytes memory) {\\n            // error\\n        }\\n    }\\n\\n    function _rateByPath(address[] memory _path, uint256 _amountIn)\\n        internal\\n        view\\n        returns (uint256 amountOut, bool success)\\n    {\\n        try sovrynSwapNetwork.rateByPath(_path, _amountIn) returns (uint256 result) {\\n            return (result, true);\\n        } catch (bytes memory) {\\n            // error\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7c20f0ce0cfe873c65b9b3bb4d03d908f44bc647726337392803f38d2354d9f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c29380380610c29833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610b0561012460003960008181608c015281816101ec01526102da0152610b056000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806379eaf6d41461003b5780637cc3cb2114610059575b600080fd5b61004361008a565b6040516100509190610459565b60405180910390f35b610073600480360381019061006e91906104ed565b6100ae565b60405161008192919061065b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600042905060008484905090508067ffffffffffffffff8111156100d7576100d661068b565b5b60405190808252806020026020018201604052801561011057816020015b6100fd6103be565b8152602001906001900390816100f55790505b50925060005b818110156101dd576000868683818110610133576101326106ba565b5b9050606002018036038101906101499190610819565b905060008583815181106101605761015f6106ba565b5b6020026020010151905060008061017f846000015185602001516101e6565b915091508061019157505050506101d0565b61019f8285604001516102d5565b84600001819350828152505050806101ba57505050506101d0565b6001836020019015159081151581525050505050505b8080600101915050610116565b50509250929050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d734fa1985856040518363ffffffff1660e01b8152600401610245929190610855565b600060405180830381865afa92505050801561028457506040513d6000823e3d601f19601f820116820180604052508101906102819190610956565b60015b6102c0573d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50506102cd565b80600192509250506102ce565b5b9250929050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd85856040518363ffffffff1660e01b8152600401610333929190610a5d565b602060405180830381865afa92505050801561036d57506040513d601f19601f8201168201806040525081019061036a9190610aa2565b60015b6103a9573d806000811461039d576040519150601f19603f3d011682016040523d82523d6000602084013e6103a2565b606091505b50506103b6565b80600192509250506103b7565b5b9250929050565b6040518060400160405280600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061041f61041a610415846103da565b6103fa565b6103da565b9050919050565b600061043182610404565b9050919050565b600061044382610426565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126104ad576104ac610488565b5b8235905067ffffffffffffffff8111156104ca576104c961048d565b5b6020830191508360608202830111156104e6576104e5610492565b5b9250929050565b600080602083850312156105045761050361047e565b5b600083013567ffffffffffffffff81111561052257610521610483565b5b61052e85828601610497565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61057981610566565b82525050565b60008115159050919050565b6105948161057f565b82525050565b6040820160008201516105b06000850182610570565b5060208201516105c3602085018261058b565b50505050565b60006105d5838361059a565b60408301905092915050565b6000602082019050919050565b60006105f98261053a565b6106038185610545565b935061060e83610556565b8060005b8381101561063f57815161062688826105c9565b9750610631836105e1565b925050600181019050610612565b5085935050505092915050565b61065581610566565b82525050565b6000604082019050818103600083015261067581856105ee565b9050610684602083018461064c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b610708826106ee565b810181811067ffffffffffffffff821117156107275761072661068b565b5b80604052505050565b600061073a610474565b905061074682826106ff565b919050565b6000610756826103da565b9050919050565b6107668161074b565b811461077157600080fd5b50565b6000813590506107838161075d565b92915050565b61079281610566565b811461079d57600080fd5b50565b6000813590506107af81610789565b92915050565b6000606082840312156107cb576107ca6106e9565b5b6107d56060610730565b905060006107e584828501610774565b60008301525060206107f984828501610774565b602083015250604061080d848285016107a0565b60408301525092915050565b60006060828403121561082f5761082e61047e565b5b600061083d848285016107b5565b91505092915050565b61084f8161074b565b82525050565b600060408201905061086a6000830185610846565b6108776020830184610846565b9392505050565b600067ffffffffffffffff8211156108995761089861068b565b5b602082029050602081019050919050565b6000815190506108b98161075d565b92915050565b60006108d26108cd8461087e565b610730565b905080838252602082019050602084028301858111156108f5576108f4610492565b5b835b8181101561091e578061090a88826108aa565b8452602084019350506020810190506108f7565b5050509392505050565b600082601f83011261093d5761093c610488565b5b815161094d8482602086016108bf565b91505092915050565b60006020828403121561096c5761096b61047e565b5b600082015167ffffffffffffffff81111561098a57610989610483565b5b61099684828501610928565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109d48161074b565b82525050565b60006109e683836109cb565b60208301905092915050565b6000602082019050919050565b6000610a0a8261099f565b610a1481856109aa565b9350610a1f836109bb565b8060005b83811015610a50578151610a3788826109da565b9750610a42836109f2565b925050600181019050610a23565b5085935050505092915050565b60006040820190508181036000830152610a7781856109ff565b9050610a86602083018461064c565b9392505050565b600081519050610a9c81610789565b92915050565b600060208284031215610ab857610ab761047e565b5b6000610ac684828501610a8d565b9150509291505056fea2646970667358221220a55d47cbef8cfc67bab109eb24db4f2ef6fae82503808fbdb207665c38cbc00c64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806379eaf6d41461003b5780637cc3cb2114610059575b600080fd5b61004361008a565b6040516100509190610459565b60405180910390f35b610073600480360381019061006e91906104ed565b6100ae565b60405161008192919061065b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600042905060008484905090508067ffffffffffffffff8111156100d7576100d661068b565b5b60405190808252806020026020018201604052801561011057816020015b6100fd6103be565b8152602001906001900390816100f55790505b50925060005b818110156101dd576000868683818110610133576101326106ba565b5b9050606002018036038101906101499190610819565b905060008583815181106101605761015f6106ba565b5b6020026020010151905060008061017f846000015185602001516101e6565b915091508061019157505050506101d0565b61019f8285604001516102d5565b84600001819350828152505050806101ba57505050506101d0565b6001836020019015159081151581525050505050505b8080600101915050610116565b50509250929050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d734fa1985856040518363ffffffff1660e01b8152600401610245929190610855565b600060405180830381865afa92505050801561028457506040513d6000823e3d601f19601f820116820180604052508101906102819190610956565b60015b6102c0573d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50506102cd565b80600192509250506102ce565b5b9250929050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd85856040518363ffffffff1660e01b8152600401610333929190610a5d565b602060405180830381865afa92505050801561036d57506040513d601f19601f8201168201806040525081019061036a9190610aa2565b60015b6103a9573d806000811461039d576040519150601f19603f3d011682016040523d82523d6000602084013e6103a2565b606091505b50506103b6565b80600192509250506103b7565b5b9250929050565b6040518060400160405280600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061041f61041a610415846103da565b6103fa565b6103da565b9050919050565b600061043182610404565b9050919050565b600061044382610426565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126104ad576104ac610488565b5b8235905067ffffffffffffffff8111156104ca576104c961048d565b5b6020830191508360608202830111156104e6576104e5610492565b5b9250929050565b600080602083850312156105045761050361047e565b5b600083013567ffffffffffffffff81111561052257610521610483565b5b61052e85828601610497565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61057981610566565b82525050565b60008115159050919050565b6105948161057f565b82525050565b6040820160008201516105b06000850182610570565b5060208201516105c3602085018261058b565b50505050565b60006105d5838361059a565b60408301905092915050565b6000602082019050919050565b60006105f98261053a565b6106038185610545565b935061060e83610556565b8060005b8381101561063f57815161062688826105c9565b9750610631836105e1565b925050600181019050610612565b5085935050505092915050565b61065581610566565b82525050565b6000604082019050818103600083015261067581856105ee565b9050610684602083018461064c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b610708826106ee565b810181811067ffffffffffffffff821117156107275761072661068b565b5b80604052505050565b600061073a610474565b905061074682826106ff565b919050565b6000610756826103da565b9050919050565b6107668161074b565b811461077157600080fd5b50565b6000813590506107838161075d565b92915050565b61079281610566565b811461079d57600080fd5b50565b6000813590506107af81610789565b92915050565b6000606082840312156107cb576107ca6106e9565b5b6107d56060610730565b905060006107e584828501610774565b60008301525060206107f984828501610774565b602083015250604061080d848285016107a0565b60408301525092915050565b60006060828403121561082f5761082e61047e565b5b600061083d848285016107b5565b91505092915050565b61084f8161074b565b82525050565b600060408201905061086a6000830185610846565b6108776020830184610846565b9392505050565b600067ffffffffffffffff8211156108995761089861068b565b5b602082029050602081019050919050565b6000815190506108b98161075d565b92915050565b60006108d26108cd8461087e565b610730565b905080838252602082019050602084028301858111156108f5576108f4610492565b5b835b8181101561091e578061090a88826108aa565b8452602084019350506020810190506108f7565b5050509392505050565b600082601f83011261093d5761093c610488565b5b815161094d8482602086016108bf565b91505092915050565b60006020828403121561096c5761096b61047e565b5b600082015167ffffffffffffffff81111561098a57610989610483565b5b61099684828501610928565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109d48161074b565b82525050565b60006109e683836109cb565b60208301905092915050565b6000602082019050919050565b6000610a0a8261099f565b610a1481856109aa565b9350610a1f836109bb565b8060005b83811015610a50578151610a3788826109da565b9750610a42836109f2565b925050600181019050610a23565b5085935050505092915050565b60006040820190508181036000830152610a7781856109ff565b9050610a86602083018461064c565b9392505050565b600081519050610a9c81610789565b92915050565b600060208284031215610ab857610ab761047e565b5b6000610ac684828501610a8d565b9150509291505056fea2646970667358221220a55d47cbef8cfc67bab109eb24db4f2ef6fae82503808fbdb207665c38cbc00c64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrices((address,address,uint256)[])": {
        "details": "this method will return estimations for swap for provided amounts"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}