{
  "address": "0xB3841f1B9efCA2A696dEeA20a56291147ebe40AD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountForStake",
          "type": "uint256"
        }
      ],
      "name": "LogMinAmountForStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "LogValidatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "LogValidatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "LogValidatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUMBER_OF_VALIDATORS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_10",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_11",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_12",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_13",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_14",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_15",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_16",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_3",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_4",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_5",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_6",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_7",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_8",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ix",
          "type": "uint256"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "allBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfValidators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receiveApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "setMinAmountForStake",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unregister",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_id",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "verifyValidators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2977a60b50cabce217500211b6ecd035e623161f1ffab844a03af96eade3a874",
  "receipt": {
    "to": null,
    "from": "0xA6e4fFa19B213AbeA258ae72e8e1a209B9E543e7",
    "contractAddress": "0xB3841f1B9efCA2A696dEeA20a56291147ebe40AD",
    "transactionIndex": 6,
    "gasUsed": "2473694",
    "logsBloom": "0x
    "blockHash": "0x8bdea27be27c9dd5bff0411375a0f500d4c1fc754d7f8b131b43ea047faaecef",
    "transactionHash": "0x2977a60b50cabce217500211b6ecd035e623161f1ffab844a03af96eade3a874",
    "logs": [],
    "blockNumber": 35645227,
    "cumulativeGasUsed": "3281603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    17
  ],
  "numDeployments": 2,
  "solcInputHash": "2fde2bd733f13c187466bbcdf38aa7e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountForStake\",\"type\":\"uint256\"}],\"name\":\"LogMinAmountForStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LogValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LogValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LogValidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_OF_VALIDATORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_10\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_11\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_12\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_13\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_14\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_15\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_16\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_6\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_7\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_8\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ix\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setMinAmountForStake\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"verifyValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addresses(uint256)\":{\"details\":\"gets validator address for provided index\",\"params\":{\"_ix\":\"index in array of list of all validators wallets\"}},\"balanceOf(address)\":{\"details\":\"to follow ERC20 interface\"},\"exit()\":{\"details\":\"unstake and withdraw all tokens\"},\"getName()\":{\"details\":\"to follow Registrable interface\"},\"getNumberOfValidators()\":{\"returns\":{\"_0\":\"total number of registered validators (with and without balance)\"}},\"register()\":{\"details\":\"to follow Registrable interface\"},\"totalSupply()\":{\"details\":\"to follow ERC20 interface\"},\"unregister()\":{\"details\":\"to follow Registrable interface\"},\"validators(address)\":{\"params\":{\"_id\":\"address of validator\"},\"returns\":{\"id\":\"address of validator\",\"location\":\"URL of validator\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stakingBankStatic/StakingBankStaticProd.sol\":\"StakingBankStaticProd\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingBank is IERC20 {\\n    /// @param id address of validator wallet\\n    /// @param location URL of the validator API\\n    struct Validator {\\n        address id;\\n        string location;\\n    }\\n\\n    event LogValidatorRegistered(address indexed id);\\n    event LogValidatorUpdated(address indexed id);\\n    event LogValidatorRemoved(address indexed id);\\n    event LogMinAmountForStake(uint256 minAmountForStake);\\n\\n    /// @dev setter for `minAmountForStake`\\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\\n\\n    /// @dev allows to stake `token` by validators\\n    /// Validator needs to approve StakingBank beforehand\\n    /// @param _value amount of tokens to stake\\n    function stake(uint256 _value) external;\\n\\n    /// @dev notification about approval from `_from` address on UMB token\\n    /// Staking bank will stake max approved amount from `_from` address\\n    /// @param _from address which approved token spend for IStakingBank\\n    function receiveApproval(address _from) external returns (bool success);\\n\\n    /// @dev withdraws stake tokens\\n    /// it throws, when balance will be less than required minimum for stake\\n    /// to withdraw all use `exit`\\n    function withdraw(uint256 _value) external returns (bool success);\\n\\n    /// @dev unstake and withdraw all tokens\\n    function exit() external returns (bool success);\\n\\n    /// @dev creates (register) new validator\\n    /// @param _id validator address\\n    /// @param _location location URL of the validator API\\n    function create(address _id, string calldata _location) external;\\n\\n    /// @dev removes validator\\n    /// @param _id validator wallet\\n    function remove(address _id) external;\\n\\n    /// @dev updates validator location\\n    /// @param _id validator wallet\\n    /// @param _location new validator URL\\n    function update(address _id, string calldata _location) external;\\n\\n    /// @return total number of registered validators (with and without balance)\\n    function getNumberOfValidators() external view returns (uint256);\\n\\n    /// @dev gets validator address for provided index\\n    /// @param _ix index in array of list of all validators wallets\\n    function addresses(uint256 _ix) external view returns (address);\\n\\n    /// @param _id address of validator\\n    /// @return id address of validator\\n    /// @return location URL of validator\\n    function validators(address _id) external view returns (address id, string memory location);\\n}\\n\",\"keccak256\":\"0x2c518aeab8b0b3a364fafaec559d3ff0dc6a119f8d203fa31ef7ad667ca0f7b9\",\"license\":\"MIT\"},\"contracts/interfaces/StakingBankStaticNotSupported.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IStakingBank.sol\\\";\\n\\nabstract contract StakingBankStaticNotSupported is IStakingBank {\\n    error NotSupported();\\n\\n    function create(address, string calldata) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function update(address, string calldata) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function remove(address) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function transfer(address, uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function transferFrom(address, address, uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function receiveApproval(address) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function allowance(address, address) external pure returns (uint256) {\\n        revert NotSupported();\\n    }\\n\\n    function approve(address, uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function stake(uint256) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function withdraw(uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function exit() external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function setMinAmountForStake(uint256) external pure {\\n        revert NotSupported();\\n    }\\n}\\n\",\"keccak256\":\"0xa899ad9000220b04bc3f63f762a9a6a76dcc09449427e7774a53f4ceda9c1cf8\",\"license\":\"MIT\"},\"contracts/stakingBankStatic/StakingBankStatic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/StakingBankStaticNotSupported.sol\\\";\\n\\n/// @dev Because we are using PoA in UMB oracle, staked balance does not matter. What's matter is, if signer is\\n/// validator or not. In this case  we can optimise `StakingBank` and make it static for better gas performance.\\nabstract contract StakingBankStatic is StakingBankStaticNotSupported {\\n    uint256 public constant ONE = 1e18;\\n\\n    uint256 public immutable NUMBER_OF_VALIDATORS; // solhint-disable-line var-name-mixedcase\\n    uint256 public immutable TOTAL_SUPPLY; // solhint-disable-line var-name-mixedcase\\n\\n    constructor(uint256 _validatorsCount) {\\n        NUMBER_OF_VALIDATORS = _validatorsCount;\\n        TOTAL_SUPPLY = _validatorsCount * ONE;\\n\\n        _assertValidSetup(_validatorsCount);\\n    }\\n\\n    function balances(address _validator) external view returns (uint256) {\\n        return _isValidator(_validator) ? ONE : 0;\\n    }\\n\\n    function verifyValidators(address[] calldata _validators) external view returns (bool) {\\n        for (uint256 i; i < _validators.length;) {\\n            if (!_isValidator(_validators[i])) return false;\\n            unchecked { i++; }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getNumberOfValidators() external view returns (uint256) {\\n        return NUMBER_OF_VALIDATORS;\\n    }\\n\\n    function getAddresses() external view returns (address[] memory) {\\n        return _addresses();\\n    }\\n\\n    function getBalances() external view returns (uint256[] memory allBalances) {\\n        allBalances = new uint256[](NUMBER_OF_VALIDATORS);\\n\\n        for (uint256 i; i < NUMBER_OF_VALIDATORS;) {\\n            allBalances[i] = ONE;\\n\\n            unchecked {\\n                // we will not have enough data to overflow\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function addresses(uint256 _ix) external view returns (address) {\\n        return _addresses()[_ix];\\n    }\\n\\n    function validators(address _id) external view virtual returns (address id, string memory location);\\n\\n    /// @dev to follow ERC20 interface\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return _isValidator(_account) ? ONE : 0;\\n    }\\n\\n    /// @dev to follow ERC20 interface\\n    function totalSupply() external view returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n\\n    /// @dev to follow Registrable interface\\n    function getName() external pure returns (bytes32) {\\n        return \\\"StakingBank\\\";\\n    }\\n\\n    /// @dev to follow Registrable interface\\n    function register() external pure {\\n        // there are no requirements atm\\n    }\\n\\n    /// @dev to follow Registrable interface\\n    function unregister() external pure {\\n        // there are no requirements atm\\n    }\\n\\n    function _addresses() internal view virtual returns (address[] memory);\\n\\n    function _isValidator(address _validator) internal view virtual returns (bool);\\n\\n    function _assertValidSetup(uint256 _validatorsCount) internal view virtual{\\n        address[] memory list = _addresses();\\n        require(list.length == _validatorsCount);\\n\\n        for (uint256 i; i < _validatorsCount;) {\\n            require(_isValidator(list[i]));\\n\\n            unchecked { i ++; }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfcc53ff98b0f1c42e1bc7345a1535fdc4e938ef40d323600ead94b2ece59a381\",\"license\":\"MIT\"},\"contracts/stakingBankStatic/StakingBankStaticProd.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./StakingBankStatic.sol\\\";\\n\\ncontract StakingBankStaticProd is StakingBankStatic {\\n    address public constant VALIDATOR_0 = 0x977Ba523420110e230643B772Fe9cF955e11dA7B;\\n    address public constant VALIDATOR_1 = 0xe2422b23e52bc13ebA04d7FbB9F332Deb43360fB;\\n\\n    // external order is based on validators submits on AVAX for Apr 2023\\n    address public constant VALIDATOR_2 = 0x57F404aD75e371c1A539589C1eFCA12e0C6980AD;\\n    address public constant VALIDATOR_3 = 0xD56C6A4f64E0bD70260472d1DB6Cf5825858CB0d;\\n    address public constant VALIDATOR_4 = 0x220230Eda8f50067Dd9e4729345dabCCe0C61542;\\n    address public constant VALIDATOR_5 = 0x93FdcAB283b0BcAc48157590af482E1CFd6af6aC;\\n    address public constant VALIDATOR_6 = 0xCd733E06B06083d52fC5867E8E3432aA5c103A38;\\n    address public constant VALIDATOR_7 = 0x42e210b110c6aa49CdfA7ceF1444Aa4719653111;\\n    address public constant VALIDATOR_8 = 0x501731c6a69803a53Ec6c3e12f293c247cE1092B;\\n    address public constant VALIDATOR_9 = 0x8bF9661F1b247522C75DD0FE84355aD2EfF27144;\\n    address public constant VALIDATOR_10 = 0x281754Ab58391A478B7aA4E7f39991CfB41118c4;\\n    address public constant VALIDATOR_11 = 0xB9C63a350A04d8BD245d18928a26EE036352dDd8;\\n    address public constant VALIDATOR_12 = 0x57A51D5BDcE188c2295fCA3b4687475a54E65A02;\\n    address public constant VALIDATOR_13 = 0x777FbA3666fa7747476a34577FcCC404b263E09F;\\n    address public constant VALIDATOR_14 = 0x2F85824B2B38F179E451988670935d315b5b9692;\\n    address public constant VALIDATOR_15 = 0xA7241994267682de4dE7Ef62f52dc2C783d1784B;\\n    address public constant VALIDATOR_16 = 0x6eEd457C20603EDAE50C3A112CAA1a9425321bD0;\\n\\n    constructor(uint256 _validatorsCount) StakingBankStatic(_validatorsCount) {}\\n\\n    // solhint-disable-next-line code-complexity\\n    function validators(address _id) external pure override returns (address id, string memory location) {\\n        if (_id == VALIDATOR_0) return (_id, \\\"https://validator.umb.network\\\");\\n        if (_id == VALIDATOR_1) return (_id, \\\"https://validator2.umb.network\\\");\\n        if (_id == VALIDATOR_2) return (_id, \\\"https://umbrella.artemahr.tech\\\");\\n        if (_id == VALIDATOR_3) return (_id, \\\"https://umb.vtabsolutions.com:3030\\\");\\n        if (_id == VALIDATOR_4) return (_id, \\\"https://umb.stakers.world\\\");\\n        if (_id == VALIDATOR_5) return (_id, \\\"https://umbrella.crazywhale.es\\\");\\n        if (_id == VALIDATOR_6) return (_id, \\\"https://umbrella-node.gateomega.com\\\");\\n        if (_id == VALIDATOR_7) return (_id, \\\"https://umb.anorak.technology\\\");\\n        if (_id == VALIDATOR_8) return (_id, \\\"https://umbrella.validator.infstones.io\\\");\\n        if (_id == VALIDATOR_9) return (_id, \\\"https://umb.hashquark.io\\\");\\n        if (_id == VALIDATOR_10) return (_id, \\\"http://umbrella.staking4all.org:3000\\\");\\n        if (_id == VALIDATOR_11) return (_id, \\\"https://umbrella-api.validatrium.club\\\");\\n        if (_id == VALIDATOR_12) return (_id, \\\"http://5.161.78.230:3000\\\");\\n        if (_id == VALIDATOR_13) return (_id, \\\"https://umbnode.blockchainliverpool.com\\\");\\n        if (_id == VALIDATOR_14) return (_id, \\\"https://umb-api.staking.rocks\\\");\\n        if (_id == VALIDATOR_15) return (_id, \\\"https://rpc.urbanhq.net\\\");\\n        if (_id == VALIDATOR_16) return (_id, \\\"https://umbrella-node.ankastake.com\\\");\\n\\n        return (address(0), \\\"\\\");\\n    }\\n\\n    function _addresses() internal view override returns (address[] memory) {\\n        address[] memory list = new address[](NUMBER_OF_VALIDATORS);\\n\\n        list[0] = VALIDATOR_0;\\n        list[1] = VALIDATOR_1;\\n        list[2] = VALIDATOR_2;\\n        list[3] = VALIDATOR_3;\\n        list[4] = VALIDATOR_4;\\n        list[5] = VALIDATOR_5;\\n        list[6] = VALIDATOR_6;\\n        list[7] = VALIDATOR_7;\\n        list[8] = VALIDATOR_8;\\n        list[9] = VALIDATOR_9;\\n        list[10] = VALIDATOR_10;\\n        list[11] = VALIDATOR_11;\\n        list[12] = VALIDATOR_12;\\n        list[13] = VALIDATOR_13;\\n        list[14] = VALIDATOR_14;\\n        list[15] = VALIDATOR_15;\\n        list[16] = VALIDATOR_16;\\n\\n        return list;\\n    }\\n\\n    function _isValidator(address _validator) internal pure override returns (bool) {\\n        return (\\n            _validator == VALIDATOR_0\\n            || _validator == VALIDATOR_1\\n            || _validator == VALIDATOR_2\\n            || _validator == VALIDATOR_3\\n            || _validator == VALIDATOR_4\\n            || _validator == VALIDATOR_5\\n            || _validator == VALIDATOR_6\\n            || _validator == VALIDATOR_7\\n            || _validator == VALIDATOR_8\\n            || _validator == VALIDATOR_9\\n            || _validator == VALIDATOR_10\\n            || _validator == VALIDATOR_11\\n            || _validator == VALIDATOR_12\\n            || _validator == VALIDATOR_13\\n            || _validator == VALIDATOR_14\\n            || _validator == VALIDATOR_15\\n            || _validator == VALIDATOR_16\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x86d890d35da67c0cab187c0bc95b673f4328c7953ba3b7ee4861364f97e21098\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200395638038062003956833981810160405281019062000037919062000d4d565b808060808181525050670de0b6b3a76400008162000056919062000dae565b60a081815250506200006e816200007660201b60201c565b505062000e6d565b600062000088620000ef60201b60201c565b9050818151146200009857600080fd5b60005b82811015620000ea57620000d2828281518110620000be57620000bd62000e0f565b5b60200260200101516200081160201b60201c565b620000dc57600080fd5b80806001019150506200009b565b505050565b6060600060805167ffffffffffffffff81111562000112576200011162000e3e565b5b604051908082528060200260200182016040528015620001415781602001602082028036833780820191505090505b50905073977ba523420110e230643b772fe9cf955e11da7b8160008151811062000170576200016f62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e2422b23e52bc13eba04d7fbb9f332deb43360fb81600181518110620001d657620001d562000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507357f404ad75e371c1a539589c1efca12e0c6980ad816002815181106200023c576200023b62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073d56c6a4f64e0bd70260472d1db6cf5825858cb0d81600381518110620002a257620002a162000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073220230eda8f50067dd9e4729345dabcce0c615428160048151811062000308576200030762000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507393fdcab283b0bcac48157590af482e1cfd6af6ac816005815181106200036e576200036d62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073cd733e06b06083d52fc5867e8e3432aa5c103a3881600681518110620003d457620003d362000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507342e210b110c6aa49cdfa7cef1444aa4719653111816007815181106200043a576200043962000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073501731c6a69803a53ec6c3e12f293c247ce1092b81600881518110620004a0576200049f62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050738bf9661f1b247522c75dd0fe84355ad2eff271448160098151811062000506576200050562000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073281754ab58391a478b7aa4e7f39991cfb41118c481600a815181106200056c576200056b62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073b9c63a350a04d8bd245d18928a26ee036352ddd881600b81518110620005d257620005d162000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507357a51d5bdce188c2295fca3b4687475a54e65a0281600c8151811062000638576200063762000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073777fba3666fa7747476a34577fccc404b263e09f81600d815181106200069e576200069d62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050732f85824b2b38f179e451988670935d315b5b969281600e8151811062000704576200070362000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073a7241994267682de4de7ef62f52dc2c783d1784b81600f815181106200076a576200076962000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050736eed457c20603edae50c3a112caa1a9425321bd081601081518110620007d057620007cf62000e0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508091505090565b600073977ba523420110e230643b772fe9cf955e11da7b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480620008a1575073e2422b23e52bc13eba04d7fbb9f332deb43360fb73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80620008ec57507357f404ad75e371c1a539589c1efca12e0c6980ad73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000937575073d56c6a4f64e0bd70260472d1db6cf5825858cb0d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000982575073220230eda8f50067dd9e4729345dabcce0c6154273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80620009cd57507393fdcab283b0bcac48157590af482e1cfd6af6ac73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000a18575073cd733e06b06083d52fc5867e8e3432aa5c103a3873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000a6357507342e210b110c6aa49cdfa7cef1444aa471965311173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000aae575073501731c6a69803a53ec6c3e12f293c247ce1092b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000af95750738bf9661f1b247522c75dd0fe84355ad2eff2714473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000b44575073281754ab58391a478b7aa4e7f39991cfb41118c473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000b8f575073b9c63a350a04d8bd245d18928a26ee036352ddd873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000bda57507357a51d5bdce188c2295fca3b4687475a54e65a0273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000c25575073777fba3666fa7747476a34577fccc404b263e09f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000c705750732f85824b2b38f179e451988670935d315b5b969273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000cbb575073a7241994267682de4de7ef62f52dc2c783d1784b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8062000d065750736eed457c20603edae50c3a112caa1a9425321bd073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b600080fd5b6000819050919050565b62000d278162000d12565b811462000d3357600080fd5b50565b60008151905062000d478162000d1c565b92915050565b60006020828403121562000d665762000d6562000d0d565b5b600062000d768482850162000d36565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000dbb8262000d12565b915062000dc88362000d12565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000e045762000e0362000d7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60805160a051612aa062000eb66000396000818161095a0152610bc40152600081816107c90152818161083701528181610bea01528181610d530152611b900152612aa06000f3fe608060405234801561001057600080fd5b50600436106102035760003560e01c8062113e0814610208578063015f7ed61461022657806303a1e22414610244578063095ea7b3146102625780630db18e371461029257806317d7de7c146102c257806318160ddd146102e05780631aa3a008146102fe5780631d4f9ce01461030857806323b872dd1461033857806327e235e31461036857806329092d0e146103985780632e1a7d4d146103b4578063398b056e146103e4578063411ff4971461040257806345f9f8251461042057806352b41e351461043e578063547553351461045a5780635dc4bfd31461047857806369dc7ae41461049657806370a08231146104b4578063838e7c3a146104e4578063902d55a5146105005780639031d9131461051e57806390ff7e2e1461053c578063952c4f181461055a578063989b6996146105785780639f0e948414610596578063a15ab08d146105b4578063a39fac12146105d0578063a694fc3a146105ee578063a9059cbb1461060a578063b2119eac1461063a578063b49b084214610658578063c2ee3a0814610676578063db73177714610694578063dd62ed3e146106b2578063e29349d6146106e2578063e2dc7a1a14610700578063e79a198f1461071e578063e985e00814610728578063e9fad8ee14610746578063edf26d9b14610764578063fa52c7d814610794575b600080fd5b6102106107c5565b60405161021d919061235b565b60405180910390f35b61022e610896565b60405161023b91906123be565b60405180910390f35b61024c6108ae565b60405161025991906123be565b60405180910390f35b61027c6004803603810190610277919061243b565b6108c6565b6040516102899190612496565b60405180910390f35b6102ac60048036038101906102a791906124b1565b6108fa565b6040516102b99190612496565b60405180910390f35b6102ca61092e565b6040516102d791906124f7565b60405180910390f35b6102e8610956565b6040516102f59190612521565b60405180910390f35b61030661097e565b005b610322600480360381019061031d91906125a1565b610980565b60405161032f9190612496565b60405180910390f35b610352600480360381019061034d91906125ee565b6109e6565b60405161035f9190612496565b60405180910390f35b610382600480360381019061037d91906124b1565b610a1a565b60405161038f9190612521565b60405180910390f35b6103b260048036038101906103ad91906124b1565b610a41565b005b6103ce60048036038101906103c99190612641565b610a73565b6040516103db9190612496565b60405180910390f35b6103ec610aa7565b6040516103f991906123be565b60405180910390f35b61040a610abf565b60405161041791906123be565b60405180910390f35b610428610ad7565b60405161043591906123be565b60405180910390f35b61045860048036038101906104539190612641565b610aef565b005b610462610b21565b60405161046f91906123be565b60405180910390f35b610480610b39565b60405161048d91906123be565b60405180910390f35b61049e610b51565b6040516104ab91906123be565b60405180910390f35b6104ce60048036038101906104c991906124b1565b610b69565b6040516104db9190612521565b60405180910390f35b6104fe60048036038101906104f991906126c4565b610b90565b005b610508610bc2565b6040516105159190612521565b60405180910390f35b610526610be6565b6040516105339190612521565b60405180910390f35b610544610c0e565b60405161055191906123be565b60405180910390f35b610562610c26565b60405161056f91906123be565b60405180910390f35b610580610c3e565b60405161058d91906123be565b60405180910390f35b61059e610c56565b6040516105ab91906123be565b60405180910390f35b6105ce60048036038101906105c991906126c4565b610c6e565b005b6105d8610ca0565b6040516105e591906127e2565b60405180910390f35b61060860048036038101906106039190612641565b610caf565b005b610624600480360381019061061f919061243b565b610ce1565b6040516106319190612496565b60405180910390f35b610642610d15565b60405161064f91906123be565b60405180910390f35b610660610d2d565b60405161066d91906123be565b60405180910390f35b61067e610d45565b60405161068b9190612521565b60405180910390f35b61069c610d51565b6040516106a99190612521565b60405180910390f35b6106cc60048036038101906106c79190612804565b610d75565b6040516106d99190612521565b60405180910390f35b6106ea610da9565b6040516106f791906123be565b60405180910390f35b610708610dc1565b60405161071591906123be565b60405180910390f35b610726610dd9565b005b610730610ddb565b60405161073d91906123be565b60405180910390f35b61074e610df3565b60405161075b9190612496565b60405180910390f35b61077e60048036038101906107799190612641565b610e27565b60405161078b91906123be565b60405180910390f35b6107ae60048036038101906107a991906124b1565b610e52565b6040516107bc9291906128dd565b60405180910390f35b60607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111156108015761080061290d565b5b60405190808252806020026020018201604052801561082f5781602001602082028036833780820191505090505b50905060005b7f000000000000000000000000000000000000000000000000000000000000000081101561089257670de0b6b3a76400008282815181106108795761087861293c565b5b6020026020010181815250508080600101915050610835565b5090565b73cd733e06b06083d52fc5867e8e3432aa5c103a3881565b73501731c6a69803a53ec6c3e12f293c247ce1092b81565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f5374616b696e6742616e6b000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b565b6000805b838390508110156109da576109bf8484838181106109a5576109a461293c565b5b90506020020160208101906109ba91906124b1565b61169e565b6109cd5760009150506109e0565b8080600101915050610984565b50600190505b92915050565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a258261169e565b610a30576000610a3a565b670de0b6b3a76400005b9050919050565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7357a51d5bdce188c2295fca3b4687475a54e65a0281565b73e2422b23e52bc13eba04d7fbb9f332deb43360fb81565b732f85824b2b38f179e451988670935d315b5b969281565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7393fdcab283b0bcac48157590af482e1cfd6af6ac81565b73d56c6a4f64e0bd70260472d1db6cf5825858cb0d81565b73777fba3666fa7747476a34577fccc404b263e09f81565b6000610b748261169e565b610b7f576000610b89565b670de0b6b3a76400005b9050919050565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b73220230eda8f50067dd9e4729345dabcce0c6154281565b73a7241994267682de4de7ef62f52dc2c783d1784b81565b738bf9661f1b247522c75dd0fe84355ad2eff2714481565b73977ba523420110e230643b772fe9cf955e11da7b81565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060610caa611b8a565b905090565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73281754ab58391a478b7aa4e7f39991cfb41118c481565b7357f404ad75e371c1a539589c1efca12e0c6980ad81565b670de0b6b3a764000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b736eed457c20603edae50c3a112caa1a9425321bd081565b7342e210b110c6aa49cdfa7cef1444aa471965311181565b565b73b9c63a350a04d8bd245d18928a26ee036352ddd881565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e31611b8a565b8281518110610e4357610e4261293c565b5b60200260200101519050919050565b6000606073977ba523420110e230643b772fe9cf955e11da7b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610edd57826040518060400160405280601d81526020017f68747470733a2f2f76616c696461746f722e756d622e6e6574776f726b00000081525091509150611699565b73e2422b23e52bc13eba04d7fbb9f332deb43360fb73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f6457826040518060400160405280601e81526020017f68747470733a2f2f76616c696461746f72322e756d622e6e6574776f726b000081525091509150611699565b7357f404ad75e371c1a539589c1efca12e0c6980ad73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610feb57826040518060400160405280601e81526020017f68747470733a2f2f756d6272656c6c612e617274656d6168722e74656368000081525091509150611699565b73d56c6a4f64e0bd70260472d1db6cf5825858cb0d73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611055578260405180606001604052806022815260200161298f6022913991509150611699565b73220230eda8f50067dd9e4729345dabcce0c6154273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110dc57826040518060400160405280601981526020017f68747470733a2f2f756d622e7374616b6572732e776f726c640000000000000081525091509150611699565b7393fdcab283b0bcac48157590af482e1cfd6af6ac73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361116357826040518060400160405280601e81526020017f68747470733a2f2f756d6272656c6c612e6372617a797768616c652e6573000081525091509150611699565b73cd733e06b06083d52fc5867e8e3432aa5c103a3873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111cd578260405180606001604052806023815260200161296c6023913991509150611699565b7342e210b110c6aa49cdfa7cef1444aa471965311173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361125457826040518060400160405280601d81526020017f68747470733a2f2f756d622e616e6f72616b2e746563686e6f6c6f677900000081525091509150611699565b73501731c6a69803a53ec6c3e12f293c247ce1092b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112be57826040518060600160405280602781526020016129d56027913991509150611699565b738bf9661f1b247522c75dd0fe84355ad2eff2714473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361134557826040518060400160405280601881526020017f68747470733a2f2f756d622e68617368717561726b2e696f000000000000000081525091509150611699565b73281754ab58391a478b7aa4e7f39991cfb41118c473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113af57826040518060600160405280602481526020016129b16024913991509150611699565b73b9c63a350a04d8bd245d18928a26ee036352ddd873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361141957826040518060600160405280602581526020016129fc6025913991509150611699565b7357a51d5bdce188c2295fca3b4687475a54e65a0273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114a057826040518060400160405280601881526020017f687474703a2f2f352e3136312e37382e3233303a33303030000000000000000081525091509150611699565b73777fba3666fa7747476a34577fccc404b263e09f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361150a5782604051806060016040528060278152602001612a446027913991509150611699565b732f85824b2b38f179e451988670935d315b5b969273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361159157826040518060400160405280601d81526020017f68747470733a2f2f756d622d6170692e7374616b696e672e726f636b7300000081525091509150611699565b73a7241994267682de4de7ef62f52dc2c783d1784b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361161857826040518060400160405280601781526020017f68747470733a2f2f7270632e757262616e68712e6e657400000000000000000081525091509150611699565b736eed457c20603edae50c3a112caa1a9425321bd073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036116825782604051806060016040528060238152602001612a216023913991509150611699565b600060405180602001604052806000815250915091505b915091565b600073977ba523420110e230643b772fe9cf955e11da7b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061172d575073e2422b23e52bc13eba04d7fbb9f332deb43360fb73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061177757507357f404ad75e371c1a539589c1efca12e0c6980ad73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806117c1575073d56c6a4f64e0bd70260472d1db6cf5825858cb0d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061180b575073220230eda8f50067dd9e4729345dabcce0c6154273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061185557507393fdcab283b0bcac48157590af482e1cfd6af6ac73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061189f575073cd733e06b06083d52fc5867e8e3432aa5c103a3873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806118e957507342e210b110c6aa49cdfa7cef1444aa471965311173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611933575073501731c6a69803a53ec6c3e12f293c247ce1092b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061197d5750738bf9661f1b247522c75dd0fe84355ad2eff2714473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806119c7575073281754ab58391a478b7aa4e7f39991cfb41118c473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611a11575073b9c63a350a04d8bd245d18928a26ee036352ddd873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611a5b57507357a51d5bdce188c2295fca3b4687475a54e65a0273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611aa5575073777fba3666fa7747476a34577fccc404b263e09f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611aef5750732f85824b2b38f179e451988670935d315b5b969273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611b39575073a7241994267682de4de7ef62f52dc2c783d1784b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611b835750736eed457c20603edae50c3a112caa1a9425321bd073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b606060007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff811115611bc857611bc761290d565b5b604051908082528060200260200182016040528015611bf65781602001602082028036833780820191505090505b50905073977ba523420110e230643b772fe9cf955e11da7b81600081518110611c2257611c2161293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e2422b23e52bc13eba04d7fbb9f332deb43360fb81600181518110611c8557611c8461293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507357f404ad75e371c1a539589c1efca12e0c6980ad81600281518110611ce857611ce761293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073d56c6a4f64e0bd70260472d1db6cf5825858cb0d81600381518110611d4b57611d4a61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073220230eda8f50067dd9e4729345dabcce0c6154281600481518110611dae57611dad61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507393fdcab283b0bcac48157590af482e1cfd6af6ac81600581518110611e1157611e1061293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073cd733e06b06083d52fc5867e8e3432aa5c103a3881600681518110611e7457611e7361293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507342e210b110c6aa49cdfa7cef1444aa471965311181600781518110611ed757611ed661293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073501731c6a69803a53ec6c3e12f293c247ce1092b81600881518110611f3a57611f3961293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050738bf9661f1b247522c75dd0fe84355ad2eff2714481600981518110611f9d57611f9c61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073281754ab58391a478b7aa4e7f39991cfb41118c481600a8151811061200057611fff61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073b9c63a350a04d8bd245d18928a26ee036352ddd881600b815181106120635761206261293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507357a51d5bdce188c2295fca3b4687475a54e65a0281600c815181106120c6576120c561293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073777fba3666fa7747476a34577fccc404b263e09f81600d815181106121295761212861293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050732f85824b2b38f179e451988670935d315b5b969281600e8151811061218c5761218b61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073a7241994267682de4de7ef62f52dc2c783d1784b81600f815181106121ef576121ee61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050736eed457c20603edae50c3a112caa1a9425321bd0816010815181106122525761225161293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508091505090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6122d2816122bf565b82525050565b60006122e483836122c9565b60208301905092915050565b6000602082019050919050565b600061230882612293565b612312818561229e565b935061231d836122af565b8060005b8381101561234e57815161233588826122d8565b9750612340836122f0565b925050600181019050612321565b5085935050505092915050565b6000602082019050818103600083015261237581846122fd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123a88261237d565b9050919050565b6123b88161239d565b82525050565b60006020820190506123d360008301846123af565b92915050565b600080fd5b600080fd5b6123ec8161239d565b81146123f757600080fd5b50565b600081359050612409816123e3565b92915050565b612418816122bf565b811461242357600080fd5b50565b6000813590506124358161240f565b92915050565b60008060408385031215612452576124516123d9565b5b6000612460858286016123fa565b925050602061247185828601612426565b9150509250929050565b60008115159050919050565b6124908161247b565b82525050565b60006020820190506124ab6000830184612487565b92915050565b6000602082840312156124c7576124c66123d9565b5b60006124d5848285016123fa565b91505092915050565b6000819050919050565b6124f1816124de565b82525050565b600060208201905061250c60008301846124e8565b92915050565b61251b816122bf565b82525050565b60006020820190506125366000830184612512565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125615761256061253c565b5b8235905067ffffffffffffffff81111561257e5761257d612541565b5b60208301915083602082028301111561259a57612599612546565b5b9250929050565b600080602083850312156125b8576125b76123d9565b5b600083013567ffffffffffffffff8111156125d6576125d56123de565b5b6125e28582860161254b565b92509250509250929050565b600080600060608486031215612607576126066123d9565b5b6000612615868287016123fa565b9350506020612626868287016123fa565b925050604061263786828701612426565b9150509250925092565b600060208284031215612657576126566123d9565b5b600061266584828501612426565b91505092915050565b60008083601f8401126126845761268361253c565b5b8235905067ffffffffffffffff8111156126a1576126a0612541565b5b6020830191508360018202830111156126bd576126bc612546565b5b9250929050565b6000806000604084860312156126dd576126dc6123d9565b5b60006126eb868287016123fa565b935050602084013567ffffffffffffffff81111561270c5761270b6123de565b5b6127188682870161266e565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127598161239d565b82525050565b600061276b8383612750565b60208301905092915050565b6000602082019050919050565b600061278f82612724565b612799818561272f565b93506127a483612740565b8060005b838110156127d55781516127bc888261275f565b97506127c783612777565b9250506001810190506127a8565b5085935050505092915050565b600060208201905081810360008301526127fc8184612784565b905092915050565b6000806040838503121561281b5761281a6123d9565b5b6000612829858286016123fa565b925050602061283a858286016123fa565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561287e578082015181840152602081019050612863565b8381111561288d576000848401525b50505050565b6000601f19601f8301169050919050565b60006128af82612844565b6128b9818561284f565b93506128c9818560208601612860565b6128d281612893565b840191505092915050565b60006040820190506128f260008301856123af565b818103602083015261290481846128a4565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe68747470733a2f2f756d6272656c6c612d6e6f64652e676174656f6d6567612e636f6d68747470733a2f2f756d622e76746162736f6c7574696f6e732e636f6d3a33303330687474703a2f2f756d6272656c6c612e7374616b696e6734616c6c2e6f72673a3330303068747470733a2f2f756d6272656c6c612e76616c696461746f722e696e6673746f6e65732e696f68747470733a2f2f756d6272656c6c612d6170692e76616c696461747269756d2e636c756268747470733a2f2f756d6272656c6c612d6e6f64652e616e6b617374616b652e636f6d68747470733a2f2f756d626e6f64652e626c6f636b636861696e6c69766572706f6f6c2e636f6da2646970667358221220aba162f765b69d88df93583981cf3c1100718ea8e6e60167b00ee848574ca32364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102035760003560e01c8062113e0814610208578063015f7ed61461022657806303a1e22414610244578063095ea7b3146102625780630db18e371461029257806317d7de7c146102c257806318160ddd146102e05780631aa3a008146102fe5780631d4f9ce01461030857806323b872dd1461033857806327e235e31461036857806329092d0e146103985780632e1a7d4d146103b4578063398b056e146103e4578063411ff4971461040257806345f9f8251461042057806352b41e351461043e578063547553351461045a5780635dc4bfd31461047857806369dc7ae41461049657806370a08231146104b4578063838e7c3a146104e4578063902d55a5146105005780639031d9131461051e57806390ff7e2e1461053c578063952c4f181461055a578063989b6996146105785780639f0e948414610596578063a15ab08d146105b4578063a39fac12146105d0578063a694fc3a146105ee578063a9059cbb1461060a578063b2119eac1461063a578063b49b084214610658578063c2ee3a0814610676578063db73177714610694578063dd62ed3e146106b2578063e29349d6146106e2578063e2dc7a1a14610700578063e79a198f1461071e578063e985e00814610728578063e9fad8ee14610746578063edf26d9b14610764578063fa52c7d814610794575b600080fd5b6102106107c5565b60405161021d919061235b565b60405180910390f35b61022e610896565b60405161023b91906123be565b60405180910390f35b61024c6108ae565b60405161025991906123be565b60405180910390f35b61027c6004803603810190610277919061243b565b6108c6565b6040516102899190612496565b60405180910390f35b6102ac60048036038101906102a791906124b1565b6108fa565b6040516102b99190612496565b60405180910390f35b6102ca61092e565b6040516102d791906124f7565b60405180910390f35b6102e8610956565b6040516102f59190612521565b60405180910390f35b61030661097e565b005b610322600480360381019061031d91906125a1565b610980565b60405161032f9190612496565b60405180910390f35b610352600480360381019061034d91906125ee565b6109e6565b60405161035f9190612496565b60405180910390f35b610382600480360381019061037d91906124b1565b610a1a565b60405161038f9190612521565b60405180910390f35b6103b260048036038101906103ad91906124b1565b610a41565b005b6103ce60048036038101906103c99190612641565b610a73565b6040516103db9190612496565b60405180910390f35b6103ec610aa7565b6040516103f991906123be565b60405180910390f35b61040a610abf565b60405161041791906123be565b60405180910390f35b610428610ad7565b60405161043591906123be565b60405180910390f35b61045860048036038101906104539190612641565b610aef565b005b610462610b21565b60405161046f91906123be565b60405180910390f35b610480610b39565b60405161048d91906123be565b60405180910390f35b61049e610b51565b6040516104ab91906123be565b60405180910390f35b6104ce60048036038101906104c991906124b1565b610b69565b6040516104db9190612521565b60405180910390f35b6104fe60048036038101906104f991906126c4565b610b90565b005b610508610bc2565b6040516105159190612521565b60405180910390f35b610526610be6565b6040516105339190612521565b60405180910390f35b610544610c0e565b60405161055191906123be565b60405180910390f35b610562610c26565b60405161056f91906123be565b60405180910390f35b610580610c3e565b60405161058d91906123be565b60405180910390f35b61059e610c56565b6040516105ab91906123be565b60405180910390f35b6105ce60048036038101906105c991906126c4565b610c6e565b005b6105d8610ca0565b6040516105e591906127e2565b60405180910390f35b61060860048036038101906106039190612641565b610caf565b005b610624600480360381019061061f919061243b565b610ce1565b6040516106319190612496565b60405180910390f35b610642610d15565b60405161064f91906123be565b60405180910390f35b610660610d2d565b60405161066d91906123be565b60405180910390f35b61067e610d45565b60405161068b9190612521565b60405180910390f35b61069c610d51565b6040516106a99190612521565b60405180910390f35b6106cc60048036038101906106c79190612804565b610d75565b6040516106d99190612521565b60405180910390f35b6106ea610da9565b6040516106f791906123be565b60405180910390f35b610708610dc1565b60405161071591906123be565b60405180910390f35b610726610dd9565b005b610730610ddb565b60405161073d91906123be565b60405180910390f35b61074e610df3565b60405161075b9190612496565b60405180910390f35b61077e60048036038101906107799190612641565b610e27565b60405161078b91906123be565b60405180910390f35b6107ae60048036038101906107a991906124b1565b610e52565b6040516107bc9291906128dd565b60405180910390f35b60607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111156108015761080061290d565b5b60405190808252806020026020018201604052801561082f5781602001602082028036833780820191505090505b50905060005b7f000000000000000000000000000000000000000000000000000000000000000081101561089257670de0b6b3a76400008282815181106108795761087861293c565b5b6020026020010181815250508080600101915050610835565b5090565b73cd733e06b06083d52fc5867e8e3432aa5c103a3881565b73501731c6a69803a53ec6c3e12f293c247ce1092b81565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f5374616b696e6742616e6b000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b565b6000805b838390508110156109da576109bf8484838181106109a5576109a461293c565b5b90506020020160208101906109ba91906124b1565b61169e565b6109cd5760009150506109e0565b8080600101915050610984565b50600190505b92915050565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a258261169e565b610a30576000610a3a565b670de0b6b3a76400005b9050919050565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7357a51d5bdce188c2295fca3b4687475a54e65a0281565b73e2422b23e52bc13eba04d7fbb9f332deb43360fb81565b732f85824b2b38f179e451988670935d315b5b969281565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7393fdcab283b0bcac48157590af482e1cfd6af6ac81565b73d56c6a4f64e0bd70260472d1db6cf5825858cb0d81565b73777fba3666fa7747476a34577fccc404b263e09f81565b6000610b748261169e565b610b7f576000610b89565b670de0b6b3a76400005b9050919050565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b73220230eda8f50067dd9e4729345dabcce0c6154281565b73a7241994267682de4de7ef62f52dc2c783d1784b81565b738bf9661f1b247522c75dd0fe84355ad2eff2714481565b73977ba523420110e230643b772fe9cf955e11da7b81565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060610caa611b8a565b905090565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73281754ab58391a478b7aa4e7f39991cfb41118c481565b7357f404ad75e371c1a539589c1efca12e0c6980ad81565b670de0b6b3a764000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b736eed457c20603edae50c3a112caa1a9425321bd081565b7342e210b110c6aa49cdfa7cef1444aa471965311181565b565b73b9c63a350a04d8bd245d18928a26ee036352ddd881565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e31611b8a565b8281518110610e4357610e4261293c565b5b60200260200101519050919050565b6000606073977ba523420110e230643b772fe9cf955e11da7b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610edd57826040518060400160405280601d81526020017f68747470733a2f2f76616c696461746f722e756d622e6e6574776f726b00000081525091509150611699565b73e2422b23e52bc13eba04d7fbb9f332deb43360fb73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f6457826040518060400160405280601e81526020017f68747470733a2f2f76616c696461746f72322e756d622e6e6574776f726b000081525091509150611699565b7357f404ad75e371c1a539589c1efca12e0c6980ad73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610feb57826040518060400160405280601e81526020017f68747470733a2f2f756d6272656c6c612e617274656d6168722e74656368000081525091509150611699565b73d56c6a4f64e0bd70260472d1db6cf5825858cb0d73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611055578260405180606001604052806022815260200161298f6022913991509150611699565b73220230eda8f50067dd9e4729345dabcce0c6154273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110dc57826040518060400160405280601981526020017f68747470733a2f2f756d622e7374616b6572732e776f726c640000000000000081525091509150611699565b7393fdcab283b0bcac48157590af482e1cfd6af6ac73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361116357826040518060400160405280601e81526020017f68747470733a2f2f756d6272656c6c612e6372617a797768616c652e6573000081525091509150611699565b73cd733e06b06083d52fc5867e8e3432aa5c103a3873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111cd578260405180606001604052806023815260200161296c6023913991509150611699565b7342e210b110c6aa49cdfa7cef1444aa471965311173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361125457826040518060400160405280601d81526020017f68747470733a2f2f756d622e616e6f72616b2e746563686e6f6c6f677900000081525091509150611699565b73501731c6a69803a53ec6c3e12f293c247ce1092b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112be57826040518060600160405280602781526020016129d56027913991509150611699565b738bf9661f1b247522c75dd0fe84355ad2eff2714473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361134557826040518060400160405280601881526020017f68747470733a2f2f756d622e68617368717561726b2e696f000000000000000081525091509150611699565b73281754ab58391a478b7aa4e7f39991cfb41118c473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113af57826040518060600160405280602481526020016129b16024913991509150611699565b73b9c63a350a04d8bd245d18928a26ee036352ddd873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361141957826040518060600160405280602581526020016129fc6025913991509150611699565b7357a51d5bdce188c2295fca3b4687475a54e65a0273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114a057826040518060400160405280601881526020017f687474703a2f2f352e3136312e37382e3233303a33303030000000000000000081525091509150611699565b73777fba3666fa7747476a34577fccc404b263e09f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361150a5782604051806060016040528060278152602001612a446027913991509150611699565b732f85824b2b38f179e451988670935d315b5b969273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361159157826040518060400160405280601d81526020017f68747470733a2f2f756d622d6170692e7374616b696e672e726f636b7300000081525091509150611699565b73a7241994267682de4de7ef62f52dc2c783d1784b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361161857826040518060400160405280601781526020017f68747470733a2f2f7270632e757262616e68712e6e657400000000000000000081525091509150611699565b736eed457c20603edae50c3a112caa1a9425321bd073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036116825782604051806060016040528060238152602001612a216023913991509150611699565b600060405180602001604052806000815250915091505b915091565b600073977ba523420110e230643b772fe9cf955e11da7b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061172d575073e2422b23e52bc13eba04d7fbb9f332deb43360fb73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061177757507357f404ad75e371c1a539589c1efca12e0c6980ad73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806117c1575073d56c6a4f64e0bd70260472d1db6cf5825858cb0d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061180b575073220230eda8f50067dd9e4729345dabcce0c6154273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061185557507393fdcab283b0bcac48157590af482e1cfd6af6ac73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061189f575073cd733e06b06083d52fc5867e8e3432aa5c103a3873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806118e957507342e210b110c6aa49cdfa7cef1444aa471965311173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611933575073501731c6a69803a53ec6c3e12f293c247ce1092b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061197d5750738bf9661f1b247522c75dd0fe84355ad2eff2714473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806119c7575073281754ab58391a478b7aa4e7f39991cfb41118c473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611a11575073b9c63a350a04d8bd245d18928a26ee036352ddd873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611a5b57507357a51d5bdce188c2295fca3b4687475a54e65a0273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611aa5575073777fba3666fa7747476a34577fccc404b263e09f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611aef5750732f85824b2b38f179e451988670935d315b5b969273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611b39575073a7241994267682de4de7ef62f52dc2c783d1784b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611b835750736eed457c20603edae50c3a112caa1a9425321bd073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b606060007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff811115611bc857611bc761290d565b5b604051908082528060200260200182016040528015611bf65781602001602082028036833780820191505090505b50905073977ba523420110e230643b772fe9cf955e11da7b81600081518110611c2257611c2161293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e2422b23e52bc13eba04d7fbb9f332deb43360fb81600181518110611c8557611c8461293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507357f404ad75e371c1a539589c1efca12e0c6980ad81600281518110611ce857611ce761293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073d56c6a4f64e0bd70260472d1db6cf5825858cb0d81600381518110611d4b57611d4a61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073220230eda8f50067dd9e4729345dabcce0c6154281600481518110611dae57611dad61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507393fdcab283b0bcac48157590af482e1cfd6af6ac81600581518110611e1157611e1061293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073cd733e06b06083d52fc5867e8e3432aa5c103a3881600681518110611e7457611e7361293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507342e210b110c6aa49cdfa7cef1444aa471965311181600781518110611ed757611ed661293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073501731c6a69803a53ec6c3e12f293c247ce1092b81600881518110611f3a57611f3961293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050738bf9661f1b247522c75dd0fe84355ad2eff2714481600981518110611f9d57611f9c61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073281754ab58391a478b7aa4e7f39991cfb41118c481600a8151811061200057611fff61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073b9c63a350a04d8bd245d18928a26ee036352ddd881600b815181106120635761206261293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507357a51d5bdce188c2295fca3b4687475a54e65a0281600c815181106120c6576120c561293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073777fba3666fa7747476a34577fccc404b263e09f81600d815181106121295761212861293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050732f85824b2b38f179e451988670935d315b5b969281600e8151811061218c5761218b61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073a7241994267682de4de7ef62f52dc2c783d1784b81600f815181106121ef576121ee61293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050736eed457c20603edae50c3a112caa1a9425321bd0816010815181106122525761225161293c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508091505090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6122d2816122bf565b82525050565b60006122e483836122c9565b60208301905092915050565b6000602082019050919050565b600061230882612293565b612312818561229e565b935061231d836122af565b8060005b8381101561234e57815161233588826122d8565b9750612340836122f0565b925050600181019050612321565b5085935050505092915050565b6000602082019050818103600083015261237581846122fd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123a88261237d565b9050919050565b6123b88161239d565b82525050565b60006020820190506123d360008301846123af565b92915050565b600080fd5b600080fd5b6123ec8161239d565b81146123f757600080fd5b50565b600081359050612409816123e3565b92915050565b612418816122bf565b811461242357600080fd5b50565b6000813590506124358161240f565b92915050565b60008060408385031215612452576124516123d9565b5b6000612460858286016123fa565b925050602061247185828601612426565b9150509250929050565b60008115159050919050565b6124908161247b565b82525050565b60006020820190506124ab6000830184612487565b92915050565b6000602082840312156124c7576124c66123d9565b5b60006124d5848285016123fa565b91505092915050565b6000819050919050565b6124f1816124de565b82525050565b600060208201905061250c60008301846124e8565b92915050565b61251b816122bf565b82525050565b60006020820190506125366000830184612512565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125615761256061253c565b5b8235905067ffffffffffffffff81111561257e5761257d612541565b5b60208301915083602082028301111561259a57612599612546565b5b9250929050565b600080602083850312156125b8576125b76123d9565b5b600083013567ffffffffffffffff8111156125d6576125d56123de565b5b6125e28582860161254b565b92509250509250929050565b600080600060608486031215612607576126066123d9565b5b6000612615868287016123fa565b9350506020612626868287016123fa565b925050604061263786828701612426565b9150509250925092565b600060208284031215612657576126566123d9565b5b600061266584828501612426565b91505092915050565b60008083601f8401126126845761268361253c565b5b8235905067ffffffffffffffff8111156126a1576126a0612541565b5b6020830191508360018202830111156126bd576126bc612546565b5b9250929050565b6000806000604084860312156126dd576126dc6123d9565b5b60006126eb868287016123fa565b935050602084013567ffffffffffffffff81111561270c5761270b6123de565b5b6127188682870161266e565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127598161239d565b82525050565b600061276b8383612750565b60208301905092915050565b6000602082019050919050565b600061278f82612724565b612799818561272f565b93506127a483612740565b8060005b838110156127d55781516127bc888261275f565b97506127c783612777565b9250506001810190506127a8565b5085935050505092915050565b600060208201905081810360008301526127fc8184612784565b905092915050565b6000806040838503121561281b5761281a6123d9565b5b6000612829858286016123fa565b925050602061283a858286016123fa565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561287e578082015181840152602081019050612863565b8381111561288d576000848401525b50505050565b6000601f19601f8301169050919050565b60006128af82612844565b6128b9818561284f565b93506128c9818560208601612860565b6128d281612893565b840191505092915050565b60006040820190506128f260008301856123af565b818103602083015261290481846128a4565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe68747470733a2f2f756d6272656c6c612d6e6f64652e676174656f6d6567612e636f6d68747470733a2f2f756d622e76746162736f6c7574696f6e732e636f6d3a33303330687474703a2f2f756d6272656c6c612e7374616b696e6734616c6c2e6f72673a3330303068747470733a2f2f756d6272656c6c612e76616c696461746f722e696e6673746f6e65732e696f68747470733a2f2f756d6272656c6c612d6170692e76616c696461747269756d2e636c756268747470733a2f2f756d6272656c6c612d6e6f64652e616e6b617374616b652e636f6d68747470733a2f2f756d626e6f64652e626c6f636b636861696e6c69766572706f6f6c2e636f6da2646970667358221220aba162f765b69d88df93583981cf3c1100718ea8e6e60167b00ee848574ca32364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addresses(uint256)": {
        "details": "gets validator address for provided index",
        "params": {
          "_ix": "index in array of list of all validators wallets"
        }
      },
      "balanceOf(address)": {
        "details": "to follow ERC20 interface"
      },
      "exit()": {
        "details": "unstake and withdraw all tokens"
      },
      "getName()": {
        "details": "to follow Registrable interface"
      },
      "getNumberOfValidators()": {
        "returns": {
          "_0": "total number of registered validators (with and without balance)"
        }
      },
      "register()": {
        "details": "to follow Registrable interface"
      },
      "totalSupply()": {
        "details": "to follow ERC20 interface"
      },
      "unregister()": {
        "details": "to follow Registrable interface"
      },
      "validators(address)": {
        "params": {
          "_id": "address of validator"
        },
        "returns": {
          "id": "address of validator",
          "location": "URL of validator"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}