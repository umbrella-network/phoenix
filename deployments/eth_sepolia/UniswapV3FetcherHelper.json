{
  "address": "0x1B9131518EadDFDCCc1876616e3Bf9c534b4e527",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IQuoterV2",
          "name": "_quoter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IUniswapV3Pool[]",
              "name": "pools",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quote",
              "type": "address"
            }
          ],
          "internalType": "struct UniswapV3FetcherHelper.PriceData[]",
          "name": "_data",
          "type": "tuple[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapV3FetcherHelper.Price[]",
          "name": "prices",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "tokensSymbols",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7349df411aeb7b47fd77dbf9d8fd8297a9296738e258c87204daf9853ffc6960",
  "receipt": {
    "to": null,
    "from": "0x66f13FDceed822E74b6a1e08e082Fa699fF36454",
    "contractAddress": "0x1B9131518EadDFDCCc1876616e3Bf9c534b4e527",
    "transactionIndex": 146,
    "gasUsed": "1351005",
    "logsBloom": "0x
    "blockHash": "0x5bb177e53da6192a2b3e59bc21e4eff28c55b03985f3e6b94de940e708984031",
    "transactionHash": "0x7349df411aeb7b47fd77dbf9d8fd8297a9296738e258c87204daf9853ffc6960",
    "logs": [],
    "blockNumber": 5704479,
    "cumulativeGasUsed": "20197702",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0227628f3F023bb0B980b67D528571c95c6DaC1c",
    "0x29A5f90DBe54A11d37b0b18573fF853c7dc5433B"
  ],
  "numDeployments": 2,
  "solcInputHash": "0a83b861b180a0259b7156e26bd9bea3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IQuoterV2\",\"name\":\"_quoter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IUniswapV3Pool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"internalType\":\"struct UniswapV3FetcherHelper.PriceData[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapV3FetcherHelper.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"tokensSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrices((address[],address,address)[])\":{\"details\":\"this method will return estimations for swap for one base token it can not be view, but to get estimation you have to call it in a static way Tokens that do not have `.decimals()` are not supported\",\"params\":{\"_data\":\"array of PriceData, each PriceData can accept multiple pools per one price, price is fetched from pool, that has biggest liquidity (quote.balanceOf(pool)) TODO balanceOf might be not liquidity and by sending token to pool we can in theory affect this fetcher\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fetchers/uniswapV3/UniswapV3FetcherHelper.sol\":\"UniswapV3FetcherHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/fetchers/uniswapV3/UniswapV3FetcherHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IUniswapV3Factory} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport {IUniswapV3Pool} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport {IQuoterV2} from \\\"gitmodules/uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\\\";\\n\\n\\ncontract UniswapV3FetcherHelper {\\n    bytes4 internal constant _SYMBOL_SELECTOR = bytes4(keccak256(\\\"symbol()\\\"));\\n    bytes4 internal constant _DECIMALS_SELECTOR = bytes4(keccak256(\\\"decimals()\\\"));\\n\\n    IUniswapV3Factory immutable uniswapV3Factory;\\n    IQuoterV2 immutable uniswapV3Quoter;\\n\\n    struct PriceData {\\n        IUniswapV3Pool[] pools;\\n        address base;\\n        address quote;\\n    }\\n\\n    /// @param price is amount out (normalized to 18 decimals) returned by Uniswap pool for 1 quote token\\n    struct Price {\\n        uint256 price;\\n        bool success;\\n    }\\n\\n    constructor(IUniswapV3Factory _factory, IQuoterV2 _quoter) {\\n        uniswapV3Factory = _factory;\\n        uniswapV3Quoter = _quoter;\\n    }\\n\\n    function tokensSymbols(address[] calldata _tokens) external view virtual returns (string[] memory symbols) {\\n        uint256 n = _tokens.length;\\n        symbols = new string[](n);\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory data) = _tokens[i].staticcall(abi.encode(_SYMBOL_SELECTOR));\\n\\n            symbols[i] = success\\n                ? data.length == 32 ? string(abi.encodePacked(data)) : abi.decode(data, (string))\\n                : \\\"\\\";\\n        }\\n    }\\n\\n    /// @dev this method will return estimations for swap for one base token\\n    /// it can not be view, but to get estimation you have to call it in a static way\\n    /// Tokens that do not have `.decimals()` are not supported\\n    /// @param _data array of PriceData, each PriceData can accept multiple pools per one price, price is fetched from\\n    /// pool, that has biggest liquidity (quote.balanceOf(pool))\\n    /// TODO balanceOf might be not liquidity and by sending token to pool we can in theory affect this fetcher\\n    function getPrices(PriceData[] calldata _data)\\n        external\\n        virtual\\n        returns (Price[] memory prices, uint256 timestamp)\\n    {\\n        timestamp = block.timestamp;\\n        uint256 n = _data.length;\\n        prices = new Price[](n);\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            PriceData memory data = _data[i];\\n            Price memory price = prices[i];\\n\\n            (uint256 baseDecimals, bool baseHasDecimals) = _decimals(data.base);\\n            if (!baseHasDecimals) continue;\\n\\n            uint256 oneBaseToken = 10 ** baseDecimals;\\n\\n            (uint256 quoteDecimals, bool quoteHasDecimals) = _decimals(data.quote);\\n            if (!quoteHasDecimals) continue;\\n\\n            IUniswapV3Pool pool = _findBiggestPool(data.pools, data.quote);\\n            if (address(pool) == address(0)) continue;\\n\\n            uint24 fee = pool.fee();\\n            if (address(pool) != _getPool(data.base, data.quote, fee)) continue;\\n\\n            (bool success, bytes memory result) = address(uniswapV3Quoter).call(abi.encodeWithSelector(\\n                IQuoterV2.quoteExactInputSingle.selector, data.base, data.quote, oneBaseToken, fee, 0\\n            ));\\n\\n            if (success) {\\n                (price.price,,,) = abi.decode(result, (uint256, uint160, uint32, uint256));\\n                price.success = true;\\n            }\\n\\n            unchecked {\\n                // safe to unchech because we checking over/under-flow conditions manually\\n                if (quoteDecimals == 18) {\\n                    // price OK\\n                } else if (quoteDecimals > 18) {\\n                    price.price /= 10 ** (quoteDecimals - 18);\\n                } else {\\n                    price.price *= 10 ** (18 - quoteDecimals);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev finds pool with biggest quote liquidity\\n    function _findBiggestPool(IUniswapV3Pool[] memory _pools, address _quote)\\n        internal\\n        view\\n        virtual\\n        returns (IUniswapV3Pool biggestPool)\\n    {\\n        uint256 biggestBalance = 0;\\n\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            IUniswapV3Pool pool = _pools[i];\\n            uint256 balance = IERC20(_quote).balanceOf(address(pool));\\n\\n            if (balance > biggestBalance) {\\n                biggestPool = pool;\\n                biggestBalance = balance;\\n            }\\n        }\\n    }\\n\\n    function _decimals(address _token) internal view virtual returns (uint256 decimals, bool success) {\\n        bytes memory data;\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success, data) = _token.staticcall(abi.encode(_DECIMALS_SELECTOR));\\n        if (success && data.length != 0) decimals = abi.decode(data, (uint256));\\n        else success = false;\\n    }\\n\\n    function _getPool(address _token0, address _token1, uint24 _fee) internal view virtual returns (address pool) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = address(uniswapV3Factory).staticcall(\\n            abi.encodeWithSelector(IUniswapV3Factory.getPool.selector, _token0, _token1, _fee)\\n        );\\n\\n        if (success) pool = abi.decode(data, (address));\\n    }\\n}\\n\",\"keccak256\":\"0x753097c6c62893b31b234e4ae10dc9dcb508d089e6f7ce613a4df0bea6cb5130\",\"license\":\"MIT\"},\"gitmodules/uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620019383803806200193883398181016040528101906200003791906200016a565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001b1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d982620000ac565b9050919050565b6000620000ed82620000cc565b9050919050565b620000ff81620000e0565b81146200010b57600080fd5b50565b6000815190506200011f81620000f4565b92915050565b60006200013282620000cc565b9050919050565b620001448162000125565b81146200015057600080fd5b50565b600081519050620001648162000139565b92915050565b60008060408385031215620001845762000183620000a7565b5b600062000194858286016200010e565b9250506020620001a78582860162000153565b9150509250929050565b60805160a051611761620001d760003960006104a20152600061082b01526117616000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634757efc11461003b578063e2b535be1461006b575b600080fd5b610055600480360381019061005091906109e7565b61009c565b6040516100629190610b86565b60405180910390f35b61008560048036038101906100809190610bfe565b610267565b604051610093929190610d6c565b60405180910390f35b606060008383905090508067ffffffffffffffff8111156100c0576100bf610d9c565b5b6040519080825280602002602001820160405280156100f357816020015b60608152602001906001900390816100de5790505b50915060005b8181101561025f5760008086868481811061011757610116610dcb565b5b905060200201602081019061012c9190610e58565b73ffffffffffffffffffffffffffffffffffffffff167f95d89b41e2f5f391a79ec54e9d87c79d6e777c63e32c28da95b4e9e4a79250ec6040516020016101739190610ec0565b60405160208183030381529060405260405161018f9190610f22565b600060405180830381855afa9150503d80600081146101ca576040519150601f19603f3d011682016040523d82523d6000602084013e6101cf565b606091505b5091509150816101ee5760405180602001604052806000815250610232565b6020815114610210578080602001905181019061020b919061102b565b610231565b806040516020016102219190610f22565b6040516020818303038152906040525b5b85848151811061024557610244610dcb565b5b6020026020010181905250505080806001019150506100f9565b505092915050565b6060600042905060008484905090508067ffffffffffffffff8111156102905761028f610d9c565b5b6040519080825280602002602001820160405280156102c957816020015b6102b6610952565b8152602001906001900390816102ae5790505b50925060005b818110156106595760008686838181106102ec576102eb610dcb565b5b90506020028101906102fe9190611079565b6103079061122c565b9050600085838151811061031e5761031d610dcb565b5b602002602001015190506000806103388460200151610662565b915091508061034a575050505061064c565b600082600a61035991906113a1565b905060008061036b8760400151610662565b9150915080610380575050505050505061064c565b60006103948860000151896040015161074e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103d757505050505050505061064c565b60008173ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190611427565b905061045d89602001518a6040015183610824565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461049d5750505050505050505061064c565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c6a5026a60e01b8c602001518d604001518a8760006040516024016105019594939291906114c4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161056b9190610f22565b6000604051808303816000865af19150503d80600081146105a8576040519150601f19603f3d011682016040523d82523d6000602084013e6105ad565b606091505b509150915081156105ed57808060200190518101906105cc91906115ab565b9091509050508a600001818152505060018a60200190151590811515815250505b60128603156106405760128611156106285760128603600a0a8a6000018181518161061b5761061a611612565b5b049150818152505061063f565b85601203600a0a8a60000181815102915081815250505b5b50505050505050505050505b80806001019150506102cf565b50509250929050565b60008060608373ffffffffffffffffffffffffffffffffffffffff167f313ce567add4d438edf58b94ff345d7d38c45b17dfc0f947988d7819dca364f96040516020016106af9190610ec0565b6040516020818303038152906040526040516106cb9190610f22565b600060405180830381855afa9150503d8060008114610706576040519150601f19603f3d011682016040523d82523d6000602084013e61070b565b606091505b50809250819350505081801561072357506000815114155b15610743578080602001905181019061073c9190611641565b9250610748565b600091505b50915091565b6000806000905060005b845181101561081c57600085828151811061077657610775610dcb565b5b6020026020010151905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016107bb919061166e565b602060405180830381865afa1580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190611641565b90508381111561080d578194508093505b50508080600101915050610758565b505092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631698ee8260e01b87878760405160240161087d93929190611689565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108e79190610f22565b600060405180830381855afa9150503d8060008114610922576040519150601f19603f3d011682016040523d82523d6000602084013e610927565b606091505b50915091508115610949578080602001905181019061094691906116fe565b92505b50509392505050565b6040518060400160405280600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109a7576109a6610982565b5b8235905067ffffffffffffffff8111156109c4576109c3610987565b5b6020830191508360208202830111156109e0576109df61098c565b5b9250929050565b600080602083850312156109fe576109fd610978565b5b600083013567ffffffffffffffff811115610a1c57610a1b61097d565b5b610a2885828601610991565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a9a578082015181840152602081019050610a7f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ac282610a60565b610acc8185610a6b565b9350610adc818560208601610a7c565b610ae581610aa6565b840191505092915050565b6000610afc8383610ab7565b905092915050565b6000602082019050919050565b6000610b1c82610a34565b610b268185610a3f565b935083602082028501610b3885610a50565b8060005b85811015610b745784840389528151610b558582610af0565b9450610b6083610b04565b925060208a01995050600181019050610b3c565b50829750879550505050505092915050565b60006020820190508181036000830152610ba08184610b11565b905092915050565b60008083601f840112610bbe57610bbd610982565b5b8235905067ffffffffffffffff811115610bdb57610bda610987565b5b602083019150836020820283011115610bf757610bf661098c565b5b9250929050565b60008060208385031215610c1557610c14610978565b5b600083013567ffffffffffffffff811115610c3357610c3261097d565b5b610c3f85828601610ba8565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610c8a81610c77565b82525050565b60008115159050919050565b610ca581610c90565b82525050565b604082016000820151610cc16000850182610c81565b506020820151610cd46020850182610c9c565b50505050565b6000610ce68383610cab565b60408301905092915050565b6000602082019050919050565b6000610d0a82610c4b565b610d148185610c56565b9350610d1f83610c67565b8060005b83811015610d50578151610d378882610cda565b9750610d4283610cf2565b925050600181019050610d23565b5085935050505092915050565b610d6681610c77565b82525050565b60006040820190508181036000830152610d868185610cff565b9050610d956020830184610d5d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2582610dfa565b9050919050565b610e3581610e1a565b8114610e4057600080fd5b50565b600081359050610e5281610e2c565b92915050565b600060208284031215610e6e57610e6d610978565b5b6000610e7c84828501610e43565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610eba81610e85565b82525050565b6000602082019050610ed56000830184610eb1565b92915050565b600081519050919050565b600081905092915050565b6000610efc82610edb565b610f068185610ee6565b9350610f16818560208601610a7c565b80840191505092915050565b6000610f2e8284610ef1565b915081905092915050565b600080fd5b610f4782610aa6565b810181811067ffffffffffffffff82111715610f6657610f65610d9c565b5b80604052505050565b6000610f7961096e565b9050610f858282610f3e565b919050565b600067ffffffffffffffff821115610fa557610fa4610d9c565b5b610fae82610aa6565b9050602081019050919050565b6000610fce610fc984610f8a565b610f6f565b905082815260208101848484011115610fea57610fe9610f39565b5b610ff5848285610a7c565b509392505050565b600082601f83011261101257611011610982565b5b8151611022848260208601610fbb565b91505092915050565b60006020828403121561104157611040610978565b5b600082015167ffffffffffffffff81111561105f5761105e61097d565b5b61106b84828501610ffd565b91505092915050565b600080fd5b60008235600160600383360303811261109557611094611074565b5b80830191505092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156110c6576110c5610d9c565b5b602082029050602081019050919050565b60006110e282610e1a565b9050919050565b6110f2816110d7565b81146110fd57600080fd5b50565b60008135905061110f816110e9565b92915050565b6000611128611123846110ab565b610f6f565b9050808382526020820190506020840283018581111561114b5761114a61098c565b5b835b8181101561117457806111608882611100565b84526020840193505060208101905061114d565b5050509392505050565b600082601f83011261119357611192610982565b5b81356111a3848260208601611115565b91505092915050565b6000606082840312156111c2576111c16110a1565b5b6111cc6060610f6f565b9050600082013567ffffffffffffffff8111156111ec576111eb6110a6565b5b6111f88482850161117e565b600083015250602061120c84828501610e43565b602083015250604061122084828501610e43565b60408301525092915050565b600061123836836111ac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156112c5578086048111156112a1576112a061123f565b5b60018516156112b05780820291505b80810290506112be8561126e565b9450611285565b94509492505050565b6000826112de576001905061139a565b816112ec576000905061139a565b8160018114611302576002811461130c5761133b565b600191505061139a565b60ff84111561131e5761131d61123f565b5b8360020a9150848211156113355761133461123f565b5b5061139a565b5060208310610133831016604e8410600b84101617156113705782820a90508381111561136b5761136a61123f565b5b61139a565b61137d848484600161127b565b925090508184048111156113945761139361123f565b5b81810290505b9392505050565b60006113ac82610c77565b91506113b783610c77565b92506113e47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846112ce565b905092915050565b600062ffffff82169050919050565b611404816113ec565b811461140f57600080fd5b50565b600081519050611421816113fb565b92915050565b60006020828403121561143d5761143c610978565b5b600061144b84828501611412565b91505092915050565b61145d81610e1a565b82525050565b61146c816113ec565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006114ae6114a96114a484611472565b611489565b61147c565b9050919050565b6114be81611493565b82525050565b600060a0820190506114d96000830188611454565b6114e66020830187611454565b6114f36040830186610d5d565b6115006060830185611463565b61150d60808301846114b5565b9695505050505050565b61152081610c77565b811461152b57600080fd5b50565b60008151905061153d81611517565b92915050565b61154c81610dfa565b811461155757600080fd5b50565b60008151905061156981611543565b92915050565b600063ffffffff82169050919050565b6115888161156f565b811461159357600080fd5b50565b6000815190506115a58161157f565b92915050565b600080600080608085870312156115c5576115c4610978565b5b60006115d38782880161152e565b94505060206115e48782880161155a565b93505060406115f587828801611596565b92505060606116068782880161152e565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006020828403121561165757611656610978565b5b60006116658482850161152e565b91505092915050565b60006020820190506116836000830184611454565b92915050565b600060608201905061169e6000830186611454565b6116ab6020830185611454565b6116b86040830184611463565b949350505050565b60006116cb82610dfa565b9050919050565b6116db816116c0565b81146116e657600080fd5b50565b6000815190506116f8816116d2565b92915050565b60006020828403121561171457611713610978565b5b6000611722848285016116e9565b9150509291505056fea2646970667358221220dcc3c337ceb3dc33dd3d55d0abf31da2f4e3c20063f921ab08e96f0873a6c54e64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634757efc11461003b578063e2b535be1461006b575b600080fd5b610055600480360381019061005091906109e7565b61009c565b6040516100629190610b86565b60405180910390f35b61008560048036038101906100809190610bfe565b610267565b604051610093929190610d6c565b60405180910390f35b606060008383905090508067ffffffffffffffff8111156100c0576100bf610d9c565b5b6040519080825280602002602001820160405280156100f357816020015b60608152602001906001900390816100de5790505b50915060005b8181101561025f5760008086868481811061011757610116610dcb565b5b905060200201602081019061012c9190610e58565b73ffffffffffffffffffffffffffffffffffffffff167f95d89b41e2f5f391a79ec54e9d87c79d6e777c63e32c28da95b4e9e4a79250ec6040516020016101739190610ec0565b60405160208183030381529060405260405161018f9190610f22565b600060405180830381855afa9150503d80600081146101ca576040519150601f19603f3d011682016040523d82523d6000602084013e6101cf565b606091505b5091509150816101ee5760405180602001604052806000815250610232565b6020815114610210578080602001905181019061020b919061102b565b610231565b806040516020016102219190610f22565b6040516020818303038152906040525b5b85848151811061024557610244610dcb565b5b6020026020010181905250505080806001019150506100f9565b505092915050565b6060600042905060008484905090508067ffffffffffffffff8111156102905761028f610d9c565b5b6040519080825280602002602001820160405280156102c957816020015b6102b6610952565b8152602001906001900390816102ae5790505b50925060005b818110156106595760008686838181106102ec576102eb610dcb565b5b90506020028101906102fe9190611079565b6103079061122c565b9050600085838151811061031e5761031d610dcb565b5b602002602001015190506000806103388460200151610662565b915091508061034a575050505061064c565b600082600a61035991906113a1565b905060008061036b8760400151610662565b9150915080610380575050505050505061064c565b60006103948860000151896040015161074e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103d757505050505050505061064c565b60008173ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190611427565b905061045d89602001518a6040015183610824565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461049d5750505050505050505061064c565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c6a5026a60e01b8c602001518d604001518a8760006040516024016105019594939291906114c4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161056b9190610f22565b6000604051808303816000865af19150503d80600081146105a8576040519150601f19603f3d011682016040523d82523d6000602084013e6105ad565b606091505b509150915081156105ed57808060200190518101906105cc91906115ab565b9091509050508a600001818152505060018a60200190151590811515815250505b60128603156106405760128611156106285760128603600a0a8a6000018181518161061b5761061a611612565b5b049150818152505061063f565b85601203600a0a8a60000181815102915081815250505b5b50505050505050505050505b80806001019150506102cf565b50509250929050565b60008060608373ffffffffffffffffffffffffffffffffffffffff167f313ce567add4d438edf58b94ff345d7d38c45b17dfc0f947988d7819dca364f96040516020016106af9190610ec0565b6040516020818303038152906040526040516106cb9190610f22565b600060405180830381855afa9150503d8060008114610706576040519150601f19603f3d011682016040523d82523d6000602084013e61070b565b606091505b50809250819350505081801561072357506000815114155b15610743578080602001905181019061073c9190611641565b9250610748565b600091505b50915091565b6000806000905060005b845181101561081c57600085828151811061077657610775610dcb565b5b6020026020010151905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016107bb919061166e565b602060405180830381865afa1580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190611641565b90508381111561080d578194508093505b50508080600101915050610758565b505092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631698ee8260e01b87878760405160240161087d93929190611689565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108e79190610f22565b600060405180830381855afa9150503d8060008114610922576040519150601f19603f3d011682016040523d82523d6000602084013e610927565b606091505b50915091508115610949578080602001905181019061094691906116fe565b92505b50509392505050565b6040518060400160405280600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109a7576109a6610982565b5b8235905067ffffffffffffffff8111156109c4576109c3610987565b5b6020830191508360208202830111156109e0576109df61098c565b5b9250929050565b600080602083850312156109fe576109fd610978565b5b600083013567ffffffffffffffff811115610a1c57610a1b61097d565b5b610a2885828601610991565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a9a578082015181840152602081019050610a7f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ac282610a60565b610acc8185610a6b565b9350610adc818560208601610a7c565b610ae581610aa6565b840191505092915050565b6000610afc8383610ab7565b905092915050565b6000602082019050919050565b6000610b1c82610a34565b610b268185610a3f565b935083602082028501610b3885610a50565b8060005b85811015610b745784840389528151610b558582610af0565b9450610b6083610b04565b925060208a01995050600181019050610b3c565b50829750879550505050505092915050565b60006020820190508181036000830152610ba08184610b11565b905092915050565b60008083601f840112610bbe57610bbd610982565b5b8235905067ffffffffffffffff811115610bdb57610bda610987565b5b602083019150836020820283011115610bf757610bf661098c565b5b9250929050565b60008060208385031215610c1557610c14610978565b5b600083013567ffffffffffffffff811115610c3357610c3261097d565b5b610c3f85828601610ba8565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610c8a81610c77565b82525050565b60008115159050919050565b610ca581610c90565b82525050565b604082016000820151610cc16000850182610c81565b506020820151610cd46020850182610c9c565b50505050565b6000610ce68383610cab565b60408301905092915050565b6000602082019050919050565b6000610d0a82610c4b565b610d148185610c56565b9350610d1f83610c67565b8060005b83811015610d50578151610d378882610cda565b9750610d4283610cf2565b925050600181019050610d23565b5085935050505092915050565b610d6681610c77565b82525050565b60006040820190508181036000830152610d868185610cff565b9050610d956020830184610d5d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2582610dfa565b9050919050565b610e3581610e1a565b8114610e4057600080fd5b50565b600081359050610e5281610e2c565b92915050565b600060208284031215610e6e57610e6d610978565b5b6000610e7c84828501610e43565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610eba81610e85565b82525050565b6000602082019050610ed56000830184610eb1565b92915050565b600081519050919050565b600081905092915050565b6000610efc82610edb565b610f068185610ee6565b9350610f16818560208601610a7c565b80840191505092915050565b6000610f2e8284610ef1565b915081905092915050565b600080fd5b610f4782610aa6565b810181811067ffffffffffffffff82111715610f6657610f65610d9c565b5b80604052505050565b6000610f7961096e565b9050610f858282610f3e565b919050565b600067ffffffffffffffff821115610fa557610fa4610d9c565b5b610fae82610aa6565b9050602081019050919050565b6000610fce610fc984610f8a565b610f6f565b905082815260208101848484011115610fea57610fe9610f39565b5b610ff5848285610a7c565b509392505050565b600082601f83011261101257611011610982565b5b8151611022848260208601610fbb565b91505092915050565b60006020828403121561104157611040610978565b5b600082015167ffffffffffffffff81111561105f5761105e61097d565b5b61106b84828501610ffd565b91505092915050565b600080fd5b60008235600160600383360303811261109557611094611074565b5b80830191505092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156110c6576110c5610d9c565b5b602082029050602081019050919050565b60006110e282610e1a565b9050919050565b6110f2816110d7565b81146110fd57600080fd5b50565b60008135905061110f816110e9565b92915050565b6000611128611123846110ab565b610f6f565b9050808382526020820190506020840283018581111561114b5761114a61098c565b5b835b8181101561117457806111608882611100565b84526020840193505060208101905061114d565b5050509392505050565b600082601f83011261119357611192610982565b5b81356111a3848260208601611115565b91505092915050565b6000606082840312156111c2576111c16110a1565b5b6111cc6060610f6f565b9050600082013567ffffffffffffffff8111156111ec576111eb6110a6565b5b6111f88482850161117e565b600083015250602061120c84828501610e43565b602083015250604061122084828501610e43565b60408301525092915050565b600061123836836111ac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156112c5578086048111156112a1576112a061123f565b5b60018516156112b05780820291505b80810290506112be8561126e565b9450611285565b94509492505050565b6000826112de576001905061139a565b816112ec576000905061139a565b8160018114611302576002811461130c5761133b565b600191505061139a565b60ff84111561131e5761131d61123f565b5b8360020a9150848211156113355761133461123f565b5b5061139a565b5060208310610133831016604e8410600b84101617156113705782820a90508381111561136b5761136a61123f565b5b61139a565b61137d848484600161127b565b925090508184048111156113945761139361123f565b5b81810290505b9392505050565b60006113ac82610c77565b91506113b783610c77565b92506113e47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846112ce565b905092915050565b600062ffffff82169050919050565b611404816113ec565b811461140f57600080fd5b50565b600081519050611421816113fb565b92915050565b60006020828403121561143d5761143c610978565b5b600061144b84828501611412565b91505092915050565b61145d81610e1a565b82525050565b61146c816113ec565b82525050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006114ae6114a96114a484611472565b611489565b61147c565b9050919050565b6114be81611493565b82525050565b600060a0820190506114d96000830188611454565b6114e66020830187611454565b6114f36040830186610d5d565b6115006060830185611463565b61150d60808301846114b5565b9695505050505050565b61152081610c77565b811461152b57600080fd5b50565b60008151905061153d81611517565b92915050565b61154c81610dfa565b811461155757600080fd5b50565b60008151905061156981611543565b92915050565b600063ffffffff82169050919050565b6115888161156f565b811461159357600080fd5b50565b6000815190506115a58161157f565b92915050565b600080600080608085870312156115c5576115c4610978565b5b60006115d38782880161152e565b94505060206115e48782880161155a565b93505060406115f587828801611596565b92505060606116068782880161152e565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006020828403121561165757611656610978565b5b60006116658482850161152e565b91505092915050565b60006020820190506116836000830184611454565b92915050565b600060608201905061169e6000830186611454565b6116ab6020830185611454565b6116b86040830184611463565b949350505050565b60006116cb82610dfa565b9050919050565b6116db816116c0565b81146116e657600080fd5b50565b6000815190506116f8816116d2565b92915050565b60006020828403121561171457611713610978565b5b6000611722848285016116e9565b9150509291505056fea2646970667358221220dcc3c337ceb3dc33dd3d55d0abf31da2f4e3c20063f921ab08e96f0873a6c54e64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrices((address[],address,address)[])": {
        "details": "this method will return estimations for swap for one base token it can not be view, but to get estimation you have to call it in a static way Tokens that do not have `.decimals()` are not supported",
        "params": {
          "_data": "array of PriceData, each PriceData can accept multiple pools per one price, price is fetched from pool, that has biggest liquidity (quote.balanceOf(pool)) TODO balanceOf might be not liquidity and by sending token to pool we can in theory affect this fetcher"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}