{
  "language": "Solidity",
  "sources": {
    "contracts/StakingBankState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IStakingBank.sol\";\nimport \"./extensions/Registrable.sol\";\nimport \"./Registry.sol\";\n\ncontract StakingBankState is IStakingBank, Registrable, Ownable {\n    uint256 public totalSupply;\n\n    /// validator address => validator balance\n    mapping(address => uint256) public balances;\n\n    /// list of all validators wallets\n    address[] public addresses;\n\n    event ValidatorBalanceUpdate(address indexed validator, uint256 balance);\n    event TotalSupply(uint256 total);\n\n    error ArrayLengthError();\n    error InvalidTotalSupply();\n    error NoChangeToState();\n    error NotSupported();\n\n    constructor(IRegistry _contractRegistry) Registrable(_contractRegistry) {\n        // no additional configuration needed\n    }\n\n    /// @inheritdoc Registrable\n    function register() external override {\n        // there are no requirements atm\n    }\n\n    /// @inheritdoc Registrable\n    function unregister() external override {\n        // there are no requirements atm\n    }\n\n    /// @notice use it to clone validators balances from master chain\n    /// @param _totalSupply cloned value from master chain, it can be 0\n    function setTotalSupply(uint256 _totalSupply) external onlyOwner {\n        if (totalSupply == _totalSupply) revert NoChangeToState();\n\n        _setTotalSupply(_totalSupply);\n    }\n\n    /// @notice use it to clone validators balances from master chain\n    /// @param _validators array of validator addresses that needs to be updated\n    /// @param _balances array of validator _balances that will be set (can be 0s)\n    /// @param _totalSupply cloned value of total staked amount from master chain, it can be 0\n    function setBalances(address[] calldata _validators, uint256[] calldata _balances, uint256 _totalSupply)\n        external\n        onlyOwner\n    {\n        if (_validators.length != _balances.length) revert ArrayLengthError();\n\n        for (uint256 i; i < _validators.length;) {\n            uint256 currentBalance = balances[_validators[i]];\n\n            // if balance that we want to set for validator is 0, means we want to remove validator\n            if (_balances[i] == 0) {\n                // if current balance is 0, validator address is already removed\n                if (currentBalance != 0) {\n                    _removeAddress(_validators[i]);\n                }\n            } else if (currentBalance == 0) {\n                // if we setting up balance > 0 and current balance is 0, then this is new validator\n                // so we have to add address\n                addresses.push(_validators[i]);\n            }\n\n            balances[_validators[i]] = _balances[i];\n            emit ValidatorBalanceUpdate(_validators[i], _balances[i]);\n\n            unchecked {\n                // we will not have enough data to overflow\n                i++;\n            }\n        }\n\n        if (_calculateTotalBalance() > _totalSupply) revert InvalidTotalSupply();\n\n        if (totalSupply != _totalSupply) {\n            _setTotalSupply(_totalSupply);\n        }\n    }\n\n    function getNumberOfValidators() external view returns (uint256) {\n        return addresses.length;\n    }\n\n    function getAddresses() external view returns (address[] memory) {\n        return addresses;\n    }\n\n    function getBalances() external view returns (uint256[] memory allBalances) {\n        uint256 count = addresses.length;\n        allBalances = new uint256[](count);\n\n        for (uint256 i = 0; i < count;) {\n            allBalances[i] = balances[addresses[i]];\n\n            unchecked {\n                // we will not have enough data to overflow\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address _account) external view returns (uint256) {\n        return balances[_account];\n    }\n\n    function transfer(address, uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function stake(uint256) external pure {\n        revert NotSupported();\n    }\n\n    function withdraw(uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function exit() external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function create(address, string calldata) external pure {\n        revert NotSupported();\n    }\n\n    function update(address, string calldata) external pure {\n        revert NotSupported();\n    }\n\n    function remove(address) external pure {\n        revert NotSupported();\n    }\n\n    function validators(address) external pure returns (address, string memory) {\n        revert NotSupported();\n    }\n\n    function setMinAmountForStake(uint256) external pure {\n        revert NotSupported();\n    }\n\n    function approve(address, uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function receiveApproval(address) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function receiveApproval(address, uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function transferFrom(address, address, uint256) public pure virtual override returns (bool) {\n        revert NotSupported();\n    }\n\n    function allowance(address, address) external pure returns (uint256) {\n        revert NotSupported();\n    }\n\n    /// @inheritdoc Registrable\n    function getName() external pure override returns (bytes32) {\n        return \"StakingBank\";\n    }\n\n    function _setTotalSupply(uint256 _totalSupply) private {\n        totalSupply = _totalSupply;\n        emit TotalSupply(_totalSupply);\n    }\n\n    function _removeAddress(address _address) internal {\n        uint256 count = addresses.length;\n\n        for (uint256 i = 0; i < count;) {\n            if (addresses[i] == _address) {\n                addresses[i] = addresses[count - 1];\n                addresses.pop();\n                return;\n            }\n\n            unchecked {\n                // we will not have enough data to overflow\n                i++;\n            }\n        }\n    }\n\n    function _calculateTotalBalance() internal returns (uint256 total) {\n        uint256 count = addresses.length;\n\n        for (uint256 i = 0; i < count;) {\n            total += balances[addresses[i]];\n\n            unchecked {\n                // we will not have enough data to overflow\n                i++;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IStakingBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingBank is IERC20 {\n    /// @param id address of validator wallet\n    /// @param location URL of the validator API\n    struct Validator {\n        address id;\n        string location;\n    }\n\n    event LogValidatorRegistered(address indexed id);\n    event LogValidatorUpdated(address indexed id);\n    event LogValidatorRemoved(address indexed id);\n    event LogMinAmountForStake(uint256 minAmountForStake);\n\n    /// @dev setter for `minAmountForStake`\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\n\n    /// @dev allows to stake `token` by validators\n    /// Validator needs to approve StakingBank beforehand\n    /// @param _value amount of tokens to stake\n    function stake(uint256 _value) external;\n\n    /// @dev notification about approval from `_from` address on UMB token\n    /// Staking bank will stake max approved amount from `_from` address\n    /// @param _from address which approved token spend for IStakingBank\n    function receiveApproval(address _from) external returns (bool success);\n\n    /// @dev withdraws stake tokens\n    /// it throws, when balance will be less than required minimum for stake\n    /// to withdraw all use `exit`\n    function withdraw(uint256 _value) external returns (bool success);\n\n    /// @dev unstake and withdraw all tokens\n    function exit() external returns (bool success);\n\n    /// @dev creates (register) new validator\n    /// @param _id validator address\n    /// @param _location location URL of the validator API\n    function create(address _id, string calldata _location) external;\n\n    /// @dev removes validator\n    /// @param _id validator wallet\n    function remove(address _id) external;\n\n    /// @dev updates validator location\n    /// @param _id validator wallet\n    /// @param _location new validator URL\n    function update(address _id, string calldata _location) external;\n\n    /// @return total number of registered validators (with and without balance)\n    function getNumberOfValidators() external view returns (uint256);\n\n    /// @dev gets validator address for provided index\n    /// @param _ix index in array of list of all validators wallets\n    function addresses(uint256 _ix) external view returns (address);\n\n    /// @param _id address of validator\n    /// @return id address of validator\n    /// @return location URL of validator\n    function validators(address _id) external view returns (address id, string memory location);\n}\n"
    },
    "contracts/extensions/Registrable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/IRegistry.sol\";\nimport \"../interfaces/IStakingBank.sol\";\n\n/// @dev Any contract that we want to register in ContractRegistry, must inherit from Registrable\nabstract contract Registrable {\n    IRegistry public immutable contractRegistry;\n\n    modifier onlyFromContract(address _msgSender, bytes32 _contractName) {\n        require(\n            contractRegistry.getAddress(_contractName) == _msgSender,\n            string(abi.encodePacked(\"caller is not \", _contractName))\n        );\n        _;\n    }\n\n    modifier withRegistrySetUp() {\n        require(address(contractRegistry) != address(0x0), \"_registry is empty\");\n        _;\n    }\n\n    constructor(IRegistry _contractRegistry) {\n        require(address(_contractRegistry) != address(0x0), \"_registry is empty\");\n        contractRegistry = _contractRegistry;\n    }\n\n    /// @dev this method will be called as a first method in registration process when old contract will be replaced\n    /// when called, old contract address is still in registry\n    function register() virtual external;\n\n    /// @dev this method will be called as a last method in registration process when old contract will be replaced\n    /// when called, new contract address is already in registry\n    function unregister() virtual external;\n\n    /// @return contract name as bytes32\n    function getName() virtual external pure returns (bytes32);\n\n    /// @dev helper method for fetching StakingBank address\n    function stakingBankContract() public view returns (IStakingBank) {\n        return IStakingBank(contractRegistry.requireAndGetAddress(\"StakingBank\"));\n    }\n\n    /// @dev helper method for fetching UMB address\n    function tokenContract() public view withRegistrySetUp returns (ERC20) {\n        return ERC20(contractRegistry.requireAndGetAddress(\"UMB\"));\n    }\n}\n"
    },
    "contracts/Registry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n// Inheritance\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./extensions/Registrable.sol\";\nimport \"./interfaces/IRegistry.sol\";\n\n/// @dev contracts registry\n/// protocol uses this registry to fetch current contract addresses\ncontract Registry is IRegistry, Ownable {\n    /// name => contract address\n    mapping(bytes32 => address) public registry;\n\n\n    error NameNotRegistered();\n    error ArraysDataDoNotMatch();\n\n    /// @inheritdoc IRegistry\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external onlyOwner {\n        if (_names.length != _destinations.length) revert ArraysDataDoNotMatch();\n\n        for (uint i = 0; i < _names.length;) {\n            registry[_names[i]] = _destinations[i];\n            emit LogRegistered(_destinations[i], _names[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc IRegistry\n    function importContracts(address[] calldata _destinations) external onlyOwner {\n        for (uint i = 0; i < _destinations.length;) {\n            bytes32 name = Registrable(_destinations[i]).getName();\n            registry[name] = _destinations[i];\n            emit LogRegistered(_destinations[i], name);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc IRegistry\n    function atomicUpdate(address _newContract) external onlyOwner {\n        Registrable(_newContract).register();\n\n        bytes32 name = Registrable(_newContract).getName();\n        address oldContract = registry[name];\n        registry[name] = _newContract;\n\n        Registrable(oldContract).unregister();\n\n        emit LogRegistered(_newContract, name);\n    }\n\n    /// @inheritdoc IRegistry\n    function requireAndGetAddress(bytes32 name) external view returns (address) {\n        address _foundAddress = registry[name];\n        if (_foundAddress == address(0)) revert NameNotRegistered();\n\n        return _foundAddress;\n    }\n\n    /// @inheritdoc IRegistry\n    function getAddress(bytes32 _bytes) external view returns (address) {\n        return registry[_bytes];\n    }\n\n    /// @inheritdoc IRegistry\n    function getAddressByString(string memory _name) public view returns (address) {\n        return registry[stringToBytes32(_name)];\n    }\n\n    /// @inheritdoc IRegistry\n    function stringToBytes32(string memory _string) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(_string);\n\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            result := mload(add(_string, 32))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n\ninterface IRegistry {\n    event LogRegistered(address indexed destination, bytes32 name);\n\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\n    /// This method can be used for contracts that for some reason do not have `getName` method\n    /// @param  _names array of contract names that we want to register\n    /// @param  _destinations array of contract addresses\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\n\n    /// @dev imports new contracts and override old addresses, if they exist.\n    /// Names of contracts are fetched directly from each contract by calling `getName`\n    /// @param  _destinations array of contract addresses\n    function importContracts(address[] calldata _destinations) external;\n\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\n    /// @param _newContract address of contract that will replace old one\n    function atomicUpdate(address _newContract) external;\n\n    /// @dev similar to `getAddress` but throws when contract name not exists\n    /// @param name contract name\n    /// @return contract address registered under provided name or throws, if does not exists\n    function requireAndGetAddress(bytes32 name) external view returns (address);\n\n    /// @param name contract name in a form of bytes32\n    /// @return contract address registered under provided name\n    function getAddress(bytes32 name) external view returns (address);\n\n    /// @param _name contract name\n    /// @return contract address assigned to the name or address(0) if not exists\n    function getAddressByString(string memory _name) external view returns (address);\n\n    /// @dev helper method that converts string to bytes32,\n    /// you can use to to generate contract name\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}