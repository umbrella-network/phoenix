{
  "address": "0x03E83Ced03c81FBc04B625fA81A1C4f028731A0d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_padding",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_requiredSignatures",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_allowForMixedType",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyDeprecated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArraysDataDoNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlockSubmittedToFast",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractNotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataToOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FCDOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidContractType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoChangeToState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwnerOrRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignaturesOutOfOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnregisterFirst",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deprecator",
          "type": "address"
        }
      ],
      "name": "LogDeprecation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "staked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        }
      ],
      "name": "LogMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timePadding",
          "type": "uint32"
        }
      ],
      "name": "LogPadding",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "blockId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "LogVoter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_PREFIX",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockId",
          "type": "uint256"
        }
      ],
      "name": "blocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "dataTimestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct BaseChain.Block",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksCountOffset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_items",
          "type": "uint256"
        }
      ],
      "name": "bytesToBytes32Array",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fcds",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "value",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "dataTimestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getBlockIdAtTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_blockId",
          "type": "uint32"
        }
      ],
      "name": "getBlockRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_blockId",
          "type": "uint32"
        }
      ],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConsensusData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blocksCountOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sequence",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "padding",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "deprecated",
              "type": "bool"
            }
          ],
          "internalType": "struct BaseChain.ConsensusData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentIntValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        }
      ],
      "name": "getCurrentValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "timestamps",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestBlockId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLeaderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getLeaderAddressAtTime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getLeaderIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextLeaderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "timePadding",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lastDataTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lastId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "nextLeader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nextBlockId",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "powers",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "locations",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "staked",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "minSignatures",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        }
      ],
      "name": "hashLeaf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isForeign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_affidavit",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredSignatures",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_padding",
          "type": "uint16"
        }
      ],
      "name": "setPadding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingBank",
      "outputs": [
        {
          "internalType": "contract IStakingBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingBankContract",
      "outputs": [
        {
          "internalType": "contract IStakingBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dataTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_s",
          "type": "bytes32[]"
        }
      ],
      "name": "submit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContract",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_leaf",
          "type": "bytes32"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        }
      ],
      "name": "verifyProofForBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_blockIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes",
          "name": "_proofs",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_proofItemsCounter",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_leaves",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyProofs",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "results",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd10e233d6b038a7bd5f5f333bbeea8f29c67a4f3c7a5a34d70e0b0b7100e26c8",
  "receipt": {
    "to": null,
    "from": "0x66f13FDceed822E74b6a1e08e082Fa699fF36454",
    "contractAddress": "0x03E83Ced03c81FBc04B625fA81A1C4f028731A0d",
    "transactionIndex": 9,
    "gasUsed": "4846396",
    "logsBloom": "0x
    "blockHash": "0x02efc2c77ae8e84e7f388c9da0b8edec62be17f9662871862455c1c8040796d8",
    "transactionHash": "0xd10e233d6b038a7bd5f5f333bbeea8f29c67a4f3c7a5a34d70e0b0b7100e26c8",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 21853731,
        "transactionHash": "0xd10e233d6b038a7bd5f5f333bbeea8f29c67a4f3c7a5a34d70e0b0b7100e26c8",
        "address": "0x03E83Ced03c81FBc04B625fA81A1C4f028731A0d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000066f13fdceed822e74b6a1e08e082fa699ff36454"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x02efc2c77ae8e84e7f388c9da0b8edec62be17f9662871862455c1c8040796d8"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 21853731,
        "transactionHash": "0xd10e233d6b038a7bd5f5f333bbeea8f29c67a4f3c7a5a34d70e0b0b7100e26c8",
        "address": "0x03E83Ced03c81FBc04B625fA81A1C4f028731A0d",
        "topics": [
          "0x02ff77a0f68d11f7efb906f331b2dda82916de8ba9c37dda2a95817936a530ec",
          "0x00000000000000000000000066f13fdceed822e74b6a1e08e082fa699ff36454"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000003c",
        "logIndex": 8,
        "blockHash": "0x02efc2c77ae8e84e7f388c9da0b8edec62be17f9662871862455c1c8040796d8"
      }
    ],
    "blockNumber": 21853731,
    "cumulativeGasUsed": "5438652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8f98d3B5C911206C1Ac08B9938875620A03BCd59",
    60,
    1,
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "8e97b2dcbd3a84faf3c3b8906eaf9cc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_padding\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_requiredSignatures\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_allowForMixedType\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyDeprecated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraysDataDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockSubmittedToFast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataToOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FCDOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoChangeToState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerOrRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisterFirst\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deprecator\",\"type\":\"address\"}],\"name\":\"LogDeprecation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timePadding\",\"type\":\"uint32\"}],\"name\":\"LogPadding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"LogVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_PREFIX\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockId\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"dataTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct BaseChain.Block\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksCountOffset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_items\",\"type\":\"uint256\"}],\"name\":\"bytesToBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fcds\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"value\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"dataTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBlockIdAtTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockId\",\"type\":\"uint32\"}],\"name\":\"getBlockRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockId\",\"type\":\"uint32\"}],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConsensusData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blocksCountOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sequence\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"padding\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"}],\"internalType\":\"struct BaseChain.ConsensusData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getCurrentIntValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"getCurrentValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"timestamps\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestBlockId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getLeaderAddressAtTime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getLeaderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextLeaderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timePadding\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastDataTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nextLeader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nextBlockId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"locations\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minSignatures\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"hashLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isForeign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affidavit\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_padding\",\"type\":\"uint16\"}],\"name\":\"setPadding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBank\",\"outputs\":[{\"internalType\":\"contract IStakingBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBankContract\",\"outputs\":[{\"internalType\":\"contract IStakingBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dataTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"verifyProofForBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_blockIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"_proofs\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_proofItemsCounter\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_leaves\",\"type\":\"bytes32[]\"}],\"name\":\"verifyProofs\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blocks(uint256)\":{\"params\":{\"_blockId\":\"ID of submitted block\"},\"returns\":{\"_0\":\"block data (root + timestamp)\"}},\"blocksCount()\":{\"details\":\"number of blocks (consensus rounds) saved in this contract\"},\"bytesToBytes32Array(bytes,uint256,uint256)\":{\"details\":\"this is helper method, that extracts one merkle proof from many hashed provided as bytes\",\"params\":{\"_data\":\"many hashes as bytes\",\"_items\":\"how many hashes to extract\",\"_offset\":\"this is starting point for extraction\"},\"returns\":{\"_0\":\"merkle proof (array of bytes32 hashes)\"}},\"constructor\":{\"params\":{\"_allowForMixedType\":\"we have two \\\"types\\\" of Chain: HomeChain and ForeignChain, when we redeploying we don't want to mix up them, so we checking, if new Chain has the same type as current one. However, when we will be switching from one homechain to another one, we have to allow for this mixing up. This flag will tell contract, if this is the case.\",\"_contractRegistry\":\"Registry address\",\"_padding\":\"required \\\"space\\\" between blocks in seconds\",\"_requiredSignatures\":\"number of required signatures for accepting consensus submission\"}},\"getBlockId()\":{\"returns\":{\"_0\":\"current block ID please note, that current ID is not the same as last ID, current means that once padding pass, ID will switch to next one and it will be pointing to empty submit until submit for that ID is done\"}},\"getBlockIdAtTimestamp(uint256)\":{\"details\":\"calculates block ID for provided timestamp this function does not works for past timestamps\",\"params\":{\"_timestamp\":\"current or future timestamp\"},\"returns\":{\"_0\":\"block ID for provided timestamp\"}},\"getBlockRoot(uint32)\":{\"params\":{\"_blockId\":\"consensus ID\"},\"returns\":{\"_0\":\"root for provided consensus ID\"}},\"getBlockTimestamp(uint32)\":{\"params\":{\"_blockId\":\"consensus ID\"},\"returns\":{\"_0\":\"timestamp for provided consensus ID\"}},\"getConsensusData()\":{\"details\":\"getter for `_consensusData`\"},\"getCurrentIntValue(bytes32)\":{\"details\":\"getter for single FCD value in case its type is `int`\",\"params\":{\"_key\":\"FCD key\"},\"returns\":{\"timestamp\":\"FCD timestamp\",\"value\":\"FCD value\"}},\"getCurrentValue(bytes32)\":{\"details\":\"getter for single FCD value\",\"params\":{\"_key\":\"FCD key\"},\"returns\":{\"timestamp\":\"FCD timestamp\",\"value\":\"FCD value\"}},\"getCurrentValues(bytes32[])\":{\"details\":\"batch getter for FCDs\",\"params\":{\"_keys\":\"FCDs keys to fetch\"},\"returns\":{\"timestamps\":\"array of FCDs timestamps\",\"values\":\"array of FCDs values\"}},\"getLatestBlockId()\":{\"returns\":{\"_0\":\"last submitted block ID, please note, that on deployment, when there is no submission for this contract block for last ID will be available in previous contract\"}},\"getLeaderAddress()\":{\"returns\":{\"_0\":\"address of current leader\"}},\"getLeaderAddressAtTime(uint256)\":{\"params\":{\"_timestamp\":\"timestamp for which you want to calculate leader address\"},\"returns\":{\"_0\":\"leader address for provider timestamp\"}},\"getLeaderIndex(uint256,uint256)\":{\"params\":{\"_numberOfValidators\":\"total number of validators\",\"_timestamp\":\"timestamp for which you want to calculate index\"},\"returns\":{\"_0\":\"leader index, use it for StakingBank.addresses[index] to fetch leader address\"}},\"getName()\":{\"returns\":{\"_0\":\"contract name as bytes32\"}},\"getNextLeaderAddress()\":{\"returns\":{\"_0\":\"address of leader for next second\"}},\"getStatus()\":{\"details\":\"helper method that returns all important data about current state of contract\",\"returns\":{\"blockNumber\":\"`block.number`\",\"lastDataTimestamp\":\"timestamp for last submitted consensus\",\"lastId\":\"ID of last submitted consensus\",\"locations\":\"array of all validators locations\",\"minSignatures\":\"`this.requiredSignatures`\",\"nextBlockId\":\"block ID for `block.timestamp + padding`\",\"nextLeader\":\"leader for `block.timestamp + 1`\",\"powers\":\"array of all validators powers\",\"staked\":\"total UMB staked by validators\",\"timePadding\":\"`this.padding`\",\"validators\":\"array of all validators addresses\"}},\"hashLeaf(bytes,bytes)\":{\"details\":\"creates leaf hash, that has is used in merkle tree\",\"params\":{\"_key\":\"key under which we store the value\",\"_value\":\"value itself as bytes\"},\"returns\":{\"_0\":\"leaf hash\"}},\"isForeign()\":{\"returns\":{\"_0\":\"TRUE if contract is ForeignChain, FALSE otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverSigner(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_affidavit\":\"root and FCDs hashed together\",\"_r\":\"part of signature\",\"_s\":\"part of signature\",\"_v\":\"part of signature\"},\"returns\":{\"_0\":\"signer address\"}},\"register()\":{\"details\":\"this method will be called as a first method in registration process when old contract will be replaced when called, old contract address is still in registry\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPadding(uint16)\":{\"details\":\"setter for `padding`\"},\"stakingBankContract()\":{\"details\":\"helper method for fetching StakingBank address\"},\"submit(uint32,bytes32,bytes32[],uint256[],uint8[],bytes32[],bytes32[])\":{\"details\":\"method for submitting consensus data\",\"params\":{\"_dataTimestamp\":\"consensus timestamp, this is time for all data in merkle tree including FCDs\",\"_keys\":\"FCDs keys\",\"_r\":\"array of `r` part of validators signatures\",\"_root\":\"merkle root\",\"_s\":\"array of `s` part of validators signatures\",\"_v\":\"array of `v` part of validators signatures\",\"_values\":\"FCDs values\"}},\"tokenContract()\":{\"details\":\"helper method for fetching UMB address\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregister()\":{\"details\":\"this method will be called as a last method in registration process when old contract will be replaced when called, new contract address is already in registry\"},\"verifyProof(bytes32[],bytes32,bytes32)\":{\"details\":\"verifies if the leaf is valid leaf for merkle tree\",\"params\":{\"_leaf\":\"leaf hash\",\"_proof\":\"merkle proof for merkle tree\",\"_root\":\"merkle root\"},\"returns\":{\"_0\":\"TRUE if `_leaf` is valid, FALSE otherwise\"}},\"verifyProofForBlock(uint256,bytes32[],bytes,bytes)\":{\"details\":\"verifies, if provided key-value pair was part of consensus\",\"params\":{\"_blockId\":\"consensus ID for which we doing a check\",\"_key\":\"pair key\",\"_proof\":\"merkle proof for pair\",\"_value\":\"pair value\"},\"returns\":{\"_0\":\"TRUE if key-value par was part of consensus, FALSE otherwise\"}},\"verifyProofs(uint32[],bytes,uint256[],bytes32[])\":{\"details\":\"batch method for data verification\",\"params\":{\"_blockIds\":\"consensus IDs for which we doing a checks\",\"_leaves\":\"array of merkle leaves\",\"_proofItemsCounter\":\"array of counters, each counter tells how many hashes proof for each leaf has\",\"_proofs\":\"merkle proofs for all pair, sequence of hashes provided as bytes\"},\"returns\":{\"results\":\"array of verification results, TRUE if leaf is part of consensus, FALSE otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deprecate()\":{\"notice\":\"it allows to deprecate contract manually Only new Registry calls `unregister()` where we set deprecated to true In old Registries we don't have this feature, so in order to safely redeploy new Chain we will have to first deprecate current contract manually, then register new contract\"},\"register()\":{\"notice\":\"if this method needs to be called manually (not from Registry) it is important to do it as part of tx batch eg using multisig, we should prepare set of transactions and confirm them all at once\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chain.sol\":\"Chain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@umb-network/toolbox/dist/contracts/lib/ValueDecoder.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicensed\\npragma solidity >=0.6.8;\\n\\nlibrary ValueDecoder {\\n  function toUint(bytes memory _bytes) internal pure returns (uint256 value) {\\n    assembly {\\n      value := mload(add(_bytes, 32))\\n    }\\n  }\\n\\n  function toUint(bytes32 _bytes) internal pure returns (uint256 value) {\\n    assembly {\\n      value := _bytes\\n    }\\n  }\\n\\n  function toInt(uint224 u) internal pure returns (int256) {\\n    int224 i;\\n    uint224 max = type(uint224).max;\\n\\n    if (u <= (max - 1) / 2) { // positive values\\n      assembly {\\n        i := add(u, 0)\\n      }\\n\\n      return i;\\n    } else { // negative values\\n      assembly {\\n        i := sub(sub(u, max), 1)\\n      }\\n    }\\n\\n    return i;\\n  }\\n}\\n\\n\",\"keccak256\":\"0x4c27669880111dd724930e6e2cb0baefdb3a8b7b2d6ffc0ec5c5534bc678a852\",\"license\":\"Unlicensed\"},\"contracts/BaseChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@umb-network/toolbox/dist/contracts/lib/ValueDecoder.sol\\\";\\n\\nimport \\\"./interfaces/IBaseChainV1.sol\\\";\\nimport \\\"./interfaces/IStakingBank.sol\\\";\\nimport \\\"./extensions/Registrable.sol\\\";\\nimport \\\"./Registry.sol\\\";\\n\\nabstract contract BaseChain is Registrable, Ownable {\\n    using ValueDecoder for bytes;\\n    using ValueDecoder for uint224;\\n    using MerkleProof for bytes32[];\\n\\n    /// @param root merkle root for consensus\\n    /// @param dataTimestamp consensus timestamp\\n    struct Block {\\n        bytes32 root;\\n        uint32 dataTimestamp;\\n    }\\n\\n    /// @param value FCD value\\n    /// @param dataTimestamp FCD timestamp\\n    struct FirstClassData {\\n        uint224 value;\\n        uint32 dataTimestamp;\\n    }\\n\\n    /// @param blocksCountOffset number of all blocks that were generated before switching to this contract\\n    /// @param sequence is a total number of blocks (consensus rounds) including previous contracts\\n    /// @param lastTimestamp is a timestamp of last submitted block\\n    /// @param padding number of seconds that need to pass before new submit will be possible\\n    /// @param deprecated flag that changes to TRUE on `unregister`, when TRUE submissions are not longer available\\n    struct ConsensusData {\\n        uint32 blocksCountOffset;\\n        uint32 sequence;\\n        uint32 lastTimestamp;\\n        uint32 padding;\\n        bool deprecated;\\n    }\\n\\n    uint256 constant public VERSION = 2;\\n\\n    bool internal immutable _ALLOW_FOR_MIXED_TYPE; // solhint-disable-line var-name-mixedcase\\n\\n    bytes4 constant private _VERSION_SELECTOR = bytes4(keccak256(\\\"VERSION()\\\"));\\n\\n    /// @dev minimal number of signatures required for accepting submission (PoA)\\n    uint16 internal immutable _REQUIRED_SIGNATURES; // solhint-disable-line var-name-mixedcase\\n\\n    ConsensusData internal _consensusData;\\n\\n    bytes constant public ETH_PREFIX = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n\\n    /// @dev block id (consensus ID) => root\\n    /// consensus ID is at the same time consensus timestamp\\n    mapping(uint256 => bytes32) public roots;\\n\\n    /// @dev FCD key => FCD data\\n    mapping(bytes32 => FirstClassData) public fcds;\\n\\n    event LogDeprecation(address indexed deprecator);\\n    event LogPadding(address indexed executor, uint32 timePadding);\\n\\n    error ArraysDataDoNotMatch();\\n    error AlreadyDeprecated();\\n    error AlreadyRegistered();\\n    error BlockSubmittedToFast();\\n    error ContractNotReady();\\n    error DataToOld();\\n    error FCDOverflow();\\n    error InvalidContractType();\\n    error NoChangeToState();\\n    error OnlyOwnerOrRegistry();\\n    error UnregisterFirst();\\n\\n    modifier onlyOwnerOrRegistry () {\\n        if (msg.sender != address(contractRegistry) && msg.sender != owner()) revert OnlyOwnerOrRegistry();\\n        _;\\n    }\\n\\n    /// @param _contractRegistry Registry address\\n    /// @param _padding required \\\"space\\\" between blocks in seconds\\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\\n    constructor(\\n        IRegistry _contractRegistry,\\n        uint32 _padding,\\n        uint16 _requiredSignatures,\\n        bool _allowForMixedType\\n    ) Registrable(_contractRegistry) {\\n        _ALLOW_FOR_MIXED_TYPE = _allowForMixedType;\\n        _REQUIRED_SIGNATURES = _requiredSignatures;\\n\\n        _setPadding(_padding);\\n\\n        BaseChain oldChain = BaseChain(_contractRegistry.getAddress(\\\"Chain\\\"));\\n\\n        if (address(oldChain) == address(0)) {\\n            // if this is first contract in sidechain, then we need to initialise lastTimestamp so submission\\n            // can be possible\\n            _consensusData.lastTimestamp = uint32(block.timestamp) - _padding - 1;\\n        }\\n    }\\n\\n    /// @dev setter for `padding`\\n    function setPadding(uint16 _padding) external {\\n        _setPadding(_padding);\\n    }\\n\\n    /// @notice if this method needs to be called manually (not from Registry)\\n    /// it is important to do it as part of tx batch\\n    /// eg using multisig, we should prepare set of transactions and confirm them all at once\\n    /// @inheritdoc Registrable\\n    function register() external override onlyOwnerOrRegistry {\\n        address oldChain = contractRegistry.getAddress(\\\"Chain\\\");\\n\\n        // registration must be done before address in registry is replaced\\n        if (oldChain == address(this)) revert AlreadyRegistered();\\n\\n        if (oldChain == address(0x0)) {\\n            return;\\n        }\\n\\n        _cloneLastDataFromPrevChain(oldChain);\\n    }\\n\\n    /// @inheritdoc Registrable\\n    function unregister() external override onlyOwnerOrRegistry {\\n        // in case we deprecated contract manually, we simply return\\n        if (_consensusData.deprecated) return;\\n\\n        address newChain = contractRegistry.getAddress(\\\"Chain\\\");\\n        // unregistering must be done after address in registry is replaced\\n        if (newChain == address(this)) revert UnregisterFirst();\\n\\n        // TODO:\\n        // I think we need to remove restriction for type (at least once)\\n        // when we will switch to multichain architecture\\n\\n        if (!_ALLOW_FOR_MIXED_TYPE) {\\n            // can not be replaced with chain of different type\\n            if (BaseChain(newChain).isForeign() != this.isForeign()) revert InvalidContractType();\\n        }\\n\\n        _consensusData.deprecated = true;\\n        emit LogDeprecation(msg.sender);\\n    }\\n\\n    /// @notice it allows to deprecate contract manually\\n    /// Only new Registry calls `unregister()` where we set deprecated to true\\n    /// In old Registries we don't have this feature, so in order to safely redeploy new Chain\\n    /// we will have to first deprecate current contract manually, then register new contract\\n    function deprecate() external onlyOwnerOrRegistry {\\n        if (_consensusData.deprecated) revert AlreadyDeprecated();\\n\\n        _consensusData.deprecated = true;\\n        emit LogDeprecation(msg.sender);\\n    }\\n\\n    /// @dev getter for `_consensusData`\\n    function getConsensusData() external view returns (ConsensusData memory) {\\n        return _consensusData;\\n    }\\n\\n    /// @dev number of blocks (consensus rounds) saved in this contract\\n    function blocksCount() external view returns (uint256) {\\n        return _consensusData.sequence - _consensusData.blocksCountOffset;\\n    }\\n\\n    function blocksCountOffset() external view returns (uint32) {\\n        return _consensusData.blocksCountOffset;\\n    }\\n\\n    function lastBlockId() external view returns (uint256) {\\n        return _consensusData.lastTimestamp;\\n    }\\n\\n    /// @return TRUE if contract is ForeignChain, FALSE otherwise\\n    function isForeign() external pure virtual returns (bool);\\n\\n    /// @inheritdoc Registrable\\n    function getName() external pure override returns (bytes32) {\\n        return \\\"Chain\\\";\\n    }\\n\\n    /// @param _affidavit root and FCDs hashed together\\n    /// @param _v part of signature\\n    /// @param _r part of signature\\n    /// @param _s part of signature\\n    /// @return signer address\\n    function recoverSigner(bytes32 _affidavit, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(ETH_PREFIX, _affidavit));\\n        return ecrecover(hash, _v, _r, _s);\\n    }\\n\\n    /// @param _blockId ID of submitted block\\n    /// @return block data (root + timestamp)\\n    function blocks(uint256 _blockId) external view returns (Block memory) {\\n        return Block(roots[_blockId], uint32(_blockId));\\n    }\\n\\n    /// @return current block ID\\n    /// please note, that current ID is not the same as last ID, current means that once padding pass,\\n    /// ID will switch to next one and it will be pointing to empty submit until submit for that ID is done\\n    function getBlockId() external view returns (uint32) {\\n        if (_consensusData.lastTimestamp == 0) return 0;\\n\\n        return getBlockIdAtTimestamp(block.timestamp);\\n    }\\n\\n    function requiredSignatures() external view returns (uint16) {\\n        return _REQUIRED_SIGNATURES;\\n    }\\n\\n    /// @dev calculates block ID for provided timestamp\\n    /// this function does not works for past timestamps\\n    /// @param _timestamp current or future timestamp\\n    /// @return block ID for provided timestamp\\n    function getBlockIdAtTimestamp(uint256 _timestamp) virtual public view returns (uint32) {\\n        ConsensusData memory data = _consensusData;\\n\\n        unchecked {\\n            // we can't overflow because we adding two `uint32`\\n            if (data.lastTimestamp + data.padding < _timestamp) {\\n                return uint32(_timestamp);\\n            }\\n        }\\n\\n        return data.lastTimestamp;\\n    }\\n\\n    /// @return last submitted block ID, please note, that on deployment, when there is no submission for this contract\\n    /// block for last ID will be available in previous contract\\n    function getLatestBlockId() virtual public view returns (uint32) {\\n        return _consensusData.lastTimestamp;\\n    }\\n\\n    /// @dev verifies if the leaf is valid leaf for merkle tree\\n    /// @param _proof merkle proof for merkle tree\\n    /// @param _root merkle root\\n    /// @param _leaf leaf hash\\n    /// @return TRUE if `_leaf` is valid, FALSE otherwise\\n    function verifyProof(bytes32[] memory _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\\n        if (_root == bytes32(0)) {\\n            return false;\\n        }\\n\\n        return _proof.verify(_root, _leaf);\\n    }\\n\\n    /// @dev creates leaf hash, that has is used in merkle tree\\n    /// @param _key key under which we store the value\\n    /// @param _value value itself as bytes\\n    /// @return leaf hash\\n    function hashLeaf(bytes memory _key, bytes memory _value) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_key, _value));\\n    }\\n\\n    /// @dev verifies, if provided key-value pair was part of consensus\\n    /// @param _blockId consensus ID for which we doing a check\\n    /// @param _proof merkle proof for pair\\n    /// @param _key pair key\\n    /// @param _value pair value\\n    /// @return TRUE if key-value par was part of consensus, FALSE otherwise\\n    function verifyProofForBlock(\\n        uint256 _blockId,\\n        bytes32[] memory _proof,\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _proof.verify(roots[_blockId], keccak256(abi.encodePacked(_key, _value)));\\n    }\\n\\n    /// @dev this is helper method, that extracts one merkle proof from many hashed provided as bytes\\n    /// @param _data many hashes as bytes\\n    /// @param _offset this is starting point for extraction\\n    /// @param _items how many hashes to extract\\n    /// @return merkle proof (array of bytes32 hashes)\\n    function bytesToBytes32Array(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _items\\n    )\\n        public\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[] memory dataList = new bytes32[](_items);\\n\\n        // we can unchecked because we working only with `i` and `_offset`\\n        // in case of wrong `_offset` it will throw\\n        unchecked {\\n            for (uint256 i = 0; i < _items; i++) {\\n                bytes32 temp;\\n                uint256 idx = (i + 1 + _offset) * 32;\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    temp := mload(add(_data, idx))\\n                }\\n\\n                dataList[i] = temp;\\n            }\\n        }\\n\\n        return (dataList);\\n    }\\n\\n    /// @dev batch method for data verification\\n    /// @param _blockIds consensus IDs for which we doing a checks\\n    /// @param _proofs merkle proofs for all pair, sequence of hashes provided as bytes\\n    /// @param _proofItemsCounter array of counters, each counter tells how many hashes proof for each leaf has\\n    /// @param _leaves array of merkle leaves\\n    /// @return results array of verification results, TRUE if leaf is part of consensus, FALSE otherwise\\n    function verifyProofs(\\n        uint32[] memory _blockIds,\\n        bytes memory _proofs,\\n        uint256[] memory _proofItemsCounter,\\n        bytes32[] memory _leaves\\n    )\\n        public\\n        view\\n        returns (bool[] memory results)\\n    {\\n        results = new bool[](_leaves.length);\\n        uint256 offset = 0;\\n\\n        for (uint256 i = 0; i < _leaves.length;) {\\n            results[i] = bytesToBytes32Array(_proofs, offset, _proofItemsCounter[i]).verify(\\n                roots[_blockIds[i]], _leaves[i]\\n            );\\n\\n            unchecked {\\n                // we can uncheck because it will not overflow in a lifetime, and if someone provide invalid counter\\n                // we verification will not be valid (or we throw because of invalid memory access)\\n                offset += _proofItemsCounter[i];\\n                // we can uncheck because `i` will not overflow in a lifetime\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @param _blockId consensus ID\\n    /// @return root for provided consensus ID\\n    function getBlockRoot(uint32 _blockId) external view returns (bytes32) {\\n        return roots[_blockId];\\n    }\\n\\n    /// @param _blockId consensus ID\\n    /// @return timestamp for provided consensus ID\\n    function getBlockTimestamp(uint32 _blockId) external view returns (uint32) {\\n        return roots[_blockId] == bytes32(0) ? 0 : _blockId;\\n    }\\n\\n    /// @dev batch getter for FCDs\\n    /// @param _keys FCDs keys to fetch\\n    /// @return values array of FCDs values\\n    /// @return timestamps array of FCDs timestamps\\n    function getCurrentValues(bytes32[] calldata _keys)\\n        external\\n        view\\n        returns (uint256[] memory values, uint32[] memory timestamps)\\n    {\\n        timestamps = new uint32[](_keys.length);\\n        values = new uint256[](_keys.length);\\n\\n        for (uint i=0; i<_keys.length;) {\\n            FirstClassData storage numericFCD = fcds[_keys[i]];\\n            values[i] = uint256(numericFCD.value);\\n            timestamps[i] = numericFCD.dataTimestamp;\\n\\n            unchecked {\\n                // we can uncheck because `i` will not overflow in a lifetime\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @dev getter for single FCD value\\n    /// @param _key FCD key\\n    /// @return value FCD value\\n    /// @return timestamp FCD timestamp\\n    function getCurrentValue(bytes32 _key) external view returns (uint256 value, uint256 timestamp) {\\n        FirstClassData storage numericFCD = fcds[_key];\\n        return (uint256(numericFCD.value), numericFCD.dataTimestamp);\\n    }\\n\\n    /// @dev getter for single FCD value in case its type is `int`\\n    /// @param _key FCD key\\n    /// @return value FCD value\\n    /// @return timestamp FCD timestamp\\n    function getCurrentIntValue(bytes32 _key) external view returns (int256 value, uint256 timestamp) {\\n        FirstClassData storage numericFCD = fcds[_key];\\n        return (numericFCD.value.toInt(), numericFCD.dataTimestamp);\\n    }\\n\\n    function _setPadding(uint32 _padding) internal onlyOwner {\\n        if (_consensusData.padding == _padding) revert NoChangeToState();\\n\\n        _consensusData.padding = _padding;\\n        emit LogPadding(msg.sender, _padding);\\n    }\\n\\n    /// @dev we cloning last block time, because we will need reference point for next submissions\\n    function _cloneLastDataFromPrevChain(address _prevChain) internal {\\n        (bool success, bytes memory v) = _prevChain.staticcall(abi.encode(_VERSION_SELECTOR));\\n        uint256 prevVersion = success ? abi.decode(v, (uint256)) : 1;\\n\\n        if (prevVersion == 1) {\\n            uint32 latestId = IBaseChainV1(address(_prevChain)).getLatestBlockId();\\n            _consensusData.lastTimestamp = IBaseChainV1(address(_prevChain)).getBlockTimestamp(latestId);\\n\\n            // +1 because getLatestBlockId subtracts 1\\n            // +1 because it might be situation when tx is already in progress in old contract\\n            // and old contract do not have deprecated flag\\n            _consensusData.sequence = latestId + 2;\\n            _consensusData.blocksCountOffset = latestId + 2;\\n        } else { // VERSION 2\\n            // with new Registry, we have register/unregister methods\\n            // Chain will be deprecated, so there is no need to do \\\"+1\\\" as in old version\\n            // TODO what with current Registries??\\n            // we need a way to make it deprecated!\\n            ConsensusData memory data = BaseChain(_prevChain).getConsensusData();\\n\\n            _consensusData.sequence = data.sequence;\\n            _consensusData.blocksCountOffset = data.sequence;\\n            _consensusData.lastTimestamp = data.lastTimestamp;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e661155b90b2b01fef4ca41fb8e72f548b84a56a203ef0da9d4a872c5b72c8b\",\"license\":\"MIT\"},\"contracts/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./BaseChain.sol\\\";\\n\\ncontract Chain is BaseChain {\\n    IStakingBank public immutable stakingBank;\\n\\n    event LogMint(address indexed minter, uint256 blockId, uint256 staked, uint256 power);\\n    event LogVoter(uint256 indexed blockId, address indexed voter, uint256 vote);\\n\\n    error NotEnoughSignatures();\\n    error SignaturesOutOfOrder();\\n\\n    /// @param _contractRegistry Registry address\\n    /// @param _padding required \\\"space\\\" between blocks in seconds\\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\\n    /// @param _allowForMixedType we have two \\\"types\\\" of Chain: HomeChain and ForeignChain, when we redeploying\\n    /// we don't want to mix up them, so we checking, if new Chain has the same type as current one.\\n    /// However, when we will be switching from one homechain to another one, we have to allow for this mixing up.\\n    /// This flag will tell contract, if this is the case.\\n    constructor(\\n        IRegistry _contractRegistry,\\n        uint32 _padding,\\n        uint16 _requiredSignatures,\\n        bool _allowForMixedType\\n    ) BaseChain(_contractRegistry, _padding, _requiredSignatures, _allowForMixedType) {\\n        stakingBank = IStakingBank(_contractRegistry.requireAndGetAddress(\\\"StakingBank\\\"));\\n    }\\n\\n    /// @dev method for submitting consensus data\\n    /// @param _dataTimestamp consensus timestamp, this is time for all data in merkle tree including FCDs\\n    /// @param _root merkle root\\n    /// @param _keys FCDs keys\\n    /// @param _values FCDs values\\n    /// @param _v array of `v` part of validators signatures\\n    /// @param _r array of `r` part of validators signatures\\n    /// @param _s array of `s` part of validators signatures\\n    // solhint-disable-next-line function-max-lines, code-complexity\\n    function submit(\\n        uint32 _dataTimestamp,\\n        bytes32 _root,\\n        bytes32[] memory _keys,\\n        uint256[] memory _values,\\n        uint8[] memory _v,\\n        bytes32[] memory _r,\\n        bytes32[] memory _s\\n    ) external {\\n        if (_keys.length != _values.length) revert ArraysDataDoNotMatch();\\n\\n        _verifySubmitTimestampAndIncSequence(_dataTimestamp);\\n\\n        // we can't expect minter will have exactly the same timestamp\\n        // but for sure we can demand not to be off by a lot, that's why +3sec\\n        // temporary remove this condition, because recently on ropsten we see cases when minter/node\\n        // can be even 100sec behind\\n        // require(_dataTimestamp <= block.timestamp + 3,\\n        //   string(abi.encodePacked(\\\"oh, so you can predict the future:\\\", _dataTimestamp - block.timestamp + 48)));\\n\\n        bytes memory testimony = abi.encodePacked(_dataTimestamp, _root);\\n\\n        for (uint256 i = 0; i < _keys.length;) {\\n            if (uint224(_values[i]) != _values[i]) revert FCDOverflow();\\n\\n            fcds[_keys[i]] = FirstClassData(uint224(_values[i]), _dataTimestamp);\\n            testimony = abi.encodePacked(testimony, _keys[i], _values[i]);\\n\\n            unchecked {\\n                // we can't pass enough data to overflow\\n                i++;\\n            }\\n        }\\n\\n        uint256 signatures = 0;\\n        uint256 power = 0;\\n        //uint256 staked = stakingBank.totalSupply();\\n        bytes32 affidavit = keccak256(testimony);\\n\\n        address prevSigner = address(0x0);\\n\\n        for (uint256 i; i < _v.length;) {\\n            address signer = recoverSigner(affidavit, _v[i], _r[i], _s[i]);\\n            uint256 balance = stakingBank.balanceOf(signer);\\n\\n            if (prevSigner >= signer) revert SignaturesOutOfOrder();\\n\\n            prevSigner = signer;\\n\\n            if (balance == 0) {\\n                unchecked {\\n                    i++;\\n                }\\n\\n                continue;\\n            }\\n\\n            signatures++;\\n            emit LogVoter(uint256(_dataTimestamp), signer, balance);\\n\\n            unchecked {\\n                // we can't overflow because that means token overflowed\\n                // and even if we do, we will get lower power\\n                power += balance;\\n                i++;\\n            }\\n        }\\n\\n        if (signatures < _REQUIRED_SIGNATURES) revert NotEnoughSignatures();\\n\\n        emit LogMint(msg.sender, _dataTimestamp, stakingBank.totalSupply(), power);\\n\\n        // TODO remember to protect against flash loans when DPoS will be in place\\n        // we turn on power once we have DPoS in action, we have PoA now\\n        // require(power * 100 / staked >= 66, \\\"not enough power was gathered\\\");\\n\\n        roots[_dataTimestamp] = _root;\\n        _consensusData.lastTimestamp = _dataTimestamp;\\n    }\\n\\n    /// @inheritdoc BaseChain\\n    function isForeign() external pure virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev helper method that returns all important data about current state of contract\\n    /// @return blockNumber `block.number`\\n    /// @return timePadding `this.padding`\\n    /// @return lastDataTimestamp timestamp for last submitted consensus\\n    /// @return lastId ID of last submitted consensus\\n    /// @return nextLeader leader for `block.timestamp + 1`\\n    /// @return nextBlockId block ID for `block.timestamp + padding`\\n    /// @return validators array of all validators addresses\\n    /// @return powers array of all validators powers\\n    /// @return locations array of all validators locations\\n    /// @return staked total UMB staked by validators\\n    /// @return minSignatures `this.requiredSignatures`\\n    function getStatus() external view virtual returns(\\n        uint256 blockNumber,\\n        uint32 timePadding,\\n        uint32 lastDataTimestamp,\\n        uint32 lastId,\\n        address nextLeader,\\n        uint32 nextBlockId,\\n        address[] memory validators,\\n        uint256[] memory powers,\\n        string[] memory locations,\\n        uint256 staked,\\n        uint16 minSignatures\\n    ) {\\n        ConsensusData memory data = _consensusData;\\n\\n        blockNumber = block.number;\\n        timePadding = data.padding;\\n        lastId = data.lastTimestamp;\\n        lastDataTimestamp = lastId;\\n        minSignatures = _REQUIRED_SIGNATURES;\\n\\n        staked = stakingBank.totalSupply();\\n        uint256 numberOfValidators = stakingBank.getNumberOfValidators();\\n        powers = new uint256[](numberOfValidators);\\n        validators = new address[](numberOfValidators);\\n        locations = new string[](numberOfValidators);\\n\\n        for (uint256 i = 0; i < numberOfValidators;) {\\n            validators[i] = stakingBank.addresses(i);\\n            (, locations[i]) = stakingBank.validators(validators[i]);\\n            powers[i] = stakingBank.balanceOf(validators[i]);\\n\\n            unchecked {\\n                // we will run out of gas before overflow happen\\n                i++;\\n            }\\n        }\\n\\n        unchecked {\\n            // we will not overflow with timestamp in a lifetime\\n            nextBlockId = lastId + data.padding + 1;\\n\\n            nextLeader = numberOfValidators > 0\\n                // we will not overflow with timestamp in a lifetime\\n                ? validators[getLeaderIndex(numberOfValidators, block.timestamp + 1)]\\n                : address(0);\\n        }\\n    }\\n\\n    /// @return address of leader for next second\\n    function getNextLeaderAddress() external view returns (address) {\\n        return getLeaderAddressAtTime(block.timestamp + 1);\\n    }\\n\\n    /// @return address of current leader\\n    function getLeaderAddress() external view returns (address) {\\n        return getLeaderAddressAtTime(block.timestamp);\\n    }\\n\\n    /// @param _numberOfValidators total number of validators\\n    /// @param _timestamp timestamp for which you want to calculate index\\n    /// @return leader index, use it for StakingBank.addresses[index] to fetch leader address\\n    function getLeaderIndex(uint256 _numberOfValidators, uint256 _timestamp) public view virtual returns (uint256) {\\n        ConsensusData memory data = _consensusData;\\n\\n        unchecked {\\n            // we will not overflow on `timestamp` and `padding` in a life time\\n            // timePadding + 1 => because padding is a space between blocks,\\n            // so next round starts on first block after padding\\n            // TODO will it work for off-chain??\\n            uint256 validatorIndex = data.sequence + (_timestamp - data.lastTimestamp) / (data.padding + 1);\\n\\n            return validatorIndex % _numberOfValidators;\\n        }\\n    }\\n\\n    // @todo - properly handled non-enabled validators, newly added validators, and validators with low stake\\n    /// @param _timestamp timestamp for which you want to calculate leader address\\n    /// @return leader address for provider timestamp\\n    function getLeaderAddressAtTime(uint256 _timestamp) public view virtual returns (address) {\\n        uint256 numberOfValidators = stakingBank.getNumberOfValidators();\\n\\n        if (numberOfValidators == 0) {\\n            return address(0x0);\\n        }\\n\\n        uint256 validatorIndex = getLeaderIndex(numberOfValidators, _timestamp);\\n\\n        return stakingBank.addresses(validatorIndex);\\n    }\\n\\n    /// @dev we had stack too dip in `submit` so this method was created as a solution\\n    // we increasing `_consensusData.sequence` here so we don't have to read sequence again in other place\\n    function _verifySubmitTimestampAndIncSequence(uint256 _dataTimestamp) internal {\\n        ConsensusData memory data = _consensusData;\\n\\n        // `data.lastTimestamp` must be setup either on deployment\\n        // or via cloning from previous contract\\n        if (data.lastTimestamp == 0) revert ContractNotReady();\\n\\n        unchecked {\\n            // we will not overflow with timestamp and padding in a life time\\n            if (data.lastTimestamp + data.padding >= _dataTimestamp) revert BlockSubmittedToFast();\\n        }\\n\\n        if (_dataTimestamp <= data.lastTimestamp) revert DataToOld();\\n\\n        unchecked {\\n            // we will not overflow in a life time\\n            _consensusData.sequence = uint32(data.sequence + 1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66ac0864fa47fd138b65ad7282b80a947065298a0bfbe816d19e377e7df73daf\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// Inheritance\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./extensions/Registrable.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\n/// @dev contracts registry\\n/// protocol uses this registry to fetch current contract addresses\\ncontract Registry is IRegistry, Ownable {\\n    /// name => contract address\\n    mapping(bytes32 => address) public registry;\\n\\n\\n    error NameNotRegistered();\\n    error ArraysDataDoNotMatch();\\n\\n    /// @inheritdoc IRegistry\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external onlyOwner {\\n        if (_names.length != _destinations.length) revert ArraysDataDoNotMatch();\\n\\n        for (uint i = 0; i < _names.length;) {\\n            registry[_names[i]] = _destinations[i];\\n            emit LogRegistered(_destinations[i], _names[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function importContracts(address[] calldata _destinations) external onlyOwner {\\n        for (uint i = 0; i < _destinations.length;) {\\n            bytes32 name = Registrable(_destinations[i]).getName();\\n            registry[name] = _destinations[i];\\n            emit LogRegistered(_destinations[i], name);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function atomicUpdate(address _newContract) external onlyOwner {\\n        Registrable(_newContract).register();\\n\\n        bytes32 name = Registrable(_newContract).getName();\\n        address oldContract = registry[name];\\n        registry[name] = _newContract;\\n\\n        Registrable(oldContract).unregister();\\n\\n        emit LogRegistered(_newContract, name);\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function requireAndGetAddress(bytes32 name) external view returns (address) {\\n        address _foundAddress = registry[name];\\n        if (_foundAddress == address(0)) revert NameNotRegistered();\\n\\n        return _foundAddress;\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function getAddress(bytes32 _bytes) external view returns (address) {\\n        return registry[_bytes];\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function getAddressByString(string memory _name) public view returns (address) {\\n        return registry[stringToBytes32(_name)];\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function stringToBytes32(string memory _string) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(_string);\\n\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := mload(add(_string, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf8ac18bf5766420afcc70f34339192fa67169106ccdb51573267a1ffd95fb81\",\"license\":\"MIT\"},\"contracts/extensions/Registrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IStakingBank.sol\\\";\\n\\n/// @dev Any contract that we want to register in ContractRegistry, must inherit from Registrable\\nabstract contract Registrable {\\n    IRegistry public immutable contractRegistry;\\n\\n    modifier onlyFromContract(address _msgSender, bytes32 _contractName) {\\n        require(\\n            contractRegistry.getAddress(_contractName) == _msgSender,\\n            string(abi.encodePacked(\\\"caller is not \\\", _contractName))\\n        );\\n        _;\\n    }\\n\\n    modifier withRegistrySetUp() {\\n        require(address(contractRegistry) != address(0x0), \\\"_registry is empty\\\");\\n        _;\\n    }\\n\\n    constructor(IRegistry _contractRegistry) {\\n        require(address(_contractRegistry) != address(0x0), \\\"_registry is empty\\\");\\n        contractRegistry = _contractRegistry;\\n    }\\n\\n    /// @dev this method will be called as a first method in registration process when old contract will be replaced\\n    /// when called, old contract address is still in registry\\n    function register() virtual external;\\n\\n    /// @dev this method will be called as a last method in registration process when old contract will be replaced\\n    /// when called, new contract address is already in registry\\n    function unregister() virtual external;\\n\\n    /// @return contract name as bytes32\\n    function getName() virtual external pure returns (bytes32);\\n\\n    /// @dev helper method for fetching StakingBank address\\n    function stakingBankContract() public view returns (IStakingBank) {\\n        return IStakingBank(contractRegistry.requireAndGetAddress(\\\"StakingBank\\\"));\\n    }\\n\\n    /// @dev helper method for fetching UMB address\\n    function tokenContract() public view withRegistrySetUp returns (ERC20) {\\n        return ERC20(contractRegistry.requireAndGetAddress(\\\"UMB\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x58413fc819ff8f78ba80a9339bf6b4bb818932ddef0ce58dd4813acba01bda8c\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseChainV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseChainV1 {\\n    /// @dev number of blocks (consensus rounds) saved in this contract\\n    function blocksCount() external returns (uint32);\\n\\n    /// @dev number of all blocks that were generated before switching to this contract\\n    /// please note, that there might be a gap of one block when we switching from old to new contract\\n    /// see constructor for details\\n    function blocksCountOffset() external returns (uint32);\\n\\n    function getLatestBlockId() external view returns (uint32);\\n\\n    function getBlockTimestamp(uint32 _blockId) external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x15b914a5bea3daf212f2ac2eb1500037e2bc772c4fbbc96ccb9896a9cd195d00\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IRegistry {\\n    event LogRegistered(address indexed destination, bytes32 name);\\n\\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\\n    /// This method can be used for contracts that for some reason do not have `getName` method\\n    /// @param  _names array of contract names that we want to register\\n    /// @param  _destinations array of contract addresses\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\\n\\n    /// @dev imports new contracts and override old addresses, if they exist.\\n    /// Names of contracts are fetched directly from each contract by calling `getName`\\n    /// @param  _destinations array of contract addresses\\n    function importContracts(address[] calldata _destinations) external;\\n\\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\\n    /// @param _newContract address of contract that will replace old one\\n    function atomicUpdate(address _newContract) external;\\n\\n    /// @dev similar to `getAddress` but throws when contract name not exists\\n    /// @param name contract name\\n    /// @return contract address registered under provided name or throws, if does not exists\\n    function requireAndGetAddress(bytes32 name) external view returns (address);\\n\\n    /// @param name contract name in a form of bytes32\\n    /// @return contract address registered under provided name\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    /// @param _name contract name\\n    /// @return contract address assigned to the name or address(0) if not exists\\n    function getAddressByString(string memory _name) external view returns (address);\\n\\n    /// @dev helper method that converts string to bytes32,\\n    /// you can use to to generate contract name\\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\\n}\\n\",\"keccak256\":\"0xa0099ecf4182138fda7a0733407784461410c245de67c1e7ba7cd7c9595e054f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingBank is IERC20 {\\n    /// @param id address of validator wallet\\n    /// @param location URL of the validator API\\n    struct Validator {\\n        address id;\\n        string location;\\n    }\\n\\n    event LogValidatorRegistered(address indexed id);\\n    event LogValidatorUpdated(address indexed id);\\n    event LogValidatorRemoved(address indexed id);\\n    event LogMinAmountForStake(uint256 minAmountForStake);\\n\\n    /// @dev setter for `minAmountForStake`\\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\\n\\n    /// @dev allows to stake `token` by validators\\n    /// Validator needs to approve StakingBank beforehand\\n    /// @param _value amount of tokens to stake\\n    function stake(uint256 _value) external;\\n\\n    /// @dev notification about approval from `_from` address on UMB token\\n    /// Staking bank will stake max approved amount from `_from` address\\n    /// @param _from address which approved token spend for IStakingBank\\n    function receiveApproval(address _from) external returns (bool success);\\n\\n    /// @dev withdraws stake tokens\\n    /// it throws, when balance will be less than required minimum for stake\\n    /// to withdraw all use `exit`\\n    function withdraw(uint256 _value) external returns (bool success);\\n\\n    /// @dev unstake and withdraw all tokens\\n    function exit() external returns (bool success);\\n\\n    /// @dev creates (register) new validator\\n    /// @param _id validator address\\n    /// @param _location location URL of the validator API\\n    function create(address _id, string calldata _location) external;\\n\\n    /// @dev removes validator\\n    /// @param _id validator wallet\\n    function remove(address _id) external;\\n\\n    /// @dev updates validator location\\n    /// @param _id validator wallet\\n    /// @param _location new validator URL\\n    function update(address _id, string calldata _location) external;\\n\\n    /// @return total number of registered validators (with and without balance)\\n    function getNumberOfValidators() external view returns (uint256);\\n\\n    /// @dev gets validator address for provided index\\n    /// @param _ix index in array of list of all validators wallets\\n    function addresses(uint256 _ix) external view returns (address);\\n\\n    /// @param _id address of validator\\n    /// @return id address of validator\\n    /// @return location URL of validator\\n    function validators(address _id) external view returns (address id, string memory location);\\n}\\n\",\"keccak256\":\"0x2c518aeab8b0b3a364fafaec559d3ff0dc6a119f8d203fa31ef7ad667ca0f7b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162005f7f38038062005f7f833981810160405281019062000038919062000677565b8383838383600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a6906200074a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000104620000f8620002e660201b60201c565b620002ee60201b60201c565b80151560a0811515815250508161ffff1660c08161ffff16815250506200013183620003b260201b60201c565b60008473ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b81526004016200016c9062000792565b602060405180830381865afa1580156200018a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b09190620007de565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002275760018442620001f791906200083f565b6200020391906200083f565b600160000160086101000a81548163ffffffff021916908363ffffffff1602179055505b50505050508373ffffffffffffffffffffffffffffffffffffffff166346bcb49d6040518163ffffffff1660e01b81526004016200026590620008a0565b602060405180830381865afa15801562000283573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a99190620007de565b73ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505050506200095b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620003c2620002e660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003e86200051360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000438906200090b565b60405180910390fd5b8063ffffffff166001600001600c9054906101000a900463ffffffff1663ffffffff16036200049c576040517f96f56f6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600001600c6101000a81548163ffffffff021916908363ffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f02ff77a0f68d11f7efb906f331b2dda82916de8ba9c37dda2a95817936a530ec826040516200050891906200093e565b60405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200056e8262000541565b9050919050565b6000620005828262000561565b9050919050565b620005948162000575565b8114620005a057600080fd5b50565b600081519050620005b48162000589565b92915050565b600063ffffffff82169050919050565b620005d581620005ba565b8114620005e157600080fd5b50565b600081519050620005f581620005ca565b92915050565b600061ffff82169050919050565b6200061481620005fb565b81146200062057600080fd5b50565b600081519050620006348162000609565b92915050565b60008115159050919050565b62000651816200063a565b81146200065d57600080fd5b50565b600081519050620006718162000646565b92915050565b600080600080608085870312156200069457620006936200053c565b5b6000620006a487828801620005a3565b9450506020620006b787828801620005e4565b9350506040620006ca8782880162000623565b9250506060620006dd8782880162000660565b91505092959194509250565b600082825260208201905092915050565b7f5f726567697374727920697320656d7074790000000000000000000000000000600082015250565b600062000732601283620006e9565b91506200073f82620006fa565b602082019050919050565b60006020820190508181036000830152620007658162000723565b9050919050565b7f436861696e000000000000000000000000000000000000000000000000000000815250565b6000602082019050620007a8600083016200076c565b919050565b620007b88162000561565b8114620007c457600080fd5b50565b600081519050620007d881620007ad565b92915050565b600060208284031215620007f757620007f66200053c565b5b60006200080784828501620007c7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200084c82620005ba565b91506200085983620005ba565b9250828210156200086f576200086e62000810565b5b828203905092915050565b7f5374616b696e6742616e6b000000000000000000000000000000000000000000815250565b6000602082019050620008b6600083016200087a565b919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620008f3602083620006e9565b91506200090082620008bb565b602082019050919050565b600060208201905081810360008301526200092681620008e4565b9050919050565b6200093881620005ba565b82525050565b60006020820190506200095560008301846200092d565b92915050565b60805160a05160c05160e05161556562000a1a60003960008181610f1c015281816112d1015281816114fc01528181611733015281816117c60152818161194801528181611a2f01528181611b08015281816129c40152612a75015260008181611465015281816117100152611fec0152600061280e01526000818161089701528181610a8d01528181610b5501528181611c5601528181611ccd01528181611d6c0152818161212401528181612630015261270f01526155656000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80638d06804311610151578063ca4d29d2116100c3578063e79a198f11610087578063e79a198f146107a0578063ed9975c3146107aa578063ef19f3e7146107c8578063f25b3f99146107f8578063f2fde38b14610828578063ffa1ad741461084457610269565b8063ca4d29d2146106d3578063cbb1b2c714610703578063d3d3ea0814610734578063d45167d014610752578063e76c0b571461078257610269565b8063adf1639d11610115578063adf1639d146105c4578063bef9f8a1146105f5578063bf66e3ba14610625578063c2a4250b14610655578063c2b40ae414610673578063c3369db8146106a357610269565b80638d0680431461052e5780638da5cb5b1461054c5780639f6119d71461056a578063a0bc937414610588578063abf410e5146105a657610269565b806340a9e5e3116101ea578063637180a8116101ae578063637180a81461047c5780636d046c3e1461049a578063715018a6146104b85780637353cbcb146104c257806377839fe6146104e0578063805d3432146104fe57610269565b806340a9e5e3146103ce578063485e055d146103ea5780634bc935d7146104065780634e69d5601461043657806355a373d61461045e57610269565b8063243b68f911610231578063243b68f91461030057806324c89a491461033057806326f3ab8b1461034e57806334ba34811461037f5780633bb8819d1461039d57610269565b80630f2acc3e1461026e5780630fcc0c281461029e57806317d7de7c146102a8578063199dadc5146102c65780631aa3a008146102f6575b600080fd5b6102886004803603810190610283919061367d565b610862565b604051610295919061370e565b60405180910390f35b6102a6610895565b005b6102b0610a07565b6040516102bd919061370e565b60405180910390f35b6102e060048036038101906102db9190613853565b610a2f565b6040516102ed9190613929565b60405180910390f35b6102fe610a8b565b005b61031a60048036038101906103159190613944565b610c99565b6040516103279190613a71565b60405180910390f35b610338610d42565b6040516103459190613b1b565b60405180910390f35b61036860048036038101906103639190613b98565b610d7b565b604051610376929190613d71565b60405180910390f35b610387610f1a565b6040516103949190613e27565b60405180910390f35b6103b760048036038101906103b29190613e42565b610f3e565b6040516103c5929190613e97565b60405180910390f35b6103e860048036038101906103e39190613efa565b610fd3565b005b61040460048036038101906103ff9190614112565b610fe3565b005b610420600480360381019061041b9190614240565b6115f1565b60405161042d9190613929565b60405180910390f35b61043e611625565b6040516104559b9a999897969594939291906144c3565b60405180910390f35b610466611c3b565b60405161047391906145a4565b60405180910390f35b610484611d68565b6040516104919190613e27565b60405180910390f35b6104a2611e07565b6040516104af9190613929565b60405180910390f35b6104c0611e0c565b005b6104ca611e94565b6040516104d791906145bf565b60405180910390f35b6104e8611ed7565b6040516104f591906145da565b60405180910390f35b610518600480360381019061051391906145f5565b611ef4565b60405161052591906145da565b60405180910390f35b610536611fe8565b6040516105439190614622565b60405180910390f35b610554612010565b604051610561919061463d565b60405180910390f35b610572612039565b60405161057f919061463d565b60405180910390f35b610590612055565b60405161059d91906146cf565b60405180910390f35b6105ae612122565b6040516105bb919061470b565b60405180910390f35b6105de60048036038101906105d99190613e42565b612146565b6040516105ec929190614726565b60405180910390f35b61060f600480360381019061060a919061474f565b6121d3565b60405161061c919061370e565b60405180910390f35b61063f600480360381019061063a919061483f565b6121f6565b60405161064c91906149c5565b60405180910390f35b61065d612332565b60405161066a91906145bf565b60405180910390f35b61068d600480360381019061068891906145f5565b612355565b60405161069a919061370e565b60405180910390f35b6106bd60048036038101906106b8919061474f565b61236d565b6040516106ca91906145da565b60405180910390f35b6106ed60048036038101906106e891906149e7565b6123a2565b6040516106fa91906145bf565b60405180910390f35b61071d60048036038101906107189190613e42565b6124bc565b60405161072b929190614a5e565b60405180910390f35b61073c612518565b60405161074991906145da565b60405180910390f35b61076c60048036038101906107679190614a87565b612535565b604051610779919061463d565b60405180910390f35b61078a6125f2565b60405161079791906145da565b60405180910390f35b6107a861262e565b005b6107b26129af565b6040516107bf919061463d565b60405180910390f35b6107e260048036038101906107dd91906145f5565b6129bf565b6040516107ef919061463d565b60405180910390f35b610812600480360381019061080d91906145f5565b612b17565b60405161081f9190614b1d565b60405180910390f35b610842600480360381019061083d9190614b64565b612b54565b005b61084c612c4b565b60405161085991906145bf565b60405180910390f35b60008282604051602001610877929190614bcd565b60405160208183030381529060405280519060200120905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561092457506108f4612010565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561095b576040517f0daa173600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160000160109054906101000a900460ff16156109a5576040517f764c143b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060000160106101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fd4ae81319f0b4df100dcda9ce971671b97278c7a5ce6b37a8331a44700679fd460405160405180910390a2565b60007f436861696e000000000000000000000000000000000000000000000000000000905090565b6000610a8160026000878152602001908152602001600020548484604051602001610a5b929190614bcd565b6040516020818303038152906040528051906020012086612c509092919063ffffffff16565b9050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610b1a5750610aea612010565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610b51576040517f0daa173600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b8152600401610baa90614c17565b602060405180830381865afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190614c45565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c52576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c8c5750610c97565b610c9581612c67565b505b565b606060008267ffffffffffffffff811115610cb757610cb6613552565b5b604051908082528060200260200182016040528015610ce55781602001602082028036833780820191505090505b50905060005b83811015610d3657600080602087600185010102905080880151915081848481518110610d1b57610d1a614c72565b5b60200260200101818152505050508080600101915050610ceb565b50809150509392505050565b6040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525081565b6060808383905067ffffffffffffffff811115610d9b57610d9a613552565b5b604051908082528060200260200182016040528015610dc95781602001602082028036833780820191505090505b5090508383905067ffffffffffffffff811115610de957610de8613552565b5b604051908082528060200260200182016040528015610e175781602001602082028036833780820191505090505b50915060005b84849050811015610f1257600060036000878785818110610e4157610e40614c72565b5b90506020020135815260200190815260200160002090508060000160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16848381518110610eb657610eb5614c72565b5b60200260200101818152505080600001601c9054906101000a900463ffffffff16838381518110610eea57610ee9614c72565b5b602002602001019063ffffffff16908163ffffffff1681525050818060010192505050610e1d565b509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000600360008581526020019081526020016000209050610fab8160000160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612fa9565b81600001601c9054906101000a900463ffffffff168063ffffffff1690509250925050915091565b610fe08161ffff16613051565b50565b835185511461101e576040517f0cf7902300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61102d8763ffffffff1661319c565b60008787604051602001611042929190614cf8565b604051602081830303815290604052905060005b86518110156112525785818151811061107257611071614c72565b5b602002602001015186828151811061108d5761108c614c72565b5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16146110ea576040517f6980091000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806040016040528087838151811061110857611107614c72565b5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681526020018a63ffffffff168152506003600089848151811061115457611153614c72565b5b6020026020010151815260200190815260200160002060008201518160000160006101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050818782815181106111ff576111fe614c72565b5b602002602001015187838151811061121a57611219614c72565b5b602002602001015160405160200161123493929190614d45565b60405160208183030381529060405291508080600101915050611056565b506000806000838051906020012090506000805b88518110156114625760006112cb848b848151811061128857611287614c72565b5b60200260200101518b85815181106112a3576112a2614c72565b5b60200260200101518b86815181106112be576112bd614c72565b5b6020026020010151612535565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401611328919061463d565b602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190614d93565b90508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106113d0576040517f9079f69b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b819350600081036113ea578280600101935050505061145d565b86806113f590614def565b9750508173ffffffffffffffffffffffffffffffffffffffff168f63ffffffff167fbac7552ab5da8d0588709ddb75aceec28520646f54bca1cc5e6e104db61935ec8360405161144591906145bf565b60405180910390a38086019550828060010193505050505b611266565b507f000000000000000000000000000000000000000000000000000000000000000061ffff168410156114c1576040517fe246dc6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f5f11830295067c4bcc7d02d4e3b048cd7427be50a3aeb6afc9d3d559ee64bcfa8d7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190614d93565b8660405161159993929190614e68565b60405180910390a28a600260008e63ffffffff168152602001908152602001600020819055508b600160000160086101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050505050565b60008060001b8303611606576000905061161e565b61161b838386612c509092919063ffffffff16565b90505b9392505050565b6000806000806000806060806060600080600060016040518060a00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160109054906101000a900460ff1615151515815250509050439b5080606001519a50806040015198508899507f000000000000000000000000000000000000000000000000000000000000000091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c09190614d93565b925060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639031d9136040518163ffffffff1660e01b8152600401602060405180830381865afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190614d93565b90508067ffffffffffffffff81111561186f5761186e613552565b5b60405190808252806020026020018201604052801561189d5781602001602082028036833780820191505090505b5095508067ffffffffffffffff8111156118ba576118b9613552565b5b6040519080825280602002602001820160405280156118e85781602001602082028036833780820191505090505b5096508067ffffffffffffffff81111561190557611904613552565b5b60405190808252806020026020018201604052801561193857816020015b60608152602001906001900390816119235790505b50945060005b81811015611be6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663edf26d9b826040518263ffffffff1660e01b815260040161199f91906145bf565b602060405180830381865afa1580156119bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e09190614c45565b8882815181106119f3576119f2614c72565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fa52c7d8898381518110611a7c57611a7b614c72565b5b60200260200101516040518263ffffffff1660e01b8152600401611aa0919061463d565b600060405180830381865afa158015611abd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611ae69190614f40565b9050868281518110611afb57611afa614c72565b5b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231898381518110611b5557611b54614c72565b5b60200260200101516040518263ffffffff1660e01b8152600401611b79919061463d565b602060405180830381865afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba9190614d93565b878281518110611bcd57611bcc614c72565b5b602002602001018181525050808060010191505061193e565b50600182606001518b0101975060008111611c02576000611c2a565b86611c1082600142016123a2565b81518110611c2157611c20614c72565b5b60200260200101515b98505050909192939495969798999a565b60008073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1603611ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc290614ff9565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166346bcb49d6040518163ffffffff1660e01b8152600401611d229061503f565b602060405180830381865afa158015611d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d639190614c45565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166346bcb49d6040518163ffffffff1660e01b8152600401611dc19061507e565b602060405180830381865afa158015611dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e029190614c45565b905090565b600090565b611e1461335f565b73ffffffffffffffffffffffffffffffffffffffff16611e32612010565b73ffffffffffffffffffffffffffffffffffffffff1614611e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f906150e3565b60405180910390fd5b611e926000613367565b565b6000600160000160009054906101000a900463ffffffff16600160000160049054906101000a900463ffffffff16611ecc9190615103565b63ffffffff16905090565b6000600160000160009054906101000a900463ffffffff16905090565b60008060016040518060a00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160109054906101000a900460ff161515151581525050905082816060015182604001510163ffffffff161015611fda5782915050611fe3565b80604001519150505b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061205060014261204b9190615137565b6129bf565b905090565b61205d6134b7565b60016040518060a00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160109054906101000a900460ff161515151581525050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006003600085815260200190815260200160002090508060000160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681600001601c9054906101000a900463ffffffff168063ffffffff1690509250925050915091565b6000600260008363ffffffff168152602001908152602001600020549050919050565b6060815167ffffffffffffffff81111561221357612212613552565b5b6040519080825280602002602001820160405280156122415781602001602082028036833780820191505090505b5090506000805b8351811015612328576122d76002600089848151811061226b5761226a614c72565b5b602002602001015163ffffffff1681526020019081526020016000205485838151811061229b5761229a614c72565b5b60200260200101516122c889868a87815181106122bb576122ba614c72565b5b6020026020010151610c99565b612c509092919063ffffffff16565b8382815181106122ea576122e9614c72565b5b60200260200101901515908115158152505084818151811061230f5761230e614c72565b5b6020026020010151820191508080600101915050612248565b5050949350505050565b6000600160000160089054906101000a900463ffffffff1663ffffffff16905090565b60026020528060005260406000206000915090505481565b60008060001b600260008463ffffffff1681526020019081526020016000205414612398578161239b565b60005b9050919050565b60008060016040518060a00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160109054906101000a900460ff16151515158152505090506000600182606001510163ffffffff16826040015163ffffffff168503816124925761249161518d565b5b04826020015163ffffffff160190508481816124b1576124b061518d565b5b069250505092915050565b60036020528060005260406000206000915090508060000160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169080600001601c9054906101000a900463ffffffff16905082565b6000600160000160089054906101000a900463ffffffff16905090565b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250866040516020016125809291906151bc565b604051602081830303815290604052805190602001209050600181868686604051600081526020016040526040516125bb94939291906151f3565b6020604051602081039080840390855afa1580156125dd573d6000803e3d6000fd5b50505060206040510351915050949350505050565b600080600160000160089054906101000a900463ffffffff1663ffffffff160361261f576000905061262b565b61262842611ef4565b90505b90565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156126bd575061268d612010565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156126f4576040517f0daa173600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160000160109054906101000a900460ff166129ad5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b815260040161276490614c17565b602060405180830381865afa158015612781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a59190614c45565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361280c576040517ff8e0084400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061294b573073ffffffffffffffffffffffffffffffffffffffff16636d046c3e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561287c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a09190615264565b15158173ffffffffffffffffffffffffffffffffffffffff16636d046c3e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129119190615264565b15151461294a576040517f07b72f5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60018060000160106101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fd4ae81319f0b4df100dcda9ce971671b97278c7a5ce6b37a8331a44700679fd460405160405180910390a2505b565b60006129ba426129bf565b905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639031d9136040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a519190614d93565b905060008103612a65576000915050612b12565b6000612a7182856123a2565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663edf26d9b826040518263ffffffff1660e01b8152600401612acc91906145bf565b602060405180830381865afa158015612ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0d9190614c45565b925050505b919050565b612b1f613500565b6040518060400160405280600260008581526020019081526020016000205481526020018363ffffffff168152509050919050565b612b5c61335f565b73ffffffffffffffffffffffffffffffffffffffff16612b7a612010565b73ffffffffffffffffffffffffffffffffffffffff1614612bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc7906150e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3690615303565b60405180910390fd5b612c4881613367565b50565b600281565b600082612c5d858461342b565b1490509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff167fffa1ad74ba96b4c159a84d090433911c3991c54f629eb60d0c84aed3be5f067c604051602001612cb2919061535e565b604051602081830303815290604052604051612cce9190615379565b600060405180830381855afa9150503d8060008114612d09576040519150601f19603f3d011682016040523d82523d6000602084013e612d0e565b606091505b5091509150600082612d21576001612d36565b81806020019051810190612d359190614d93565b5b905060018103612eb65760008473ffffffffffffffffffffffffffffffffffffffff1663d3d3ea086040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db191906153a5565b90508473ffffffffffffffffffffffffffffffffffffffff1663c3369db8826040518263ffffffff1660e01b8152600401612dec91906145da565b602060405180830381865afa158015612e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2d91906153a5565b600160000160086101000a81548163ffffffff021916908363ffffffff160217905550600281612e5d91906153d2565b600160000160046101000a81548163ffffffff021916908363ffffffff160217905550600281612e8d91906153d2565b600160000160006101000a81548163ffffffff021916908363ffffffff16021790555050612fa3565b60008473ffffffffffffffffffffffffffffffffffffffff1663a0bc93746040518163ffffffff1660e01b815260040160a060405180830381865afa158015612f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f27919061549d565b90508060200151600160000160046101000a81548163ffffffff021916908363ffffffff1602179055508060200151600160000160006101000a81548163ffffffff021916908363ffffffff1602179055508060400151600160000160086101000a81548163ffffffff021916908363ffffffff160217905550505b50505050565b60008060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506002600182612fdc91906154ca565b612fe691906154fe565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161161303b5760008401915081601b0b9250505061304c565b600181850303915081601b0b925050505b919050565b61305961335f565b73ffffffffffffffffffffffffffffffffffffffff16613077612010565b73ffffffffffffffffffffffffffffffffffffffff16146130cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c4906150e3565b60405180910390fd5b8063ffffffff166001600001600c9054906101000a900463ffffffff1663ffffffff1603613127576040517f96f56f6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600001600c6101000a81548163ffffffff021916908363ffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f02ff77a0f68d11f7efb906f331b2dda82916de8ba9c37dda2a95817936a530ec8260405161319191906145da565b60405180910390a250565b600060016040518060a00160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160109054906101000a900460ff16151515158152505090506000816040015163ffffffff16036132a4576040517f96a96e1700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816060015182604001510163ffffffff16106132ed576040517fb0e1b46600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015163ffffffff168211613330576040517f9d69a94700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816020015101600160000160046101000a81548163ffffffff021916908363ffffffff1602179055505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008082905060005b845181101561349557600085828151811061345257613451614c72565b5b602002602001015190508083116134745761346d83826134a0565b9250613481565b61347e81846134a0565b92505b50808061348d90614def565b915050613434565b508091505092915050565b600082600052816020526040600020905092915050565b6040518060a00160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000151581525090565b604051806040016040528060008019168152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61358a82613541565b810181811067ffffffffffffffff821117156135a9576135a8613552565b5b80604052505050565b60006135bc613523565b90506135c88282613581565b919050565b600067ffffffffffffffff8211156135e8576135e7613552565b5b6135f182613541565b9050602081019050919050565b82818337600083830152505050565b600061362061361b846135cd565b6135b2565b90508281526020810184848401111561363c5761363b61353c565b5b6136478482856135fe565b509392505050565b600082601f83011261366457613663613537565b5b813561367484826020860161360d565b91505092915050565b600080604083850312156136945761369361352d565b5b600083013567ffffffffffffffff8111156136b2576136b1613532565b5b6136be8582860161364f565b925050602083013567ffffffffffffffff8111156136df576136de613532565b5b6136eb8582860161364f565b9150509250929050565b6000819050919050565b613708816136f5565b82525050565b600060208201905061372360008301846136ff565b92915050565b6000819050919050565b61373c81613729565b811461374757600080fd5b50565b60008135905061375981613733565b92915050565b600067ffffffffffffffff82111561377a57613779613552565b5b602082029050602081019050919050565b600080fd5b613799816136f5565b81146137a457600080fd5b50565b6000813590506137b681613790565b92915050565b60006137cf6137ca8461375f565b6135b2565b905080838252602082019050602084028301858111156137f2576137f161378b565b5b835b8181101561381b578061380788826137a7565b8452602084019350506020810190506137f4565b5050509392505050565b600082601f83011261383a57613839613537565b5b813561384a8482602086016137bc565b91505092915050565b6000806000806080858703121561386d5761386c61352d565b5b600061387b8782880161374a565b945050602085013567ffffffffffffffff81111561389c5761389b613532565b5b6138a887828801613825565b935050604085013567ffffffffffffffff8111156138c9576138c8613532565b5b6138d58782880161364f565b925050606085013567ffffffffffffffff8111156138f6576138f5613532565b5b6139028782880161364f565b91505092959194509250565b60008115159050919050565b6139238161390e565b82525050565b600060208201905061393e600083018461391a565b92915050565b60008060006060848603121561395d5761395c61352d565b5b600084013567ffffffffffffffff81111561397b5761397a613532565b5b6139878682870161364f565b93505060206139988682870161374a565b92505060406139a98682870161374a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6139e8816136f5565b82525050565b60006139fa83836139df565b60208301905092915050565b6000602082019050919050565b6000613a1e826139b3565b613a2881856139be565b9350613a33836139cf565b8060005b83811015613a64578151613a4b88826139ee565b9750613a5683613a06565b925050600181019050613a37565b5085935050505092915050565b60006020820190508181036000830152613a8b8184613a13565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613acd578082015181840152602081019050613ab2565b83811115613adc576000848401525b50505050565b6000613aed82613a93565b613af78185613a9e565b9350613b07818560208601613aaf565b613b1081613541565b840191505092915050565b60006020820190508181036000830152613b358184613ae2565b905092915050565b600080fd5b60008083601f840112613b5857613b57613537565b5b8235905067ffffffffffffffff811115613b7557613b74613b3d565b5b602083019150836020820283011115613b9157613b9061378b565b5b9250929050565b60008060208385031215613baf57613bae61352d565b5b600083013567ffffffffffffffff811115613bcd57613bcc613532565b5b613bd985828601613b42565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613c1a81613729565b82525050565b6000613c2c8383613c11565b60208301905092915050565b6000602082019050919050565b6000613c5082613be5565b613c5a8185613bf0565b9350613c6583613c01565b8060005b83811015613c96578151613c7d8882613c20565b9750613c8883613c38565b925050600181019050613c69565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600063ffffffff82169050919050565b613ce881613ccf565b82525050565b6000613cfa8383613cdf565b60208301905092915050565b6000602082019050919050565b6000613d1e82613ca3565b613d288185613cae565b9350613d3383613cbf565b8060005b83811015613d64578151613d4b8882613cee565b9750613d5683613d06565b925050600181019050613d37565b5085935050505092915050565b60006040820190508181036000830152613d8b8185613c45565b90508181036020830152613d9f8184613d13565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613ded613de8613de384613da8565b613dc8565b613da8565b9050919050565b6000613dff82613dd2565b9050919050565b6000613e1182613df4565b9050919050565b613e2181613e06565b82525050565b6000602082019050613e3c6000830184613e18565b92915050565b600060208284031215613e5857613e5761352d565b5b6000613e66848285016137a7565b91505092915050565b6000819050919050565b613e8281613e6f565b82525050565b613e9181613729565b82525050565b6000604082019050613eac6000830185613e79565b613eb96020830184613e88565b9392505050565b600061ffff82169050919050565b613ed781613ec0565b8114613ee257600080fd5b50565b600081359050613ef481613ece565b92915050565b600060208284031215613f1057613f0f61352d565b5b6000613f1e84828501613ee5565b91505092915050565b613f3081613ccf565b8114613f3b57600080fd5b50565b600081359050613f4d81613f27565b92915050565b600067ffffffffffffffff821115613f6e57613f6d613552565b5b602082029050602081019050919050565b6000613f92613f8d84613f53565b6135b2565b90508083825260208201905060208402830185811115613fb557613fb461378b565b5b835b81811015613fde5780613fca888261374a565b845260208401935050602081019050613fb7565b5050509392505050565b600082601f830112613ffd57613ffc613537565b5b813561400d848260208601613f7f565b91505092915050565b600067ffffffffffffffff82111561403157614030613552565b5b602082029050602081019050919050565b600060ff82169050919050565b61405881614042565b811461406357600080fd5b50565b6000813590506140758161404f565b92915050565b600061408e61408984614016565b6135b2565b905080838252602082019050602084028301858111156140b1576140b061378b565b5b835b818110156140da57806140c68882614066565b8452602084019350506020810190506140b3565b5050509392505050565b600082601f8301126140f9576140f8613537565b5b813561410984826020860161407b565b91505092915050565b600080600080600080600060e0888a0312156141315761413061352d565b5b600061413f8a828b01613f3e565b97505060206141508a828b016137a7565b965050604088013567ffffffffffffffff81111561417157614170613532565b5b61417d8a828b01613825565b955050606088013567ffffffffffffffff81111561419e5761419d613532565b5b6141aa8a828b01613fe8565b945050608088013567ffffffffffffffff8111156141cb576141ca613532565b5b6141d78a828b016140e4565b93505060a088013567ffffffffffffffff8111156141f8576141f7613532565b5b6142048a828b01613825565b92505060c088013567ffffffffffffffff81111561422557614224613532565b5b6142318a828b01613825565b91505092959891949750929550565b6000806000606084860312156142595761425861352d565b5b600084013567ffffffffffffffff81111561427757614276613532565b5b61428386828701613825565b9350506020614294868287016137a7565b92505060406142a5868287016137a7565b9150509250925092565b6142b881613ccf565b82525050565b60006142c982613da8565b9050919050565b6142d9816142be565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614314816142be565b82525050565b6000614326838361430b565b60208301905092915050565b6000602082019050919050565b600061434a826142df565b61435481856142ea565b935061435f836142fb565b8060005b83811015614390578151614377888261431a565b975061438283614332565b925050600181019050614363565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60006143f0826143c9565b6143fa81856143d4565b935061440a818560208601613aaf565b61441381613541565b840191505092915050565b600061442a83836143e5565b905092915050565b6000602082019050919050565b600061444a8261439d565b61445481856143a8565b935083602082028501614466856143b9565b8060005b858110156144a25784840389528151614483858261441e565b945061448e83614432565b925060208a0199505060018101905061446a565b50829750879550505050505092915050565b6144bd81613ec0565b82525050565b6000610160820190506144d9600083018e613e88565b6144e6602083018d6142af565b6144f3604083018c6142af565b614500606083018b6142af565b61450d608083018a6142d0565b61451a60a08301896142af565b81810360c083015261452c818861433f565b905081810360e08301526145408187613c45565b9050818103610100830152614555818661443f565b9050614565610120830185613e88565b6145736101408301846144b4565b9c9b505050505050505050505050565b600061458e82613df4565b9050919050565b61459e81614583565b82525050565b60006020820190506145b96000830184614595565b92915050565b60006020820190506145d46000830184613e88565b92915050565b60006020820190506145ef60008301846142af565b92915050565b60006020828403121561460b5761460a61352d565b5b60006146198482850161374a565b91505092915050565b600060208201905061463760008301846144b4565b92915050565b600060208201905061465260008301846142d0565b92915050565b6146618161390e565b82525050565b60a08201600082015161467d6000850182613cdf565b5060208201516146906020850182613cdf565b5060408201516146a36040850182613cdf565b5060608201516146b66060850182613cdf565b5060808201516146c96080850182614658565b50505050565b600060a0820190506146e46000830184614667565b92915050565b60006146f582613df4565b9050919050565b614705816146ea565b82525050565b600060208201905061472060008301846146fc565b92915050565b600060408201905061473b6000830185613e88565b6147486020830184613e88565b9392505050565b6000602082840312156147655761476461352d565b5b600061477384828501613f3e565b91505092915050565b600067ffffffffffffffff82111561479757614796613552565b5b602082029050602081019050919050565b60006147bb6147b68461477c565b6135b2565b905080838252602082019050602084028301858111156147de576147dd61378b565b5b835b8181101561480757806147f38882613f3e565b8452602084019350506020810190506147e0565b5050509392505050565b600082601f83011261482657614825613537565b5b81356148368482602086016147a8565b91505092915050565b600080600080608085870312156148595761485861352d565b5b600085013567ffffffffffffffff81111561487757614876613532565b5b61488387828801614811565b945050602085013567ffffffffffffffff8111156148a4576148a3613532565b5b6148b08782880161364f565b935050604085013567ffffffffffffffff8111156148d1576148d0613532565b5b6148dd87828801613fe8565b925050606085013567ffffffffffffffff8111156148fe576148fd613532565b5b61490a87828801613825565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061494e8383614658565b60208301905092915050565b6000602082019050919050565b600061497282614916565b61497c8185614921565b935061498783614932565b8060005b838110156149b857815161499f8882614942565b97506149aa8361495a565b92505060018101905061498b565b5085935050505092915050565b600060208201905081810360008301526149df8184614967565b905092915050565b600080604083850312156149fe576149fd61352d565b5b6000614a0c8582860161374a565b9250506020614a1d8582860161374a565b9150509250929050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b614a5881614a27565b82525050565b6000604082019050614a736000830185614a4f565b614a8060208301846142af565b9392505050565b60008060008060808587031215614aa157614aa061352d565b5b6000614aaf878288016137a7565b9450506020614ac087828801614066565b9350506040614ad1878288016137a7565b9250506060614ae2878288016137a7565b91505092959194509250565b604082016000820151614b0460008501826139df565b506020820151614b176020850182613cdf565b50505050565b6000604082019050614b326000830184614aee565b92915050565b614b41816142be565b8114614b4c57600080fd5b50565b600081359050614b5e81614b38565b92915050565b600060208284031215614b7a57614b7961352d565b5b6000614b8884828501614b4f565b91505092915050565b600081905092915050565b6000614ba782613a93565b614bb18185614b91565b9350614bc1818560208601613aaf565b80840191505092915050565b6000614bd98285614b9c565b9150614be58284614b9c565b91508190509392505050565b7f436861696e000000000000000000000000000000000000000000000000000000815250565b6000602082019050614c2b60008301614bf1565b919050565b600081519050614c3f81614b38565b92915050565b600060208284031215614c5b57614c5a61352d565b5b6000614c6984828501614c30565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160e01b9050919050565b6000614cb982614ca1565b9050919050565b614cd1614ccc82613ccf565b614cae565b82525050565b6000819050919050565b614cf2614ced826136f5565b614cd7565b82525050565b6000614d048285614cc0565b600482019150614d148284614ce1565b6020820191508190509392505050565b6000819050919050565b614d3f614d3a82613729565b614d24565b82525050565b6000614d518286614b9c565b9150614d5d8285614ce1565b602082019150614d6d8284614d2e565b602082019150819050949350505050565b600081519050614d8d81613733565b92915050565b600060208284031215614da957614da861352d565b5b6000614db784828501614d7e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614dfa82613729565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e2c57614e2b614dc0565b5b600182019050919050565b6000614e52614e4d614e4884613ccf565b613dc8565b613729565b9050919050565b614e6281614e37565b82525050565b6000606082019050614e7d6000830186614e59565b614e8a6020830185613e88565b614e976040830184613e88565b949350505050565b600067ffffffffffffffff821115614eba57614eb9613552565b5b614ec382613541565b9050602081019050919050565b6000614ee3614ede84614e9f565b6135b2565b905082815260208101848484011115614eff57614efe61353c565b5b614f0a848285613aaf565b509392505050565b600082601f830112614f2757614f26613537565b5b8151614f37848260208601614ed0565b91505092915050565b60008060408385031215614f5757614f5661352d565b5b6000614f6585828601614c30565b925050602083015167ffffffffffffffff811115614f8657614f85613532565b5b614f9285828601614f12565b9150509250929050565b600082825260208201905092915050565b7f5f726567697374727920697320656d7074790000000000000000000000000000600082015250565b6000614fe3601283614f9c565b9150614fee82614fad565b602082019050919050565b6000602082019050818103600083015261501281614fd6565b9050919050565b7f554d420000000000000000000000000000000000000000000000000000000000815250565b600060208201905061505360008301615019565b919050565b7f5374616b696e6742616e6b000000000000000000000000000000000000000000815250565b600060208201905061509260008301615058565b919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006150cd602083614f9c565b91506150d882615097565b602082019050919050565b600060208201905081810360008301526150fc816150c0565b9050919050565b600061510e82613ccf565b915061511983613ccf565b92508282101561512c5761512b614dc0565b5b828203905092915050565b600061514282613729565b915061514d83613729565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561518257615181614dc0565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006151c88285614b9c565b91506151d48284614ce1565b6020820191508190509392505050565b6151ed81614042565b82525050565b600060808201905061520860008301876136ff565b61521560208301866151e4565b61522260408301856136ff565b61522f60608301846136ff565b95945050505050565b6152418161390e565b811461524c57600080fd5b50565b60008151905061525e81615238565b92915050565b60006020828403121561527a5761527961352d565b5b60006152888482850161524f565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006152ed602683614f9c565b91506152f882615291565b604082019050919050565b6000602082019050818103600083015261531c816152e0565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61535881615323565b82525050565b6000602082019050615373600083018461534f565b92915050565b60006153858284614b9c565b915081905092915050565b60008151905061539f81613f27565b92915050565b6000602082840312156153bb576153ba61352d565b5b60006153c984828501615390565b91505092915050565b60006153dd82613ccf565b91506153e883613ccf565b92508263ffffffff0382111561540157615400614dc0565b5b828201905092915050565b600080fd5b600060a082840312156154275761542661540c565b5b61543160a06135b2565b9050600061544184828501615390565b600083015250602061545584828501615390565b602083015250604061546984828501615390565b604083015250606061547d84828501615390565b60608301525060806154918482850161524f565b60808301525092915050565b600060a082840312156154b3576154b261352d565b5b60006154c184828501615411565b91505092915050565b60006154d582614a27565b91506154e083614a27565b9250828210156154f3576154f2614dc0565b5b828203905092915050565b600061550982614a27565b915061551483614a27565b9250826155245761552361518d565b5b82820490509291505056fea2646970667358221220ec0d2d50f34c8f8b4a08527a569b015487f092ad83d2dce19d7b66298e7b048464736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "blocks(uint256)": {
        "params": {
          "_blockId": "ID of submitted block"
        },
        "returns": {
          "_0": "block data (root + timestamp)"
        }
      },
      "blocksCount()": {
        "details": "number of blocks (consensus rounds) saved in this contract"
      },
      "bytesToBytes32Array(bytes,uint256,uint256)": {
        "details": "this is helper method, that extracts one merkle proof from many hashed provided as bytes",
        "params": {
          "_data": "many hashes as bytes",
          "_items": "how many hashes to extract",
          "_offset": "this is starting point for extraction"
        },
        "returns": {
          "_0": "merkle proof (array of bytes32 hashes)"
        }
      },
      "constructor": {
        "params": {
          "_allowForMixedType": "we have two \"types\" of Chain: HomeChain and ForeignChain, when we redeploying we don't want to mix up them, so we checking, if new Chain has the same type as current one. However, when we will be switching from one homechain to another one, we have to allow for this mixing up. This flag will tell contract, if this is the case.",
          "_contractRegistry": "Registry address",
          "_padding": "required \"space\" between blocks in seconds",
          "_requiredSignatures": "number of required signatures for accepting consensus submission"
        }
      },
      "getBlockId()": {
        "returns": {
          "_0": "current block ID please note, that current ID is not the same as last ID, current means that once padding pass, ID will switch to next one and it will be pointing to empty submit until submit for that ID is done"
        }
      },
      "getBlockIdAtTimestamp(uint256)": {
        "details": "calculates block ID for provided timestamp this function does not works for past timestamps",
        "params": {
          "_timestamp": "current or future timestamp"
        },
        "returns": {
          "_0": "block ID for provided timestamp"
        }
      },
      "getBlockRoot(uint32)": {
        "params": {
          "_blockId": "consensus ID"
        },
        "returns": {
          "_0": "root for provided consensus ID"
        }
      },
      "getBlockTimestamp(uint32)": {
        "params": {
          "_blockId": "consensus ID"
        },
        "returns": {
          "_0": "timestamp for provided consensus ID"
        }
      },
      "getConsensusData()": {
        "details": "getter for `_consensusData`"
      },
      "getCurrentIntValue(bytes32)": {
        "details": "getter for single FCD value in case its type is `int`",
        "params": {
          "_key": "FCD key"
        },
        "returns": {
          "timestamp": "FCD timestamp",
          "value": "FCD value"
        }
      },
      "getCurrentValue(bytes32)": {
        "details": "getter for single FCD value",
        "params": {
          "_key": "FCD key"
        },
        "returns": {
          "timestamp": "FCD timestamp",
          "value": "FCD value"
        }
      },
      "getCurrentValues(bytes32[])": {
        "details": "batch getter for FCDs",
        "params": {
          "_keys": "FCDs keys to fetch"
        },
        "returns": {
          "timestamps": "array of FCDs timestamps",
          "values": "array of FCDs values"
        }
      },
      "getLatestBlockId()": {
        "returns": {
          "_0": "last submitted block ID, please note, that on deployment, when there is no submission for this contract block for last ID will be available in previous contract"
        }
      },
      "getLeaderAddress()": {
        "returns": {
          "_0": "address of current leader"
        }
      },
      "getLeaderAddressAtTime(uint256)": {
        "params": {
          "_timestamp": "timestamp for which you want to calculate leader address"
        },
        "returns": {
          "_0": "leader address for provider timestamp"
        }
      },
      "getLeaderIndex(uint256,uint256)": {
        "params": {
          "_numberOfValidators": "total number of validators",
          "_timestamp": "timestamp for which you want to calculate index"
        },
        "returns": {
          "_0": "leader index, use it for StakingBank.addresses[index] to fetch leader address"
        }
      },
      "getName()": {
        "returns": {
          "_0": "contract name as bytes32"
        }
      },
      "getNextLeaderAddress()": {
        "returns": {
          "_0": "address of leader for next second"
        }
      },
      "getStatus()": {
        "details": "helper method that returns all important data about current state of contract",
        "returns": {
          "blockNumber": "`block.number`",
          "lastDataTimestamp": "timestamp for last submitted consensus",
          "lastId": "ID of last submitted consensus",
          "locations": "array of all validators locations",
          "minSignatures": "`this.requiredSignatures`",
          "nextBlockId": "block ID for `block.timestamp + padding`",
          "nextLeader": "leader for `block.timestamp + 1`",
          "powers": "array of all validators powers",
          "staked": "total UMB staked by validators",
          "timePadding": "`this.padding`",
          "validators": "array of all validators addresses"
        }
      },
      "hashLeaf(bytes,bytes)": {
        "details": "creates leaf hash, that has is used in merkle tree",
        "params": {
          "_key": "key under which we store the value",
          "_value": "value itself as bytes"
        },
        "returns": {
          "_0": "leaf hash"
        }
      },
      "isForeign()": {
        "returns": {
          "_0": "TRUE if contract is ForeignChain, FALSE otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverSigner(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_affidavit": "root and FCDs hashed together",
          "_r": "part of signature",
          "_s": "part of signature",
          "_v": "part of signature"
        },
        "returns": {
          "_0": "signer address"
        }
      },
      "register()": {
        "details": "this method will be called as a first method in registration process when old contract will be replaced when called, old contract address is still in registry"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPadding(uint16)": {
        "details": "setter for `padding`"
      },
      "stakingBankContract()": {
        "details": "helper method for fetching StakingBank address"
      },
      "submit(uint32,bytes32,bytes32[],uint256[],uint8[],bytes32[],bytes32[])": {
        "details": "method for submitting consensus data",
        "params": {
          "_dataTimestamp": "consensus timestamp, this is time for all data in merkle tree including FCDs",
          "_keys": "FCDs keys",
          "_r": "array of `r` part of validators signatures",
          "_root": "merkle root",
          "_s": "array of `s` part of validators signatures",
          "_v": "array of `v` part of validators signatures",
          "_values": "FCDs values"
        }
      },
      "tokenContract()": {
        "details": "helper method for fetching UMB address"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregister()": {
        "details": "this method will be called as a last method in registration process when old contract will be replaced when called, new contract address is already in registry"
      },
      "verifyProof(bytes32[],bytes32,bytes32)": {
        "details": "verifies if the leaf is valid leaf for merkle tree",
        "params": {
          "_leaf": "leaf hash",
          "_proof": "merkle proof for merkle tree",
          "_root": "merkle root"
        },
        "returns": {
          "_0": "TRUE if `_leaf` is valid, FALSE otherwise"
        }
      },
      "verifyProofForBlock(uint256,bytes32[],bytes,bytes)": {
        "details": "verifies, if provided key-value pair was part of consensus",
        "params": {
          "_blockId": "consensus ID for which we doing a check",
          "_key": "pair key",
          "_proof": "merkle proof for pair",
          "_value": "pair value"
        },
        "returns": {
          "_0": "TRUE if key-value par was part of consensus, FALSE otherwise"
        }
      },
      "verifyProofs(uint32[],bytes,uint256[],bytes32[])": {
        "details": "batch method for data verification",
        "params": {
          "_blockIds": "consensus IDs for which we doing a checks",
          "_leaves": "array of merkle leaves",
          "_proofItemsCounter": "array of counters, each counter tells how many hashes proof for each leaf has",
          "_proofs": "merkle proofs for all pair, sequence of hashes provided as bytes"
        },
        "returns": {
          "results": "array of verification results, TRUE if leaf is part of consensus, FALSE otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deprecate()": {
        "notice": "it allows to deprecate contract manually Only new Registry calls `unregister()` where we set deprecated to true In old Registries we don't have this feature, so in order to safely redeploy new Chain we will have to first deprecate current contract manually, then register new contract"
      },
      "register()": {
        "notice": "if this method needs to be called manually (not from Registry) it is important to do it as part of tx batch eg using multisig, we should prepare set of transactions and confirm them all at once"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Chain.sol:Chain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1587,
        "contract": "contracts/Chain.sol:Chain",
        "label": "_consensusData",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(ConsensusData)1568_storage"
      },
      {
        "astId": 1595,
        "contract": "contracts/Chain.sol:Chain",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1601,
        "contract": "contracts/Chain.sol:Chain",
        "label": "fcds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(FirstClassData)1557_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(FirstClassData)1557_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BaseChain.FirstClassData)",
        "numberOfBytes": "32",
        "value": "t_struct(FirstClassData)1557_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(ConsensusData)1568_storage": {
        "encoding": "inplace",
        "label": "struct BaseChain.ConsensusData",
        "members": [
          {
            "astId": 1559,
            "contract": "contracts/Chain.sol:Chain",
            "label": "blocksCountOffset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1561,
            "contract": "contracts/Chain.sol:Chain",
            "label": "sequence",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1563,
            "contract": "contracts/Chain.sol:Chain",
            "label": "lastTimestamp",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1565,
            "contract": "contracts/Chain.sol:Chain",
            "label": "padding",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1567,
            "contract": "contracts/Chain.sol:Chain",
            "label": "deprecated",
            "offset": 16,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FirstClassData)1557_storage": {
        "encoding": "inplace",
        "label": "struct BaseChain.FirstClassData",
        "members": [
          {
            "astId": 1554,
            "contract": "contracts/Chain.sol:Chain",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 1556,
            "contract": "contracts/Chain.sol:Chain",
            "label": "dataTimestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}