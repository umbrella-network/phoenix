{
  "language": "Solidity",
  "sources": {
    "contracts/onChainFeeds/UmbrellaFeedsReaderFactory.sol": {
      "content": "// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING\npragma solidity 0.8.13;\n\n\ninterface IRegistry {\n    event LogRegistered(address indexed destination, bytes32 name);\n\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\n    /// This method can be used for contracts that for some reason do not have `getName` method\n    /// @param  _names array of contract names that we want to register\n    /// @param  _destinations array of contract addresses\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\n\n    /// @dev imports new contracts and override old addresses, if they exist.\n    /// Names of contracts are fetched directly from each contract by calling `getName`\n    /// @param  _destinations array of contract addresses\n    function importContracts(address[] calldata _destinations) external;\n\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\n    /// @param _newContract address of contract that will replace old one\n    function atomicUpdate(address _newContract) external;\n\n    /// @dev similar to `getAddress` but throws when contract name not exists\n    /// @param name contract name\n    /// @return contract address registered under provided name or throws, if does not exists\n    function requireAndGetAddress(bytes32 name) external view returns (address);\n\n    /// @param name contract name in a form of bytes32\n    /// @return contract address registered under provided name\n    function getAddress(bytes32 name) external view returns (address);\n\n    /// @param _name contract name\n    /// @return contract address assigned to the name or address(0) if not exists\n    function getAddressByString(string memory _name) external view returns (address);\n\n    /// @dev helper method that converts string to bytes32,\n    /// you can use to to generate contract name\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\n}\n\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface IStakingBank is IERC20 {\n    /// @param id address of validator wallet\n    /// @param location URL of the validator API\n    struct Validator {\n        address id;\n        string location;\n    }\n\n    event LogValidatorRegistered(address indexed id);\n    event LogValidatorUpdated(address indexed id);\n    event LogValidatorRemoved(address indexed id);\n    event LogMinAmountForStake(uint256 minAmountForStake);\n\n    /// @dev setter for `minAmountForStake`\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\n\n    /// @dev allows to stake `token` by validators\n    /// Validator needs to approve StakingBank beforehand\n    /// @param _value amount of tokens to stake\n    function stake(uint256 _value) external;\n\n    /// @dev notification about approval from `_from` address on UMB token\n    /// Staking bank will stake max approved amount from `_from` address\n    /// @param _from address which approved token spend for IStakingBank\n    function receiveApproval(address _from) external returns (bool success);\n\n    /// @dev withdraws stake tokens\n    /// it throws, when balance will be less than required minimum for stake\n    /// to withdraw all use `exit`\n    function withdraw(uint256 _value) external returns (bool success);\n\n    /// @dev unstake and withdraw all tokens\n    function exit() external returns (bool success);\n\n    /// @dev creates (register) new validator\n    /// @param _id validator address\n    /// @param _location location URL of the validator API\n    function create(address _id, string calldata _location) external;\n\n    /// @dev removes validator\n    /// @param _id validator wallet\n    function remove(address _id) external;\n\n    /// @dev updates validator location\n    /// @param _id validator wallet\n    /// @param _location new validator URL\n    function update(address _id, string calldata _location) external;\n\n    /// @return total number of registered validators (with and without balance)\n    function getNumberOfValidators() external view returns (uint256);\n\n    /// @dev gets validator address for provided index\n    /// @param _ix index in array of list of all validators wallets\n    function addresses(uint256 _ix) external view returns (address);\n\n    /// @param _id address of validator\n    /// @return id address of validator\n    /// @return location URL of validator\n    function validators(address _id) external view returns (address id, string memory location);\n}\n\n\n\n/// @dev Main contract for all deviation triggered fees.\n/// This contract has build in fallback feature in case it will be replaced by newer version.\n/// Fallback is transparent for the user, no additional setup is needed.\n///\n/// How fallback feature works? If data for provided key is empty, contract will execute following procedure:\n/// 1. triggered feeds, that needs to be updated will be updated in new contract and erased from this one\n/// 2. if data is empty, check, if new deployment of UmbrellaFeeds is done, if not stop.\n/// 3. forward the call to that new contract.\n///\n/// After new deployment done it is recommended to update address to avoid fallback and reduce gas cost.\n/// In long run this is most efficient solution, better than any proxy.\ninterface IUmbrellaFeeds {\n    struct PriceData {\n        uint8 data;\n        uint24 heartbeat;\n        uint32 timestamp;\n        uint128 price;\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /// @dev method for submitting consensus data\n    /// @param _priceKeys array of keys for `_priceDatas`\n    /// @param _priceDatas PriceData signed by validators\n    /// @param _signatures validators signatures\n    // solhint-disable-next-line function-max-lines, code-complexity\n    function update(\n        bytes32[] calldata _priceKeys,\n        PriceData[] calldata _priceDatas,\n        Signature[] calldata _signatures\n    ) external;\n\n    /// @dev method for resetting data\n    /// @param _priceKeys array of keys for `_priceDatas`\n    /// @param _signatures validators signatures\n    function reset(bytes32[] calldata _priceKeys, Signature[] calldata _signatures) external;\n\n    /// @dev it will return array of price datas for provided `_keys`\n    /// In case ony of feeds timestamp is empty, fallback call will be executed for that feed.\n    /// If any of feeds fallback calls fail, function will revert.\n    /// @param _keys array of feed keys\n    /// @return data PriceData array\n    function getPricesData(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\n\n    /// @dev same as getPricesData() but does not revert on empty data.\n    function getPricesDataRaw(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\n\n    /// @dev this is main endpoint for reading feeds.\n    /// In case timestamp is empty (that means there is no data), contract will execute fallback call.\n    /// Check contract description for fallback details.\n    function getPriceData(bytes32 _key) external view returns (PriceData memory data);\n\n    /// @dev same as `getPriceData` but does not revert when no data\n    function getPriceDataRaw(bytes32 _key) external view returns (PriceData memory data);\n\n    function DECIMALS() external view returns (uint8); // solhint-disable-line func-name-mixedcase\n}\n\n/// @dev This is optional price reader for just one feed.\n/// It comes with chanilink interface that makes migration process easier.\n/// For maximum gas optimisation it is recommended to use UmbrellaFeeds directly.\ncontract UmbrellaFeedsReader {\n    /// @dev contract where all the feeds are stored\n    IUmbrellaFeeds public immutable UMBRELLA_FEEDS;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev key (hash of string key), under which feed is being stored\n    bytes32 public immutable KEY;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev decimals for feed\n    uint8 public immutable DECIMALS;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev string representation of feed key\n    string public DESCRIPTION;  // solhint-disable-line var-name-mixedcase\n\n    error FeedNotExist();\n\n    /// @param _umbrellaFeeds UmbrellaFeeds address\n    /// @param _key price data key (before hashing)\n    constructor(IUmbrellaFeeds _umbrellaFeeds, string memory _key) {\n        UMBRELLA_FEEDS = _umbrellaFeeds;\n        DESCRIPTION = _key;\n        DECIMALS = _umbrellaFeeds.DECIMALS();\n\n        bytes32 hash = keccak256(abi.encodePacked(_key));\n        KEY = hash;\n\n        // sanity check\n        _umbrellaFeeds.getPriceData(hash);\n    }\n\n    /// @dev decimals for feed\n    function decimals() external view returns (uint8) {\n        return DECIMALS;\n    }\n\n    /// @dev string representation of feed key\n    function description() external view returns (string memory) {\n        return DESCRIPTION;\n    }\n\n    /// @dev this method follows chainlink interface for easy migration, NOTE: not all returned data are covered!\n    /// latestRoundData() raise exception when there is no data, instead of returning unset values,\n    /// which could be misinterpreted as actual reported values.\n    /// It DOES NOT raise when data is outdated (based on heartbeat and last timestamp).\n    /// @notice You can save some gas by doing call directly to `UMBRELLA_FEEDS` contract.\n    /// @return uint80 originally `roundId`, not in use, always 0\n    /// @return answer price\n    /// @return uint256 originally `startedAt`, not in use, always 0\n    /// @return updatedAt last timestamp data was updated\n    /// @return uint80 originally `answeredInRound` not in use, always 0\n    function latestRoundData()\n    external\n    view\n    returns (\n        uint80 /* roundId */,\n        int256 answer,\n        uint256 /* startedAt */,\n        uint256 updatedAt,\n        uint80 /* answeredInRound */\n    )\n    {\n        IUmbrellaFeeds.PriceData memory data = UMBRELLA_FEEDS.getPriceData(KEY);\n        return (0, int256(uint256(data.price)), 0, data.timestamp, 0);\n    }\n\n    /// @dev this is main endpoint for reading feed. Feed is read from UmbrellaFeeds contract using hardcoded `KEY`.\n    /// In case timestamp is empty (that means there is no data), contract will execute fallback call.\n    /// Check UmbrellaFeeds contract description for fallback details.\n    function getPriceData() external view returns (IUmbrellaFeeds.PriceData memory) {\n        return UMBRELLA_FEEDS.getPriceData(KEY);\n    }\n\n    /// @dev same as `getPriceData` but does not revert when no data\n    function getPriceDataRaw() external view returns (IUmbrellaFeeds.PriceData memory) {\n        return UMBRELLA_FEEDS.getPriceDataRaw(KEY);\n    }\n}\n\n/// @dev Factory to deploy UmbrellaFeedsReader contract\ncontract UmbrellaFeedsReaderFactory {\n    IRegistry public immutable REGISTRY; // solhint-disable-line var-name-mixedcase\n\n    mapping (bytes32 => UmbrellaFeedsReader) public readers;\n\n    error EmptyAddress();\n\n    constructor(IRegistry _registry) {\n        if (address(_registry) == address(0)) revert EmptyAddress();\n\n        REGISTRY = _registry;\n    }\n\n    /// @dev Method to deploy new UmbrellaFeedsReader for particular key.\n    /// This deployment is optional and it can be done by anyone who needs it.\n    /// Reader can be used to simplify migration from Chainlink to Umbrella.\n    ///\n    /// Check UmbrellaFeedsReader docs for more details.\n    ///\n    /// We not using minimal proxy because it does not allow for immutable variables.\n    /// @param _key string Feed key that is registered in UmbrellaFeeds\n    /// @return reader UmbrellaFeedsReader contract address, in case anyone wants to use it from Layer1\n    function deploy(string memory _key) external returns (UmbrellaFeedsReader reader) {\n        reader = deployed(_key);\n        IUmbrellaFeeds umbrellaFeeds = IUmbrellaFeeds(REGISTRY.getAddressByString(\"UmbrellaFeeds\"));\n\n        // if UmbrellaFeeds contract is up to date, there is no need to redeploy\n        if (address(reader) != address(0) && address(reader.UMBRELLA_FEEDS()) == address(umbrellaFeeds)) {\n            return reader;\n        }\n\n        reader = new UmbrellaFeedsReader(umbrellaFeeds, _key);\n        readers[hash(_key)] = reader;\n    }\n\n    function deployed(string memory _key) public view returns (UmbrellaFeedsReader) {\n        return readers[hash(_key)];\n    }\n\n    function hash(string memory _key) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_key));\n    }\n\n    /// @dev to follow Registrable interface\n    function getName() public pure returns (bytes32) {\n        return \"UmbrellaFeedsReaderFactory\";\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}