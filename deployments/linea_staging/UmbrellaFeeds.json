{
  "address": "0x5eEd6de05623984CA0fB57746129336C14c6119C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_requiredSignatures",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArraysDataDoNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackFeedNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeedNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRequiredSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OldData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignaturesOutOfOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_PREFIX",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUIRED_SIGNATURES",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_BANK",
      "outputs": [
        {
          "internalType": "contract IStakingBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getPriceData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getPriceDataRaw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        }
      ],
      "name": "getPricesData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData[]",
          "name": "data",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        }
      ],
      "name": "getPricesDataRaw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData[]",
          "name": "data",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_priceKeys",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData[]",
          "name": "_priceDatas",
          "type": "tuple[]"
        }
      ],
      "name": "hashSubmitData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "priceData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "data",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "heartbeat",
          "type": "uint24"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_priceKeys",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_priceKeys",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "data",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "heartbeat",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.PriceData[]",
          "name": "_priceDatas",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IUmbrellaFeeds.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "verifySignatures",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe927bce54cb455358a57384c6d157bfca760f729ec26026e4efe7d2c6296dc9a",
  "receipt": {
    "to": null,
    "from": "0x66f13FDceed822E74b6a1e08e082Fa699fF36454",
    "contractAddress": "0x5eEd6de05623984CA0fB57746129336C14c6119C",
    "transactionIndex": 1,
    "gasUsed": "2427105",
    "logsBloom": "0x
    "blockHash": "0x8b5488e7478ad5b6928a75eb20017ab78a165e5d5be799325e4a9d3244990ffa",
    "transactionHash": "0xe927bce54cb455358a57384c6d157bfca760f729ec26026e4efe7d2c6296dc9a",
    "logs": [],
    "blockNumber": 671839,
    "cumulativeGasUsed": "2920618",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x92010E763d476A732021191562134c488ca92a1F",
    2,
    8
  ],
  "numDeployments": 4,
  "solcInputHash": "fddd9696c3883594e53d8bdef5d80642",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_requiredSignatures\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysDataDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackFeedNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeedNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequiredSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OldData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_PREFIX\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRED_SIGNATURES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_BANK\",\"outputs\":[{\"internalType\":\"contract IStakingBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPriceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPriceDataRaw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"getPricesData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"getPricesDataRaw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_priceKeys\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData[]\",\"name\":\"_priceDatas\",\"type\":\"tuple[]\"}],\"name\":\"hashSubmitData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"priceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_priceKeys\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IUmbrellaFeeds.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_priceKeys\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"data\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"heartbeat\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"internalType\":\"struct IUmbrellaFeeds.PriceData[]\",\"name\":\"_priceDatas\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IUmbrellaFeeds.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IUmbrellaFeeds.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"verifySignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Main contract for all deviation triggered fees. This contract has build in fallback feature in case it will be replaced by newer version. Fallback is transparent for the user, no additional setup is needed. How fallback feature works? If data for provided key is empty, contract will execute following procedure: 1. triggered feeds, that needs to be updated will be updated in new contract and erased from this one 2. if data is empty, check, if new deployment of UmbrellaFeeds is done, if not stop. 3. forward the call to that new contract. After new deployment done it is recommended to update address to avoid fallback and reduce gas cost. In long run this is most efficient solution, better than any proxy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_contractRegistry\":\"Registry address\",\"_decimals\":\"decimals for prices stored in this contract\",\"_requiredSignatures\":\"number of required signatures for accepting consensus submission\"}},\"getName()\":{\"details\":\"to follow Registrable interface\"},\"getPriceData(bytes32)\":{\"details\":\"this is main endpoint for reading feeds. In case timestamp is empty (that means there is no data), contract will execute fallback call. Check contract description for fallback details.\"},\"getPriceDataRaw(bytes32)\":{\"details\":\"same as `getPriceData` but does not revert when no data\"},\"getPricesData(bytes32[])\":{\"details\":\"it will return array of price datas for provided `_keys` In case ony of feeds timestamp is empty, fallback call will be executed for that feed. If any of feeds fallback calls fail, function will revert.\",\"params\":{\"_keys\":\"array of feed keys\"},\"returns\":{\"data\":\"PriceData array\"}},\"getPricesDataRaw(bytes32[])\":{\"details\":\"same as getPricesData() but does not revert on empty data.\"},\"hashSubmitData(bytes32[],(uint8,uint24,uint32,uint128)[])\":{\"details\":\"helper method for QA purposes\",\"returns\":{\"_0\":\"hash of data that are signed by validators (keys and priced data)\"}},\"priceData(string)\":{\"details\":\"this is only for dev debug, please use `getPriceData` directly for lower has cost and fallback functionality\"},\"recoverSigner(bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_hash\":\"hashed of data\",\"_r\":\"part of signature\",\"_s\":\"part of signature\",\"_v\":\"part of signature\"},\"returns\":{\"_0\":\"signer address\"}},\"reset(bytes32[],(uint8,bytes32,bytes32)[])\":{\"details\":\"method for resetting data\",\"params\":{\"_priceKeys\":\"array of keys for `_priceDatas`\",\"_signatures\":\"validators signatures\"}},\"update(bytes32[],(uint8,uint24,uint32,uint128)[],(uint8,bytes32,bytes32)[])\":{\"details\":\"method for submitting consensus data\",\"params\":{\"_priceDatas\":\"PriceData signed by validators\",\"_priceKeys\":\"array of keys for `_priceDatas`\",\"_signatures\":\"validators signatures\"}},\"verifySignatures(bytes32,(uint8,bytes32,bytes32)[])\":{\"details\":\"method for submitting consensus data\",\"params\":{\"_hash\":\"hash of signed data\",\"_signatures\":\"array of validators signatures\"}}},\"stateVariables\":{\"DECIMALS\":{\"details\":\"decimals for prices stored in this contract\"},\"REQUIRED_SIGNATURES\":{\"details\":\"minimal number of signatures required for accepting submission (PoA)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onChainFeeds/UmbrellaFeeds.sol\":\"UmbrellaFeeds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IRegistry {\\n    event LogRegistered(address indexed destination, bytes32 name);\\n\\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\\n    /// This method can be used for contracts that for some reason do not have `getName` method\\n    /// @param  _names array of contract names that we want to register\\n    /// @param  _destinations array of contract addresses\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\\n\\n    /// @dev imports new contracts and override old addresses, if they exist.\\n    /// Names of contracts are fetched directly from each contract by calling `getName`\\n    /// @param  _destinations array of contract addresses\\n    function importContracts(address[] calldata _destinations) external;\\n\\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\\n    /// @param _newContract address of contract that will replace old one\\n    function atomicUpdate(address _newContract) external;\\n\\n    /// @dev similar to `getAddress` but throws when contract name not exists\\n    /// @param name contract name\\n    /// @return contract address registered under provided name or throws, if does not exists\\n    function requireAndGetAddress(bytes32 name) external view returns (address);\\n\\n    /// @param name contract name in a form of bytes32\\n    /// @return contract address registered under provided name\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    /// @param _name contract name\\n    /// @return contract address assigned to the name or address(0) if not exists\\n    function getAddressByString(string memory _name) external view returns (address);\\n\\n    /// @dev helper method that converts string to bytes32,\\n    /// you can use to to generate contract name\\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\\n}\\n\",\"keccak256\":\"0xa0099ecf4182138fda7a0733407784461410c245de67c1e7ba7cd7c9595e054f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingBank is IERC20 {\\n    /// @param id address of validator wallet\\n    /// @param location URL of the validator API\\n    struct Validator {\\n        address id;\\n        string location;\\n    }\\n\\n    event LogValidatorRegistered(address indexed id);\\n    event LogValidatorUpdated(address indexed id);\\n    event LogValidatorRemoved(address indexed id);\\n    event LogMinAmountForStake(uint256 minAmountForStake);\\n\\n    /// @dev setter for `minAmountForStake`\\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\\n\\n    /// @dev allows to stake `token` by validators\\n    /// Validator needs to approve StakingBank beforehand\\n    /// @param _value amount of tokens to stake\\n    function stake(uint256 _value) external;\\n\\n    /// @dev notification about approval from `_from` address on UMB token\\n    /// Staking bank will stake max approved amount from `_from` address\\n    /// @param _from address which approved token spend for IStakingBank\\n    function receiveApproval(address _from) external returns (bool success);\\n\\n    /// @dev withdraws stake tokens\\n    /// it throws, when balance will be less than required minimum for stake\\n    /// to withdraw all use `exit`\\n    function withdraw(uint256 _value) external returns (bool success);\\n\\n    /// @dev unstake and withdraw all tokens\\n    function exit() external returns (bool success);\\n\\n    /// @dev creates (register) new validator\\n    /// @param _id validator address\\n    /// @param _location location URL of the validator API\\n    function create(address _id, string calldata _location) external;\\n\\n    /// @dev removes validator\\n    /// @param _id validator wallet\\n    function remove(address _id) external;\\n\\n    /// @dev updates validator location\\n    /// @param _id validator wallet\\n    /// @param _location new validator URL\\n    function update(address _id, string calldata _location) external;\\n\\n    /// @return total number of registered validators (with and without balance)\\n    function getNumberOfValidators() external view returns (uint256);\\n\\n    /// @dev gets validator address for provided index\\n    /// @param _ix index in array of list of all validators wallets\\n    function addresses(uint256 _ix) external view returns (address);\\n\\n    /// @param _id address of validator\\n    /// @return id address of validator\\n    /// @return location URL of validator\\n    function validators(address _id) external view returns (address id, string memory location);\\n}\\n\",\"keccak256\":\"0x2c518aeab8b0b3a364fafaec559d3ff0dc6a119f8d203fa31ef7ad667ca0f7b9\",\"license\":\"MIT\"},\"contracts/interfaces/IUmbrellaFeeds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev Main contract for all deviation triggered fees.\\n/// This contract has build in fallback feature in case it will be replaced by newer version.\\n/// Fallback is transparent for the user, no additional setup is needed.\\n///\\n/// How fallback feature works? If data for provided key is empty, contract will execute following procedure:\\n/// 1. triggered feeds, that needs to be updated will be updated in new contract and erased from this one\\n/// 2. if data is empty, check, if new deployment of UmbrellaFeeds is done, if not stop.\\n/// 3. forward the call to that new contract.\\n///\\n/// After new deployment done it is recommended to update address to avoid fallback and reduce gas cost.\\n/// In long run this is most efficient solution, better than any proxy.\\ninterface IUmbrellaFeeds {\\n    struct PriceData {\\n        uint8 data;\\n        uint24 heartbeat;\\n        uint32 timestamp;\\n        uint128 price;\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// @dev method for submitting consensus data\\n    /// @param _priceKeys array of keys for `_priceDatas`\\n    /// @param _priceDatas PriceData signed by validators\\n    /// @param _signatures validators signatures\\n    // solhint-disable-next-line function-max-lines, code-complexity\\n    function update(\\n        bytes32[] calldata _priceKeys,\\n        PriceData[] calldata _priceDatas,\\n        Signature[] calldata _signatures\\n    ) external;\\n\\n    /// @dev method for resetting data\\n    /// @param _priceKeys array of keys for `_priceDatas`\\n    /// @param _signatures validators signatures\\n    function reset(bytes32[] calldata _priceKeys, Signature[] calldata _signatures) external;\\n\\n    /// @dev it will return array of price datas for provided `_keys`\\n    /// In case ony of feeds timestamp is empty, fallback call will be executed for that feed.\\n    /// If any of feeds fallback calls fail, function will revert.\\n    /// @param _keys array of feed keys\\n    /// @return data PriceData array\\n    function getPricesData(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\\n\\n    /// @dev same as getPricesData() but does not revert on empty data.\\n    function getPricesDataRaw(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\\n\\n    /// @dev this is main endpoint for reading feeds.\\n    /// In case timestamp is empty (that means there is no data), contract will execute fallback call.\\n    /// Check contract description for fallback details.\\n    function getPriceData(bytes32 _key) external view returns (PriceData memory data);\\n\\n    /// @dev same as `getPriceData` but does not revert when no data\\n    function getPriceDataRaw(bytes32 _key) external view returns (PriceData memory data);\\n\\n    function DECIMALS() external view returns (uint8); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0xc6b62890b0e642a78138eeddfcb8e14102b42c8926e4894e9f89b77314e9d0fa\",\"license\":\"MIT\"},\"contracts/onChainFeeds/UmbrellaFeeds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IUmbrellaFeeds.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IStakingBank.sol\\\";\\n\\n/// @dev Main contract for all deviation triggered fees.\\n/// This contract has build in fallback feature in case it will be replaced by newer version.\\n/// Fallback is transparent for the user, no additional setup is needed.\\n///\\n/// How fallback feature works? If data for provided key is empty, contract will execute following procedure:\\n/// 1. triggered feeds, that needs to be updated will be updated in new contract and erased from this one\\n/// 2. if data is empty, check, if new deployment of UmbrellaFeeds is done, if not stop.\\n/// 3. forward the call to that new contract.\\n///\\n/// After new deployment done it is recommended to update address to avoid fallback and reduce gas cost.\\n/// In long run this is most efficient solution, better than any proxy.\\ncontract UmbrellaFeeds is IUmbrellaFeeds {\\n    bytes constant public ETH_PREFIX = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n    string constant public NAME = \\\"UmbrellaFeeds\\\";\\n\\n    IStakingBank public immutable STAKING_BANK;  // solhint-disable-line var-name-mixedcase\\n    IRegistry public immutable REGISTRY;  // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev minimal number of signatures required for accepting submission (PoA)\\n    uint16 public immutable REQUIRED_SIGNATURES; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev decimals for prices stored in this contract\\n    uint8 public immutable DECIMALS;  // solhint-disable-line var-name-mixedcase\\n\\n    mapping (bytes32 => PriceData) public prices;\\n\\n    error ArraysDataDoNotMatch();\\n    error FeedNotExist();\\n    error FallbackFeedNotExist();\\n    error NotEnoughSignatures();\\n    error InvalidRequiredSignatures();\\n    error SignaturesOutOfOrder();\\n    error OldData();\\n\\n    /// @param _contractRegistry Registry address\\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\\n    /// @param _decimals decimals for prices stored in this contract\\n    constructor(\\n        IRegistry _contractRegistry,\\n        uint16 _requiredSignatures,\\n        uint8 _decimals\\n    ) {\\n        if (_requiredSignatures == 0) revert InvalidRequiredSignatures();\\n\\n        REGISTRY = _contractRegistry;\\n        REQUIRED_SIGNATURES = _requiredSignatures;\\n        STAKING_BANK = IStakingBank(_contractRegistry.requireAndGetAddress(\\\"StakingBank\\\"));\\n        DECIMALS = _decimals;\\n    }\\n\\n    /// @inheritdoc IUmbrellaFeeds\\n    function update(\\n        bytes32[] calldata _priceKeys,\\n        PriceData[] calldata _priceDatas,\\n        Signature[] calldata _signatures\\n    ) external {\\n        // below two checks are only for pretty errors, so we can safe gas and allow for raw revert\\n        // if (_priceKeys.length != _priceDatas.length) revert ArraysDataDoNotMatch();\\n\\n        bytes32 priceDataHash = keccak256(abi.encode(_priceKeys, _priceDatas));\\n        verifySignatures(priceDataHash, _signatures);\\n\\n        uint256 i;\\n\\n        while (i < _priceDatas.length) {\\n            // we do not allow for older prices\\n            // at the same time it prevents from reusing signatures\\n            if (prices[_priceKeys[i]].timestamp >= _priceDatas[i].timestamp) revert OldData();\\n\\n            prices[_priceKeys[i]] = _priceDatas[i];\\n\\n            // atm there is no need for events, so in order to save gas, we do not emit any\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @inheritdoc IUmbrellaFeeds\\n    function reset(bytes32[] calldata _priceKeys, Signature[] calldata _signatures) external {\\n        bytes32 resetHash = keccak256(abi.encodePacked(_priceKeys, \\\"RESET\\\"));\\n        verifySignatures(resetHash, _signatures);\\n\\n        for (uint256 i; i < _priceKeys.length;) {\\n            delete prices[_priceKeys[i]];\\n            // atm there is no need for events, so in order to save gas, we do not emit any\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @dev method for submitting consensus data\\n    /// @param _hash hash of signed data\\n    /// @param _signatures array of validators signatures\\n    // ss solhint-disable-next-line function-max-lines, code-complexity\\n    function verifySignatures(bytes32 _hash, Signature[] calldata _signatures) public view {\\n        address prevSigner = address(0x0);\\n\\n        if (_signatures.length < REQUIRED_SIGNATURES) revert NotEnoughSignatures();\\n\\n        // to save gas we check only required number of signatures\\n        // case, where you can have part of signatures invalid but still enough valid in total is not supported\\n        for (uint256 i; i < REQUIRED_SIGNATURES;) {\\n            address signer = recoverSigner(_hash, _signatures[i].v, _signatures[i].r, _signatures[i].s);\\n            if (prevSigner >= signer) revert SignaturesOutOfOrder();\\n\\n            // because we check only required number of signatures, any invalid one will cause revert\\n            if (STAKING_BANK.balanceOf(signer) == 0) revert NotEnoughSignatures();\\n\\n            prevSigner = signer;\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @param _hash hashed of data\\n    /// @param _v part of signature\\n    /// @param _r part of signature\\n    /// @param _s part of signature\\n    /// @return signer address\\n    function recoverSigner(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(ETH_PREFIX, _hash));\\n        return ecrecover(hash, _v, _r, _s);\\n    }\\n\\n    /// @dev helper method for QA purposes\\n    /// @return hash of data that are signed by validators (keys and priced data)\\n    function hashSubmitData(bytes32[] calldata _priceKeys, PriceData[] calldata _priceDatas)\\n        external\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_priceKeys, _priceDatas));\\n    }\\n\\n    /// @inheritdoc IUmbrellaFeeds\\n    function getPricesData(bytes32[] calldata _keys) external view returns (PriceData[] memory data) {\\n        data = new PriceData[](_keys.length);\\n\\n        for (uint256 i; i < _keys.length;) {\\n            data[i] = prices[_keys[i]];\\n\\n            if (data[i].timestamp == 0) {\\n                data[i] = _fallbackCall(_keys[i]);\\n            }\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @inheritdoc IUmbrellaFeeds\\n    function getPricesDataRaw(bytes32[] calldata _keys) external view returns (PriceData[] memory data) {\\n        data = new PriceData[](_keys.length);\\n\\n        for (uint256 i; i < _keys.length;) {\\n            data[i] = prices[_keys[i]];\\n\\n            if (data[i].timestamp == 0) {\\n                data[i] = _fallbackCallRaw(_keys[i]);\\n            }\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @dev this is only for dev debug,\\n    /// please use `getPriceData` directly for lower has cost and fallback functionality\\n    function priceData(string memory _key) external view returns (PriceData memory) {\\n        return prices[keccak256(abi.encodePacked(_key))];\\n    }\\n\\n    /// @inheritdoc IUmbrellaFeeds\\n    function getPriceData(bytes32 _key) external view returns (PriceData memory data) {\\n        data = prices[_key];\\n\\n        if (data.timestamp == 0) {\\n            data = _fallbackCall(_key);\\n        }\\n    }\\n\\n    /// @inheritdoc IUmbrellaFeeds\\n    function getPriceDataRaw(bytes32 _key) external view returns (PriceData memory data) {\\n        data = prices[_key];\\n\\n        if (data.timestamp == 0) {\\n            data = _fallbackCallRaw(_key);\\n        }\\n    }\\n\\n    /// @dev to follow Registrable interface\\n    function getName() public pure returns (bytes32) {\\n        return \\\"UmbrellaFeeds\\\";\\n    }\\n\\n    function _fallbackCall(bytes32 _key) internal view returns (PriceData memory) {\\n        address umbrellaFeeds = REGISTRY.getAddressByString(NAME);\\n\\n        // if contract was NOT updated - revert\\n        if (umbrellaFeeds == address(this)) revert FeedNotExist();\\n\\n        return UmbrellaFeeds(umbrellaFeeds).getPriceDataRaw(_key);\\n    }\\n\\n    function _fallbackCallRaw(bytes32 _key) internal view returns (PriceData memory data) {\\n        address umbrellaFeeds = REGISTRY.getAddress(getName());\\n\\n        // if contract was updated, we do a fallback call\\n        if (umbrellaFeeds != address(this) && umbrellaFeeds != address(0)) {\\n            return UmbrellaFeeds(umbrellaFeeds).getPriceDataRaw(_key);\\n        }\\n\\n        // else - we return empty data\\n    }\\n}\\n\",\"keccak256\":\"0x5cf508382dfa6d1397c9e88348be0b26e66b9ad247c681d0a11086e6e02fc89d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002e8c38038062002e8c83398181016040528101906200003891906200027d565b60008261ffff160362000077576040517f458bb42100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508161ffff1660c08161ffff16815250508273ffffffffffffffffffffffffffffffffffffffff166346bcb49d6040518163ffffffff1660e01b8152600401620000f490620002ff565b602060405180830381865afa15801562000112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013891906200034b565b73ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060ff1660e08160ff16815250505050506200037d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b48262000187565b9050919050565b6000620001c882620001a7565b9050919050565b620001da81620001bb565b8114620001e657600080fd5b50565b600081519050620001fa81620001cf565b92915050565b600061ffff82169050919050565b620002198162000200565b81146200022557600080fd5b50565b60008151905062000239816200020e565b92915050565b600060ff82169050919050565b62000257816200023f565b81146200026357600080fd5b50565b60008151905062000277816200024c565b92915050565b60008060006060848603121562000299576200029862000182565b5b6000620002a986828701620001e9565b9350506020620002bc8682870162000228565b9250506040620002cf8682870162000266565b9150509250925092565b7f5374616b696e6742616e6b000000000000000000000000000000000000000000815250565b60006020820190506200031560008301620002d9565b919050565b6200032581620001a7565b81146200033157600080fd5b50565b60008151905062000345816200031a565b92915050565b60006020828403121562000364576200036362000182565b5b6000620003748482850162000334565b91505092915050565b60805160a05160c05160e051612ab2620003da60003960006108a4015260008181610652015281816106b60152610d89015260008181610396015281816111ac01526113500152600081816107bb01526110c10152612ab26000f3fe608060405234801561001057600080fd5b50600436106100e65760003560e01c806306433b1b146100eb57806314de7a241461010957806317c5d7981461013957806317d7de7c1461016957806318445a0d1461018757806324c89a49146101b757806326559877146101d55780632e0f2625146101f157806343fa62111461020f57806360846bc61461023f5780636491c82f1461027257806395f1cf30146102a25780639ac18b19146102be5780639e551beb146102dc578063a3f4df7e146102f8578063b8479b7c14610316578063c65a53ad14610346578063d45167d014610364575b600080fd5b6100f3610394565b60405161010091906115cd565b60405180910390f35b610123600480360381019061011e9190611742565b6103b8565b6040516101309190611864565b60405180910390f35b610153600480360381019061014e91906118b5565b6104ba565b6040516101609190611864565b60405180910390f35b6101716105b4565b60405161017e91906118f1565b60405180910390f35b6101a1600480360381019061019c91906119c2565b6105dc565b6040516101ae91906118f1565b60405180910390f35b6101bf610615565b6040516101cc9190611acb565b60405180910390f35b6101ef60048036038101906101ea9190611b43565b61064e565b005b6101f96108a2565b6040516102069190611bb2565b60405180910390f35b610229600480360381019061022491906118b5565b6108c6565b6040516102369190611864565b60405180910390f35b610259600480360381019061025491906118b5565b6109c0565b6040516102699493929190611bfa565b60405180910390f35b61028c60048036038101906102879190611c3f565b610a38565b6040516102999190611d90565b60405180910390f35b6102bc60048036038101906102b79190611db2565b610c26565b005b6102c6610d87565b6040516102d39190611e83565b60405180910390f35b6102f660048036038101906102f19190611e9e565b610dab565b005b610300610e98565b60405161030d9190611f74565b60405180910390f35b610330600480360381019061032b9190611c3f565b610ed1565b60405161033d9190611d90565b60405180910390f35b61034e6110bf565b60405161035b9190611fb7565b60405180910390f35b61037e60048036038101906103799190611ffe565b6110e3565b60405161038b9190612086565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6103c0611506565b600080836040516020016103d491906120dd565b6040516020818303038152906040528051906020012081526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509050919050565b6104c2611506565b6000808381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090506000816040015163ffffffff16036105af576105ac826111a0565b90505b919050565b60007f556d6272656c6c61466565647300000000000000000000000000000000000000905090565b6000848484846040516020016105f59493929190612352565b604051602081830303815290604052805190602001209050949350505050565b6040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525081565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff168383905010156106b1576040517fe246dc6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b7f000000000000000000000000000000000000000000000000000000000000000061ffff1681101561089b576000610750868686858181106106f9576106f861238d565b5b905060600201600001602081019061071191906123bc565b8787868181106107245761072361238d565b5b905060600201602001358888878181106107415761074061238d565b5b905060600201604001356110e3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106107b7576040517f9079f69b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016108129190612086565b602060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610853919061241f565b0361088a576040517fe246dc6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8092508180600101925050506106b4565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108ce611506565b6000808381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090506000816040015163ffffffff16036109bb576109b882611344565b90505b919050565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900462ffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a90046fffffffffffffffffffffffffffffffff16905084565b60608282905067ffffffffffffffff811115610a5757610a56611617565b5b604051908082528060200260200182016040528015610a9057816020015b610a7d611506565b815260200190600190039081610a755790505b50905060005b83839050811015610c1f57600080858584818110610ab757610ab661238d565b5b9050602002013581526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050828281518110610b9a57610b9961238d565b5b60200260200101819052506000828281518110610bba57610bb961238d565b5b60200260200101516040015163ffffffff1603610c1257610bf3848483818110610be757610be661238d565b5b905060200201356111a0565b828281518110610c0657610c0561238d565b5b60200260200101819052505b8080600101915050610a96565b5092915050565b600086868686604051602001610c3f9493929190612352565b604051602081830303815290604052805190602001209050610c6281848461064e565b60005b85859050811015610d7d57858582818110610c8357610c8261238d565b5b9050608002016040016020810190610c9b919061244c565b63ffffffff166000808a8a85818110610cb757610cb661238d565b5b90506020020135815260200190815260200160002060000160049054906101000a900463ffffffff1663ffffffff1610610d1d576040517f1251b2f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858582818110610d3057610d2f61238d565b5b9050608002016000808a8a85818110610d4c57610d4b61238d565b5b9050602002013581526020019081526020016000208181610d6d9190612776565b9050508080600101915050610c65565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008484604051602001610dc0929190612837565b604051602081830303815290604052805190602001209050610de381848461064e565b60005b85859050811015610e9057600080878784818110610e0757610e0661238d565b5b905060200201358152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549062ffffff02191690556000820160046101000a81549063ffffffff02191690556000820160086101000a8154906fffffffffffffffffffffffffffffffff021916905550508080600101915050610de6565b505050505050565b6040518060400160405280600d81526020017f556d6272656c6c6146656564730000000000000000000000000000000000000081525081565b60608282905067ffffffffffffffff811115610ef057610eef611617565b5b604051908082528060200260200182016040528015610f2957816020015b610f16611506565b815260200190600190039081610f0e5790505b50905060005b838390508110156110b857600080858584818110610f5057610f4f61238d565b5b9050602002013581526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250508282815181106110335761103261238d565b5b602002602001018190525060008282815181106110535761105261238d565b5b60200260200101516040015163ffffffff16036110ab5761108c8484838181106110805761107f61238d565b5b90506020020135611344565b82828151811061109f5761109e61238d565b5b60200260200101819052505b8080600101915050610f2f565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508660405160200161112e9291906128b8565b6040516020818303038152906040528051906020012090506001818686866040516000815260200160405260405161116994939291906128e0565b6020604051602081039080840390855afa15801561118b573d6000803e3d6000fd5b50505060206040510351915050949350505050565b6111a8611506565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321f8a7216111ee6105b4565b6040518263ffffffff1660e01b815260040161120a91906118f1565b602060405180830381865afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190612951565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156112b65750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561133d578073ffffffffffffffffffffffffffffffffffffffff166317c5d798846040518263ffffffff1660e01b81526004016112f491906118f1565b608060405180830381865afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113359190612a4f565b91505061133f565b505b919050565b61134c611506565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8f98f886040518060400160405280600d81526020017f556d6272656c6c614665656473000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016113dc9190611f74565b602060405180830381865afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190612951565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611484576040517f15647ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166317c5d798846040518263ffffffff1660e01b81526004016114bd91906118f1565b608060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190612a4f565b915050919050565b6040518060800160405280600060ff168152602001600062ffffff168152602001600063ffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061159361158e6115898461154e565b61156e565b61154e565b9050919050565b60006115a582611578565b9050919050565b60006115b78261159a565b9050919050565b6115c7816115ac565b82525050565b60006020820190506115e260008301846115be565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61164f82611606565b810181811067ffffffffffffffff8211171561166e5761166d611617565b5b80604052505050565b60006116816115e8565b905061168d8282611646565b919050565b600067ffffffffffffffff8211156116ad576116ac611617565b5b6116b682611606565b9050602081019050919050565b82818337600083830152505050565b60006116e56116e084611692565b611677565b90508281526020810184848401111561170157611700611601565b5b61170c8482856116c3565b509392505050565b600082601f830112611729576117286115fc565b5b81356117398482602086016116d2565b91505092915050565b600060208284031215611758576117576115f2565b5b600082013567ffffffffffffffff811115611776576117756115f7565b5b61178284828501611714565b91505092915050565b600060ff82169050919050565b6117a18161178b565b82525050565b600062ffffff82169050919050565b6117bf816117a7565b82525050565b600063ffffffff82169050919050565b6117de816117c5565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611809816117e4565b82525050565b6080820160008201516118256000850182611798565b50602082015161183860208501826117b6565b50604082015161184b60408501826117d5565b50606082015161185e6060850182611800565b50505050565b6000608082019050611879600083018461180f565b92915050565b6000819050919050565b6118928161187f565b811461189d57600080fd5b50565b6000813590506118af81611889565b92915050565b6000602082840312156118cb576118ca6115f2565b5b60006118d9848285016118a0565b91505092915050565b6118eb8161187f565b82525050565b600060208201905061190660008301846118e2565b92915050565b600080fd5b600080fd5b60008083601f84011261192c5761192b6115fc565b5b8235905067ffffffffffffffff8111156119495761194861190c565b5b60208301915083602082028301111561196557611964611911565b5b9250929050565b60008083601f840112611982576119816115fc565b5b8235905067ffffffffffffffff81111561199f5761199e61190c565b5b6020830191508360808202830111156119bb576119ba611911565b5b9250929050565b600080600080604085870312156119dc576119db6115f2565b5b600085013567ffffffffffffffff8111156119fa576119f96115f7565b5b611a0687828801611916565b9450945050602085013567ffffffffffffffff811115611a2957611a286115f7565b5b611a358782880161196c565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a7d578082015181840152602081019050611a62565b83811115611a8c576000848401525b50505050565b6000611a9d82611a43565b611aa78185611a4e565b9350611ab7818560208601611a5f565b611ac081611606565b840191505092915050565b60006020820190508181036000830152611ae58184611a92565b905092915050565b60008083601f840112611b0357611b026115fc565b5b8235905067ffffffffffffffff811115611b2057611b1f61190c565b5b602083019150836060820283011115611b3c57611b3b611911565b5b9250929050565b600080600060408486031215611b5c57611b5b6115f2565b5b6000611b6a868287016118a0565b935050602084013567ffffffffffffffff811115611b8b57611b8a6115f7565b5b611b9786828701611aed565b92509250509250925092565b611bac8161178b565b82525050565b6000602082019050611bc76000830184611ba3565b92915050565b611bd6816117a7565b82525050565b611be5816117c5565b82525050565b611bf4816117e4565b82525050565b6000608082019050611c0f6000830187611ba3565b611c1c6020830186611bcd565b611c296040830185611bdc565b611c366060830184611beb565b95945050505050565b60008060208385031215611c5657611c556115f2565b5b600083013567ffffffffffffffff811115611c7457611c736115f7565b5b611c8085828601611916565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151611cce6000850182611798565b506020820151611ce160208501826117b6565b506040820151611cf460408501826117d5565b506060820151611d076060850182611800565b50505050565b6000611d198383611cb8565b60808301905092915050565b6000602082019050919050565b6000611d3d82611c8c565b611d478185611c97565b9350611d5283611ca8565b8060005b83811015611d83578151611d6a8882611d0d565b9750611d7583611d25565b925050600181019050611d56565b5085935050505092915050565b60006020820190508181036000830152611daa8184611d32565b905092915050565b60008060008060008060608789031215611dcf57611dce6115f2565b5b600087013567ffffffffffffffff811115611ded57611dec6115f7565b5b611df989828a01611916565b9650965050602087013567ffffffffffffffff811115611e1c57611e1b6115f7565b5b611e2889828a0161196c565b9450945050604087013567ffffffffffffffff811115611e4b57611e4a6115f7565b5b611e5789828a01611aed565b92509250509295509295509295565b600061ffff82169050919050565b611e7d81611e66565b82525050565b6000602082019050611e986000830184611e74565b92915050565b60008060008060408587031215611eb857611eb76115f2565b5b600085013567ffffffffffffffff811115611ed657611ed56115f7565b5b611ee287828801611916565b9450945050602085013567ffffffffffffffff811115611f0557611f046115f7565b5b611f1187828801611aed565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000611f4682611f1f565b611f508185611f2a565b9350611f60818560208601611a5f565b611f6981611606565b840191505092915050565b60006020820190508181036000830152611f8e8184611f3b565b905092915050565b6000611fa18261159a565b9050919050565b611fb181611f96565b82525050565b6000602082019050611fcc6000830184611fa8565b92915050565b611fdb8161178b565b8114611fe657600080fd5b50565b600081359050611ff881611fd2565b92915050565b60008060008060808587031215612018576120176115f2565b5b6000612026878288016118a0565b945050602061203787828801611fe9565b9350506040612048878288016118a0565b9250506060612059878288016118a0565b91505092959194509250565b60006120708261154e565b9050919050565b61208081612065565b82525050565b600060208201905061209b6000830184612077565b92915050565b600081905092915050565b60006120b782611f1f565b6120c181856120a1565b93506120d1818560208601611a5f565b80840191505092915050565b60006120e982846120ac565b915081905092915050565b600082825260208201905092915050565b600080fd5b600061211683856120f4565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561214957612148612105565b5b60208302925061215a8385846116c3565b82840190509392505050565b6000819050919050565b600061217f6020840184611fe9565b905092915050565b612190816117a7565b811461219b57600080fd5b50565b6000813590506121ad81612187565b92915050565b60006121c2602084018461219e565b905092915050565b6121d3816117c5565b81146121de57600080fd5b50565b6000813590506121f0816121ca565b92915050565b600061220560208401846121e1565b905092915050565b612216816117e4565b811461222157600080fd5b50565b6000813590506122338161220d565b92915050565b60006122486020840184612224565b905092915050565b608082016122616000830183612170565b61226e6000850182611798565b5061227c60208301836121b3565b61228960208501826117b6565b5061229760408301836121f6565b6122a460408501826117d5565b506122b26060830183612239565b6122bf6060850182611800565b50505050565b60006122d18383612250565b60808301905092915050565b600082905092915050565b6000608082019050919050565b60006123018385611c97565b935061230c82612166565b8060005b858110156123455761232282846122dd565b61232c88826122c5565b9750612337836122e8565b925050600181019050612310565b5085925050509392505050565b6000604082019050818103600083015261236d81868861210a565b905081810360208301526123828184866122f5565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156123d2576123d16115f2565b5b60006123e084828501611fe9565b91505092915050565b6000819050919050565b6123fc816123e9565b811461240757600080fd5b50565b600081519050612419816123f3565b92915050565b600060208284031215612435576124346115f2565b5b60006124438482850161240a565b91505092915050565b600060208284031215612462576124616115f2565b5b6000612470848285016121e1565b91505092915050565b6000813561248681611fd2565b80915050919050565b60008160001b9050919050565b600060ff6124a98461248f565b9350801983169250808416831791505092915050565b60006124da6124d56124d08461178b565b61156e565b61178b565b9050919050565b6000819050919050565b6124f4826124bf565b612507612500826124e1565b835461249c565b8255505050565b6000813561251b81612187565b80915050919050565b60008160081b9050919050565b600063ffffff0061254184612524565b9350801983169250808416831791505092915050565b600061257261256d612568846117a7565b61156e565b6117a7565b9050919050565b6000819050919050565b61258c82612557565b61259f61259882612579565b8354612531565b8255505050565b600081356125b3816121ca565b80915050919050565b60008160201b9050919050565b600067ffffffff000000006125dd846125bc565b9350801983169250808416831791505092915050565b600061260e612609612604846117c5565b61156e565b6117c5565b9050919050565b6000819050919050565b612628826125f3565b61263b61263482612615565b83546125c9565b8255505050565b6000813561264f8161220d565b80915050919050565b60008160401b9050919050565b600077ffffffffffffffffffffffffffffffff000000000000000061268984612658565b9350801983169250808416831791505092915050565b60006126ba6126b56126b0846117e4565b61156e565b6117e4565b9050919050565b6000819050919050565b6126d48261269f565b6126e76126e0826126c1565b8354612665565b8255505050565b60008101600083018061270081612479565b905061270c81846124eb565b5050506000810160208301806127218161250e565b905061272d8184612583565b505050600081016040830180612742816125a6565b905061274e818461261f565b50505060008101606083018061276381612642565b905061276f81846126cb565b5050505050565b61278082826126ee565b5050565b600081905092915050565b600061279b8385612784565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156127ce576127cd612105565b5b6020830292506127df8385846116c3565b82840190509392505050565b7f5245534554000000000000000000000000000000000000000000000000000000600082015250565b60006128216005836120a1565b915061282c826127eb565b600582019050919050565b600061284482848661278f565b915061284f82612814565b91508190509392505050565b600081905092915050565b600061287182611a43565b61287b818561285b565b935061288b818560208601611a5f565b80840191505092915050565b6000819050919050565b6128b26128ad8261187f565b612897565b82525050565b60006128c48285612866565b91506128d082846128a1565b6020820191508190509392505050565b60006080820190506128f560008301876118e2565b6129026020830186611ba3565b61290f60408301856118e2565b61291c60608301846118e2565b95945050505050565b61292e81612065565b811461293957600080fd5b50565b60008151905061294b81612925565b92915050565b600060208284031215612967576129666115f2565b5b60006129758482850161293c565b91505092915050565b600080fd5b60008151905061299281611fd2565b92915050565b6000815190506129a781612187565b92915050565b6000815190506129bc816121ca565b92915050565b6000815190506129d18161220d565b92915050565b6000608082840312156129ed576129ec61297e565b5b6129f76080611677565b90506000612a0784828501612983565b6000830152506020612a1b84828501612998565b6020830152506040612a2f848285016129ad565b6040830152506060612a43848285016129c2565b60608301525092915050565b600060808284031215612a6557612a646115f2565b5b6000612a73848285016129d7565b9150509291505056fea2646970667358221220f70b17694892ff157315c3f6adc4c0b93c7f46d079df21fda3f4412ba2ef422464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e65760003560e01c806306433b1b146100eb57806314de7a241461010957806317c5d7981461013957806317d7de7c1461016957806318445a0d1461018757806324c89a49146101b757806326559877146101d55780632e0f2625146101f157806343fa62111461020f57806360846bc61461023f5780636491c82f1461027257806395f1cf30146102a25780639ac18b19146102be5780639e551beb146102dc578063a3f4df7e146102f8578063b8479b7c14610316578063c65a53ad14610346578063d45167d014610364575b600080fd5b6100f3610394565b60405161010091906115cd565b60405180910390f35b610123600480360381019061011e9190611742565b6103b8565b6040516101309190611864565b60405180910390f35b610153600480360381019061014e91906118b5565b6104ba565b6040516101609190611864565b60405180910390f35b6101716105b4565b60405161017e91906118f1565b60405180910390f35b6101a1600480360381019061019c91906119c2565b6105dc565b6040516101ae91906118f1565b60405180910390f35b6101bf610615565b6040516101cc9190611acb565b60405180910390f35b6101ef60048036038101906101ea9190611b43565b61064e565b005b6101f96108a2565b6040516102069190611bb2565b60405180910390f35b610229600480360381019061022491906118b5565b6108c6565b6040516102369190611864565b60405180910390f35b610259600480360381019061025491906118b5565b6109c0565b6040516102699493929190611bfa565b60405180910390f35b61028c60048036038101906102879190611c3f565b610a38565b6040516102999190611d90565b60405180910390f35b6102bc60048036038101906102b79190611db2565b610c26565b005b6102c6610d87565b6040516102d39190611e83565b60405180910390f35b6102f660048036038101906102f19190611e9e565b610dab565b005b610300610e98565b60405161030d9190611f74565b60405180910390f35b610330600480360381019061032b9190611c3f565b610ed1565b60405161033d9190611d90565b60405180910390f35b61034e6110bf565b60405161035b9190611fb7565b60405180910390f35b61037e60048036038101906103799190611ffe565b6110e3565b60405161038b9190612086565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6103c0611506565b600080836040516020016103d491906120dd565b6040516020818303038152906040528051906020012081526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509050919050565b6104c2611506565b6000808381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090506000816040015163ffffffff16036105af576105ac826111a0565b90505b919050565b60007f556d6272656c6c61466565647300000000000000000000000000000000000000905090565b6000848484846040516020016105f59493929190612352565b604051602081830303815290604052805190602001209050949350505050565b6040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525081565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff168383905010156106b1576040517fe246dc6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b7f000000000000000000000000000000000000000000000000000000000000000061ffff1681101561089b576000610750868686858181106106f9576106f861238d565b5b905060600201600001602081019061071191906123bc565b8787868181106107245761072361238d565b5b905060600201602001358888878181106107415761074061238d565b5b905060600201604001356110e3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106107b7576040517f9079f69b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016108129190612086565b602060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610853919061241f565b0361088a576040517fe246dc6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8092508180600101925050506106b4565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108ce611506565b6000808381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090506000816040015163ffffffff16036109bb576109b882611344565b90505b919050565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900462ffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a90046fffffffffffffffffffffffffffffffff16905084565b60608282905067ffffffffffffffff811115610a5757610a56611617565b5b604051908082528060200260200182016040528015610a9057816020015b610a7d611506565b815260200190600190039081610a755790505b50905060005b83839050811015610c1f57600080858584818110610ab757610ab661238d565b5b9050602002013581526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050828281518110610b9a57610b9961238d565b5b60200260200101819052506000828281518110610bba57610bb961238d565b5b60200260200101516040015163ffffffff1603610c1257610bf3848483818110610be757610be661238d565b5b905060200201356111a0565b828281518110610c0657610c0561238d565b5b60200260200101819052505b8080600101915050610a96565b5092915050565b600086868686604051602001610c3f9493929190612352565b604051602081830303815290604052805190602001209050610c6281848461064e565b60005b85859050811015610d7d57858582818110610c8357610c8261238d565b5b9050608002016040016020810190610c9b919061244c565b63ffffffff166000808a8a85818110610cb757610cb661238d565b5b90506020020135815260200190815260200160002060000160049054906101000a900463ffffffff1663ffffffff1610610d1d576040517f1251b2f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858582818110610d3057610d2f61238d565b5b9050608002016000808a8a85818110610d4c57610d4b61238d565b5b9050602002013581526020019081526020016000208181610d6d9190612776565b9050508080600101915050610c65565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008484604051602001610dc0929190612837565b604051602081830303815290604052805190602001209050610de381848461064e565b60005b85859050811015610e9057600080878784818110610e0757610e0661238d565b5b905060200201358152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549062ffffff02191690556000820160046101000a81549063ffffffff02191690556000820160086101000a8154906fffffffffffffffffffffffffffffffff021916905550508080600101915050610de6565b505050505050565b6040518060400160405280600d81526020017f556d6272656c6c6146656564730000000000000000000000000000000000000081525081565b60608282905067ffffffffffffffff811115610ef057610eef611617565b5b604051908082528060200260200182016040528015610f2957816020015b610f16611506565b815260200190600190039081610f0e5790505b50905060005b838390508110156110b857600080858584818110610f5057610f4f61238d565b5b9050602002013581526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250508282815181106110335761103261238d565b5b602002602001018190525060008282815181106110535761105261238d565b5b60200260200101516040015163ffffffff16036110ab5761108c8484838181106110805761107f61238d565b5b90506020020135611344565b82828151811061109f5761109e61238d565b5b60200260200101819052505b8080600101915050610f2f565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508660405160200161112e9291906128b8565b6040516020818303038152906040528051906020012090506001818686866040516000815260200160405260405161116994939291906128e0565b6020604051602081039080840390855afa15801561118b573d6000803e3d6000fd5b50505060206040510351915050949350505050565b6111a8611506565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166321f8a7216111ee6105b4565b6040518263ffffffff1660e01b815260040161120a91906118f1565b602060405180830381865afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190612951565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156112b65750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561133d578073ffffffffffffffffffffffffffffffffffffffff166317c5d798846040518263ffffffff1660e01b81526004016112f491906118f1565b608060405180830381865afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113359190612a4f565b91505061133f565b505b919050565b61134c611506565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8f98f886040518060400160405280600d81526020017f556d6272656c6c614665656473000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016113dc9190611f74565b602060405180830381865afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190612951565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611484576040517f15647ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166317c5d798846040518263ffffffff1660e01b81526004016114bd91906118f1565b608060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190612a4f565b915050919050565b6040518060800160405280600060ff168152602001600062ffffff168152602001600063ffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061159361158e6115898461154e565b61156e565b61154e565b9050919050565b60006115a582611578565b9050919050565b60006115b78261159a565b9050919050565b6115c7816115ac565b82525050565b60006020820190506115e260008301846115be565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61164f82611606565b810181811067ffffffffffffffff8211171561166e5761166d611617565b5b80604052505050565b60006116816115e8565b905061168d8282611646565b919050565b600067ffffffffffffffff8211156116ad576116ac611617565b5b6116b682611606565b9050602081019050919050565b82818337600083830152505050565b60006116e56116e084611692565b611677565b90508281526020810184848401111561170157611700611601565b5b61170c8482856116c3565b509392505050565b600082601f830112611729576117286115fc565b5b81356117398482602086016116d2565b91505092915050565b600060208284031215611758576117576115f2565b5b600082013567ffffffffffffffff811115611776576117756115f7565b5b61178284828501611714565b91505092915050565b600060ff82169050919050565b6117a18161178b565b82525050565b600062ffffff82169050919050565b6117bf816117a7565b82525050565b600063ffffffff82169050919050565b6117de816117c5565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611809816117e4565b82525050565b6080820160008201516118256000850182611798565b50602082015161183860208501826117b6565b50604082015161184b60408501826117d5565b50606082015161185e6060850182611800565b50505050565b6000608082019050611879600083018461180f565b92915050565b6000819050919050565b6118928161187f565b811461189d57600080fd5b50565b6000813590506118af81611889565b92915050565b6000602082840312156118cb576118ca6115f2565b5b60006118d9848285016118a0565b91505092915050565b6118eb8161187f565b82525050565b600060208201905061190660008301846118e2565b92915050565b600080fd5b600080fd5b60008083601f84011261192c5761192b6115fc565b5b8235905067ffffffffffffffff8111156119495761194861190c565b5b60208301915083602082028301111561196557611964611911565b5b9250929050565b60008083601f840112611982576119816115fc565b5b8235905067ffffffffffffffff81111561199f5761199e61190c565b5b6020830191508360808202830111156119bb576119ba611911565b5b9250929050565b600080600080604085870312156119dc576119db6115f2565b5b600085013567ffffffffffffffff8111156119fa576119f96115f7565b5b611a0687828801611916565b9450945050602085013567ffffffffffffffff811115611a2957611a286115f7565b5b611a358782880161196c565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a7d578082015181840152602081019050611a62565b83811115611a8c576000848401525b50505050565b6000611a9d82611a43565b611aa78185611a4e565b9350611ab7818560208601611a5f565b611ac081611606565b840191505092915050565b60006020820190508181036000830152611ae58184611a92565b905092915050565b60008083601f840112611b0357611b026115fc565b5b8235905067ffffffffffffffff811115611b2057611b1f61190c565b5b602083019150836060820283011115611b3c57611b3b611911565b5b9250929050565b600080600060408486031215611b5c57611b5b6115f2565b5b6000611b6a868287016118a0565b935050602084013567ffffffffffffffff811115611b8b57611b8a6115f7565b5b611b9786828701611aed565b92509250509250925092565b611bac8161178b565b82525050565b6000602082019050611bc76000830184611ba3565b92915050565b611bd6816117a7565b82525050565b611be5816117c5565b82525050565b611bf4816117e4565b82525050565b6000608082019050611c0f6000830187611ba3565b611c1c6020830186611bcd565b611c296040830185611bdc565b611c366060830184611beb565b95945050505050565b60008060208385031215611c5657611c556115f2565b5b600083013567ffffffffffffffff811115611c7457611c736115f7565b5b611c8085828601611916565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151611cce6000850182611798565b506020820151611ce160208501826117b6565b506040820151611cf460408501826117d5565b506060820151611d076060850182611800565b50505050565b6000611d198383611cb8565b60808301905092915050565b6000602082019050919050565b6000611d3d82611c8c565b611d478185611c97565b9350611d5283611ca8565b8060005b83811015611d83578151611d6a8882611d0d565b9750611d7583611d25565b925050600181019050611d56565b5085935050505092915050565b60006020820190508181036000830152611daa8184611d32565b905092915050565b60008060008060008060608789031215611dcf57611dce6115f2565b5b600087013567ffffffffffffffff811115611ded57611dec6115f7565b5b611df989828a01611916565b9650965050602087013567ffffffffffffffff811115611e1c57611e1b6115f7565b5b611e2889828a0161196c565b9450945050604087013567ffffffffffffffff811115611e4b57611e4a6115f7565b5b611e5789828a01611aed565b92509250509295509295509295565b600061ffff82169050919050565b611e7d81611e66565b82525050565b6000602082019050611e986000830184611e74565b92915050565b60008060008060408587031215611eb857611eb76115f2565b5b600085013567ffffffffffffffff811115611ed657611ed56115f7565b5b611ee287828801611916565b9450945050602085013567ffffffffffffffff811115611f0557611f046115f7565b5b611f1187828801611aed565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000611f4682611f1f565b611f508185611f2a565b9350611f60818560208601611a5f565b611f6981611606565b840191505092915050565b60006020820190508181036000830152611f8e8184611f3b565b905092915050565b6000611fa18261159a565b9050919050565b611fb181611f96565b82525050565b6000602082019050611fcc6000830184611fa8565b92915050565b611fdb8161178b565b8114611fe657600080fd5b50565b600081359050611ff881611fd2565b92915050565b60008060008060808587031215612018576120176115f2565b5b6000612026878288016118a0565b945050602061203787828801611fe9565b9350506040612048878288016118a0565b9250506060612059878288016118a0565b91505092959194509250565b60006120708261154e565b9050919050565b61208081612065565b82525050565b600060208201905061209b6000830184612077565b92915050565b600081905092915050565b60006120b782611f1f565b6120c181856120a1565b93506120d1818560208601611a5f565b80840191505092915050565b60006120e982846120ac565b915081905092915050565b600082825260208201905092915050565b600080fd5b600061211683856120f4565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561214957612148612105565b5b60208302925061215a8385846116c3565b82840190509392505050565b6000819050919050565b600061217f6020840184611fe9565b905092915050565b612190816117a7565b811461219b57600080fd5b50565b6000813590506121ad81612187565b92915050565b60006121c2602084018461219e565b905092915050565b6121d3816117c5565b81146121de57600080fd5b50565b6000813590506121f0816121ca565b92915050565b600061220560208401846121e1565b905092915050565b612216816117e4565b811461222157600080fd5b50565b6000813590506122338161220d565b92915050565b60006122486020840184612224565b905092915050565b608082016122616000830183612170565b61226e6000850182611798565b5061227c60208301836121b3565b61228960208501826117b6565b5061229760408301836121f6565b6122a460408501826117d5565b506122b26060830183612239565b6122bf6060850182611800565b50505050565b60006122d18383612250565b60808301905092915050565b600082905092915050565b6000608082019050919050565b60006123018385611c97565b935061230c82612166565b8060005b858110156123455761232282846122dd565b61232c88826122c5565b9750612337836122e8565b925050600181019050612310565b5085925050509392505050565b6000604082019050818103600083015261236d81868861210a565b905081810360208301526123828184866122f5565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156123d2576123d16115f2565b5b60006123e084828501611fe9565b91505092915050565b6000819050919050565b6123fc816123e9565b811461240757600080fd5b50565b600081519050612419816123f3565b92915050565b600060208284031215612435576124346115f2565b5b60006124438482850161240a565b91505092915050565b600060208284031215612462576124616115f2565b5b6000612470848285016121e1565b91505092915050565b6000813561248681611fd2565b80915050919050565b60008160001b9050919050565b600060ff6124a98461248f565b9350801983169250808416831791505092915050565b60006124da6124d56124d08461178b565b61156e565b61178b565b9050919050565b6000819050919050565b6124f4826124bf565b612507612500826124e1565b835461249c565b8255505050565b6000813561251b81612187565b80915050919050565b60008160081b9050919050565b600063ffffff0061254184612524565b9350801983169250808416831791505092915050565b600061257261256d612568846117a7565b61156e565b6117a7565b9050919050565b6000819050919050565b61258c82612557565b61259f61259882612579565b8354612531565b8255505050565b600081356125b3816121ca565b80915050919050565b60008160201b9050919050565b600067ffffffff000000006125dd846125bc565b9350801983169250808416831791505092915050565b600061260e612609612604846117c5565b61156e565b6117c5565b9050919050565b6000819050919050565b612628826125f3565b61263b61263482612615565b83546125c9565b8255505050565b6000813561264f8161220d565b80915050919050565b60008160401b9050919050565b600077ffffffffffffffffffffffffffffffff000000000000000061268984612658565b9350801983169250808416831791505092915050565b60006126ba6126b56126b0846117e4565b61156e565b6117e4565b9050919050565b6000819050919050565b6126d48261269f565b6126e76126e0826126c1565b8354612665565b8255505050565b60008101600083018061270081612479565b905061270c81846124eb565b5050506000810160208301806127218161250e565b905061272d8184612583565b505050600081016040830180612742816125a6565b905061274e818461261f565b50505060008101606083018061276381612642565b905061276f81846126cb565b5050505050565b61278082826126ee565b5050565b600081905092915050565b600061279b8385612784565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156127ce576127cd612105565b5b6020830292506127df8385846116c3565b82840190509392505050565b7f5245534554000000000000000000000000000000000000000000000000000000600082015250565b60006128216005836120a1565b915061282c826127eb565b600582019050919050565b600061284482848661278f565b915061284f82612814565b91508190509392505050565b600081905092915050565b600061287182611a43565b61287b818561285b565b935061288b818560208601611a5f565b80840191505092915050565b6000819050919050565b6128b26128ad8261187f565b612897565b82525050565b60006128c48285612866565b91506128d082846128a1565b6020820191508190509392505050565b60006080820190506128f560008301876118e2565b6129026020830186611ba3565b61290f60408301856118e2565b61291c60608301846118e2565b95945050505050565b61292e81612065565b811461293957600080fd5b50565b60008151905061294b81612925565b92915050565b600060208284031215612967576129666115f2565b5b60006129758482850161293c565b91505092915050565b600080fd5b60008151905061299281611fd2565b92915050565b6000815190506129a781612187565b92915050565b6000815190506129bc816121ca565b92915050565b6000815190506129d18161220d565b92915050565b6000608082840312156129ed576129ec61297e565b5b6129f76080611677565b90506000612a0784828501612983565b6000830152506020612a1b84828501612998565b6020830152506040612a2f848285016129ad565b6040830152506060612a43848285016129c2565b60608301525092915050565b600060808284031215612a6557612a646115f2565b5b6000612a73848285016129d7565b9150509291505056fea2646970667358221220f70b17694892ff157315c3f6adc4c0b93c7f46d079df21fda3f4412ba2ef422464736f6c634300080d0033",
  "devdoc": {
    "details": "Main contract for all deviation triggered fees. This contract has build in fallback feature in case it will be replaced by newer version. Fallback is transparent for the user, no additional setup is needed. How fallback feature works? If data for provided key is empty, contract will execute following procedure: 1. triggered feeds, that needs to be updated will be updated in new contract and erased from this one 2. if data is empty, check, if new deployment of UmbrellaFeeds is done, if not stop. 3. forward the call to that new contract. After new deployment done it is recommended to update address to avoid fallback and reduce gas cost. In long run this is most efficient solution, better than any proxy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_contractRegistry": "Registry address",
          "_decimals": "decimals for prices stored in this contract",
          "_requiredSignatures": "number of required signatures for accepting consensus submission"
        }
      },
      "getName()": {
        "details": "to follow Registrable interface"
      },
      "getPriceData(bytes32)": {
        "details": "this is main endpoint for reading feeds. In case timestamp is empty (that means there is no data), contract will execute fallback call. Check contract description for fallback details."
      },
      "getPriceDataRaw(bytes32)": {
        "details": "same as `getPriceData` but does not revert when no data"
      },
      "getPricesData(bytes32[])": {
        "details": "it will return array of price datas for provided `_keys` In case ony of feeds timestamp is empty, fallback call will be executed for that feed. If any of feeds fallback calls fail, function will revert.",
        "params": {
          "_keys": "array of feed keys"
        },
        "returns": {
          "data": "PriceData array"
        }
      },
      "getPricesDataRaw(bytes32[])": {
        "details": "same as getPricesData() but does not revert on empty data."
      },
      "hashSubmitData(bytes32[],(uint8,uint24,uint32,uint128)[])": {
        "details": "helper method for QA purposes",
        "returns": {
          "_0": "hash of data that are signed by validators (keys and priced data)"
        }
      },
      "priceData(string)": {
        "details": "this is only for dev debug, please use `getPriceData` directly for lower has cost and fallback functionality"
      },
      "recoverSigner(bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_hash": "hashed of data",
          "_r": "part of signature",
          "_s": "part of signature",
          "_v": "part of signature"
        },
        "returns": {
          "_0": "signer address"
        }
      },
      "reset(bytes32[],(uint8,bytes32,bytes32)[])": {
        "details": "method for resetting data",
        "params": {
          "_priceKeys": "array of keys for `_priceDatas`",
          "_signatures": "validators signatures"
        }
      },
      "update(bytes32[],(uint8,uint24,uint32,uint128)[],(uint8,bytes32,bytes32)[])": {
        "details": "method for submitting consensus data",
        "params": {
          "_priceDatas": "PriceData signed by validators",
          "_priceKeys": "array of keys for `_priceDatas`",
          "_signatures": "validators signatures"
        }
      },
      "verifySignatures(bytes32,(uint8,bytes32,bytes32)[])": {
        "details": "method for submitting consensus data",
        "params": {
          "_hash": "hash of signed data",
          "_signatures": "array of validators signatures"
        }
      }
    },
    "stateVariables": {
      "DECIMALS": {
        "details": "decimals for prices stored in this contract"
      },
      "REQUIRED_SIGNATURES": {
        "details": "minimal number of signatures required for accepting submission (PoA)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5876,
        "contract": "contracts/onChainFeeds/UmbrellaFeeds.sol:UmbrellaFeeds",
        "label": "prices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(PriceData)5037_storage)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(PriceData)5037_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IUmbrellaFeeds.PriceData)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceData)5037_storage"
      },
      "t_struct(PriceData)5037_storage": {
        "encoding": "inplace",
        "label": "struct IUmbrellaFeeds.PriceData",
        "members": [
          {
            "astId": 5030,
            "contract": "contracts/onChainFeeds/UmbrellaFeeds.sol:UmbrellaFeeds",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5032,
            "contract": "contracts/onChainFeeds/UmbrellaFeeds.sol:UmbrellaFeeds",
            "label": "heartbeat",
            "offset": 1,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 5034,
            "contract": "contracts/onChainFeeds/UmbrellaFeeds.sol:UmbrellaFeeds",
            "label": "timestamp",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5036,
            "contract": "contracts/onChainFeeds/UmbrellaFeeds.sol:UmbrellaFeeds",
            "label": "price",
            "offset": 8,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}