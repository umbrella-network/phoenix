{
  "address": "0x8994A6933487179d2FEa8f9A3DFa40732D1D309D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sovrynSwapNetwork",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "amountInDecimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct SovrynFetcherHelper.InputData[]",
          "name": "_data",
          "type": "tuple[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "internalType": "struct SovrynFetcherHelper.Price[]",
          "name": "prices",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sovrynSwapNetwork",
      "outputs": [
        {
          "internalType": "contract ISovrynSwapNetwork",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x34d70a7c769bbe8314105c97dec6a88d7a02cf98a0153d5e2ad96770c077091b",
  "receipt": {
    "to": null,
    "from": "0x66f13FDceed822E74b6a1e08e082Fa699fF36454",
    "contractAddress": "0x8994A6933487179d2FEa8f9A3DFa40732D1D309D",
    "transactionIndex": 2,
    "gasUsed": "1000756",
    "logsBloom": "0x
    "blockHash": "0xfb34c854891609ae95d6653b8416e33c5d0ad80990e81118768876b65cd6a975",
    "transactionHash": "0x34d70a7c769bbe8314105c97dec6a88d7a02cf98a0153d5e2ad96770c077091b",
    "logs": [],
    "blockNumber": 5149528,
    "cumulativeGasUsed": "1143961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6390df6de9f24902b29740371525c2ceaa8f5a4f"
  ],
  "numDeployments": 1,
  "solcInputHash": "7d0ce880ab90bdf9ca518a347f49d804",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sovrynSwapNetwork\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amountInDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct SovrynFetcherHelper.InputData[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"struct SovrynFetcherHelper.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sovrynSwapNetwork\",\"outputs\":[{\"internalType\":\"contract ISovrynSwapNetwork\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrices((address,address,uint8)[])\":{\"details\":\"this method will return estimations for swap for provided amounts\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fetchers/soveryn/SovrynFetcherHelper.sol\":\"SovrynFetcherHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/fetchers/CommonFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract CommonFetcher {\\n    uint256 internal constant _DECIMALS = 18;\\n    bytes4 internal constant _DECIMALS_SELECTOR = bytes4(keccak256(\\\"decimals()\\\"));\\n\\n    function _decimals(address _token) internal view virtual returns (uint256 decimals, bool success) {\\n        bytes memory data;\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success, data) = _token.staticcall(abi.encode(_DECIMALS_SELECTOR));\\n        if (success && data.length != 0) decimals = abi.decode(data, (uint256));\\n        else success = false;\\n    }\\n\\n    function _normalizeOneTokenPrice(\\n        uint256 _amountInDecimals,\\n        uint256 _baseDecimals,\\n        uint256 _quoteDecimals,\\n        uint256 _price\\n    )\\n        internal\\n        pure\\n        virtual\\n        returns (uint256 normalizedPrice)\\n    {\\n        // normalize price from `amountInDecimals` to `oneToken`\\n        if (_amountInDecimals == _baseDecimals) {\\n            normalizedPrice = _price;\\n        }\\n        else if (_amountInDecimals < _baseDecimals) {\\n            normalizedPrice = _price * (10 ** (_baseDecimals - _amountInDecimals));\\n        } else {\\n            normalizedPrice = _price / (10 ** (_amountInDecimals - _baseDecimals));\\n        }\\n\\n        // normalize price to 18 decimals\\n        if (_quoteDecimals == _DECIMALS) {\\n            // price OK\\n        } else if (_quoteDecimals > _DECIMALS) {\\n            normalizedPrice /= 10 ** (_quoteDecimals - _DECIMALS);\\n        } else {\\n            normalizedPrice *= 10 ** (_DECIMALS - _quoteDecimals);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92c7c83829d8e2d5f38048903e63495f9ac6cf28b417bfff6ec6b1431845df50\",\"license\":\"UNLICENSED\"},\"contracts/fetchers/soveryn/ISovrynSwapNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISovrynSwapNetwork {\\n    /**\\n      * @dev returns the conversion path between two tokens in the network\\n      * note that this method is quite expensive in terms of gas and should generally be called off-chain\\n      *\\n      * @param _sourceToken source token address\\n      * @param _targetToken target token address\\n      *\\n      * @return conversion path between the two tokens\\n    */\\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\\n\\n    /**\\n      * @dev returns the expected target amount of converting a given amount on a given path\\n      * note that there is no support for circular paths\\n      *\\n      * @param _path        conversion path (see conversion path format above)\\n      * @param _amount      amount of _path[0] tokens received from the sender\\n      *\\n      * @return expected target amount\\n    */\\n    function rateByPath(address[] calldata _path, uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9ca183a90831503629683a15e93685a6676c8a5b1fd87b5f1aa96de0940d1f93\",\"license\":\"UNLICENSED\"},\"contracts/fetchers/soveryn/SovrynFetcherHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ISovrynSwapNetwork} from \\\"./ISovrynSwapNetwork.sol\\\";\\nimport {CommonFetcher} from \\\"../CommonFetcher.sol\\\";\\n\\ncontract SovrynFetcherHelper is CommonFetcher {\\n    struct InputData {\\n        address base;\\n        address quote;\\n        uint8 amountInDecimals;\\n    }\\n\\n    /// @param price is amount out (normalized to 18 decimals) returned by Sovryn pool for 1 quote token\\n    struct Price {\\n        uint256 price;\\n        bool success;\\n    }\\n\\n    ISovrynSwapNetwork immutable public sovrynSwapNetwork;\\n\\n    constructor(address _sovrynSwapNetwork) {\\n        sovrynSwapNetwork = ISovrynSwapNetwork(_sovrynSwapNetwork);\\n    }\\n\\n    /// @dev this method will return estimations for swap for provided amounts\\n    function getPrices(InputData[] calldata _data)\\n        external\\n        view\\n        virtual\\n        returns (Price[] memory prices, uint256 timestamp)\\n    {\\n        timestamp = block.timestamp;\\n        uint256 n = _data.length;\\n        prices = new Price[](n);\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            prices[i] = _getPrice(_data[i]);\\n        }\\n    }\\n\\n    function _getPrice(InputData memory _data)\\n        internal\\n        view\\n        virtual\\n        returns (Price memory price)\\n    {\\n        (uint256 baseDecimals, bool baseHasDecimals) = _decimals(_data.base);\\n        if (!baseHasDecimals) return price;\\n\\n        (uint256 quoteDecimals, bool quoteHasDecimals) = _decimals(_data.quote);\\n        if (!quoteHasDecimals) return price;\\n\\n        (address[] memory path, bool success) = _conversionPath(_data.base, _data.quote);\\n        if (!success) return price;\\n\\n        (price.price, success) = _rateByPath(path, 10 ** _data.amountInDecimals);\\n        if (!success) return price;\\n\\n        price.success = true;\\n        price.price = _normalizeOneTokenPrice(_data.amountInDecimals, baseDecimals, quoteDecimals, price.price);\\n    }\\n\\n    function _conversionPath(address _base, address _quote)\\n        internal\\n        view\\n        returns (address[] memory conversionPath, bool success)\\n    {\\n        try sovrynSwapNetwork.conversionPath(_base, _quote) returns (address[] memory path) {\\n            return (path, true);\\n        } catch (bytes memory) {\\n            // error\\n        }\\n    }\\n\\n    function _rateByPath(address[] memory _path, uint256 _amountIn)\\n        internal\\n        view\\n        returns (uint256 amountOut, bool success)\\n    {\\n        try sovrynSwapNetwork.rateByPath(_path, _amountIn) returns (uint256 result) {\\n            return (result, true);\\n        } catch (bytes memory) {\\n            // error\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9cf3ff47fcf2a2892d7809d0264fe3eaf416574ec61aa2d04cb9bc9e3c4dd8f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001254380380620012548339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b60805161111c62000138600039600081816101610152818161035c015261044a015261111c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634c5ddb2e1461003b57806379eaf6d41461006c575b600080fd5b6100556004803603810190610050919061069a565b61008a565b604051610063929190610808565b60405180910390f35b61007461015f565b60405161008191906108b7565b60405180910390f35b6060600042905060008484905090508067ffffffffffffffff8111156100b3576100b26108d2565b5b6040519080825280602002602001820160405280156100ec57816020015b6100d9610605565b8152602001906001900390816100d15790505b50925060005b818110156101565761012b8686838181106101105761010f610901565b5b9050606002018036038101906101269190610a6d565b610183565b84828151811061013e5761013d610901565b5b602002602001018190525080806001019150506100f2565b50509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61018b610605565b60008061019b846000015161026a565b91509150806101ab575050610265565b6000806101bb866020015161026a565b91509150806101cd5750505050610265565b6000806101e288600001518960200151610356565b91509150806101f657505050505050610265565b610210828960400151600a61020b9190610bfc565b610445565b886000018193508281525050508061022d57505050505050610265565b6001876020019015159081151581525050610255886040015160ff1687868a6000015161052e565b8760000181815250505050505050505b919050565b60008060608373ffffffffffffffffffffffffffffffffffffffff167f313ce567add4d438edf58b94ff345d7d38c45b17dfc0f947988d7819dca364f96040516020016102b79190610c82565b6040516020818303038152906040526040516102d39190610d0e565b600060405180830381855afa9150503d806000811461030e576040519150601f19603f3d011682016040523d82523d6000602084013e610313565b606091505b50809250819350505081801561032b57506000815114155b1561034b57808060200190518101906103449190610d51565b9250610350565b600091505b50915091565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d734fa1985856040518363ffffffff1660e01b81526004016103b5929190610d8d565b600060405180830381865afa9250505080156103f457506040513d6000823e3d601f19601f820116820180604052508101906103f19190610e8e565b60015b610430573d8060008114610424576040519150601f19603f3d011682016040523d82523d6000602084013e610429565b606091505b505061043d565b806001925092505061043e565b5b9250929050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd85856040518363ffffffff1660e01b81526004016104a3929190610f95565b602060405180830381865afa9250505080156104dd57506040513d601f19601f820116820180604052508101906104da9190610d51565b60015b610519573d806000811461050d576040519150601f19603f3d011682016040523d82523d6000602084013e610512565b606091505b5050610526565b8060019250925050610527565b5b9250929050565b600083850361053f57819050610598565b838510156105715784846105539190610fc5565b600a61055f9190610ff9565b8261056a9190611044565b9050610597565b838561057d9190610fc5565b600a6105899190610ff9565b8261059491906110b5565b90505b5b60128303156105fd5760128311156105d5576012836105b79190610fc5565b600a6105c39190610ff9565b816105ce91906110b5565b90506105fc565b8260126105e29190610fc5565b600a6105ee9190610ff9565b816105f99190611044565b90505b5b949350505050565b6040518060400160405280600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261065a57610659610635565b5b8235905067ffffffffffffffff8111156106775761067661063a565b5b6020830191508360608202830111156106935761069261063f565b5b9250929050565b600080602083850312156106b1576106b061062b565b5b600083013567ffffffffffffffff8111156106cf576106ce610630565b5b6106db85828601610644565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61072681610713565b82525050565b60008115159050919050565b6107418161072c565b82525050565b60408201600082015161075d600085018261071d565b5060208201516107706020850182610738565b50505050565b60006107828383610747565b60408301905092915050565b6000602082019050919050565b60006107a6826106e7565b6107b081856106f2565b93506107bb83610703565b8060005b838110156107ec5781516107d38882610776565b97506107de8361078e565b9250506001810190506107bf565b5085935050505092915050565b61080281610713565b82525050565b60006040820190508181036000830152610822818561079b565b905061083160208301846107f9565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061087d61087861087384610838565b610858565b610838565b9050919050565b600061088f82610862565b9050919050565b60006108a182610884565b9050919050565b6108b181610896565b82525050565b60006020820190506108cc60008301846108a8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b61094f82610935565b810181811067ffffffffffffffff8211171561096e5761096d6108d2565b5b80604052505050565b6000610981610621565b905061098d8282610946565b919050565b600061099d82610838565b9050919050565b6109ad81610992565b81146109b857600080fd5b50565b6000813590506109ca816109a4565b92915050565b600060ff82169050919050565b6109e6816109d0565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b600060608284031215610a1f57610a1e610930565b5b610a296060610977565b90506000610a39848285016109bb565b6000830152506020610a4d848285016109bb565b6020830152506040610a61848285016109f4565b60408301525092915050565b600060608284031215610a8357610a8261062b565b5b6000610a9184828501610a09565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610b2057808604811115610afc57610afb610a9a565b5b6001851615610b0b5780820291505b8081029050610b1985610ac9565b9450610ae0565b94509492505050565b600082610b395760019050610bf5565b81610b475760009050610bf5565b8160018114610b5d5760028114610b6757610b96565b6001915050610bf5565b60ff841115610b7957610b78610a9a565b5b8360020a915084821115610b9057610b8f610a9a565b5b50610bf5565b5060208310610133831016604e8410600b8410161715610bcb5782820a905083811115610bc657610bc5610a9a565b5b610bf5565b610bd88484846001610ad6565b92509050818404811115610bef57610bee610a9a565b5b81810290505b9392505050565b6000610c0782610713565b9150610c12836109d0565b9250610c3f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b29565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610c7c81610c47565b82525050565b6000602082019050610c976000830184610c73565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610cd1578082015181840152602081019050610cb6565b60008484015250505050565b6000610ce882610c9d565b610cf28185610ca8565b9350610d02818560208601610cb3565b80840191505092915050565b6000610d1a8284610cdd565b915081905092915050565b610d2e81610713565b8114610d3957600080fd5b50565b600081519050610d4b81610d25565b92915050565b600060208284031215610d6757610d6661062b565b5b6000610d7584828501610d3c565b91505092915050565b610d8781610992565b82525050565b6000604082019050610da26000830185610d7e565b610daf6020830184610d7e565b9392505050565b600067ffffffffffffffff821115610dd157610dd06108d2565b5b602082029050602081019050919050565b600081519050610df1816109a4565b92915050565b6000610e0a610e0584610db6565b610977565b90508083825260208201905060208402830185811115610e2d57610e2c61063f565b5b835b81811015610e565780610e428882610de2565b845260208401935050602081019050610e2f565b5050509392505050565b600082601f830112610e7557610e74610635565b5b8151610e85848260208601610df7565b91505092915050565b600060208284031215610ea457610ea361062b565b5b600082015167ffffffffffffffff811115610ec257610ec1610630565b5b610ece84828501610e60565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f0c81610992565b82525050565b6000610f1e8383610f03565b60208301905092915050565b6000602082019050919050565b6000610f4282610ed7565b610f4c8185610ee2565b9350610f5783610ef3565b8060005b83811015610f88578151610f6f8882610f12565b9750610f7a83610f2a565b925050600181019050610f5b565b5085935050505092915050565b60006040820190508181036000830152610faf8185610f37565b9050610fbe60208301846107f9565b9392505050565b6000610fd082610713565b9150610fdb83610713565b9250828203905081811115610ff357610ff2610a9a565b5b92915050565b600061100482610713565b915061100f83610713565b925061103c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b29565b905092915050565b600061104f82610713565b915061105a83610713565b925082820261106881610713565b9150828204841483151761107f5761107e610a9a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110c082610713565b91506110cb83610713565b9250826110db576110da611086565b5b82820490509291505056fea2646970667358221220f57a298fd72a385bc669d1155e150c8ba5cde0bbc253c51cd6f3cb6f18ebbcf164736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634c5ddb2e1461003b57806379eaf6d41461006c575b600080fd5b6100556004803603810190610050919061069a565b61008a565b604051610063929190610808565b60405180910390f35b61007461015f565b60405161008191906108b7565b60405180910390f35b6060600042905060008484905090508067ffffffffffffffff8111156100b3576100b26108d2565b5b6040519080825280602002602001820160405280156100ec57816020015b6100d9610605565b8152602001906001900390816100d15790505b50925060005b818110156101565761012b8686838181106101105761010f610901565b5b9050606002018036038101906101269190610a6d565b610183565b84828151811061013e5761013d610901565b5b602002602001018190525080806001019150506100f2565b50509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61018b610605565b60008061019b846000015161026a565b91509150806101ab575050610265565b6000806101bb866020015161026a565b91509150806101cd5750505050610265565b6000806101e288600001518960200151610356565b91509150806101f657505050505050610265565b610210828960400151600a61020b9190610bfc565b610445565b886000018193508281525050508061022d57505050505050610265565b6001876020019015159081151581525050610255886040015160ff1687868a6000015161052e565b8760000181815250505050505050505b919050565b60008060608373ffffffffffffffffffffffffffffffffffffffff167f313ce567add4d438edf58b94ff345d7d38c45b17dfc0f947988d7819dca364f96040516020016102b79190610c82565b6040516020818303038152906040526040516102d39190610d0e565b600060405180830381855afa9150503d806000811461030e576040519150601f19603f3d011682016040523d82523d6000602084013e610313565b606091505b50809250819350505081801561032b57506000815114155b1561034b57808060200190518101906103449190610d51565b9250610350565b600091505b50915091565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d734fa1985856040518363ffffffff1660e01b81526004016103b5929190610d8d565b600060405180830381865afa9250505080156103f457506040513d6000823e3d601f19601f820116820180604052508101906103f19190610e8e565b60015b610430573d8060008114610424576040519150601f19603f3d011682016040523d82523d6000602084013e610429565b606091505b505061043d565b806001925092505061043e565b5b9250929050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd85856040518363ffffffff1660e01b81526004016104a3929190610f95565b602060405180830381865afa9250505080156104dd57506040513d601f19601f820116820180604052508101906104da9190610d51565b60015b610519573d806000811461050d576040519150601f19603f3d011682016040523d82523d6000602084013e610512565b606091505b5050610526565b8060019250925050610527565b5b9250929050565b600083850361053f57819050610598565b838510156105715784846105539190610fc5565b600a61055f9190610ff9565b8261056a9190611044565b9050610597565b838561057d9190610fc5565b600a6105899190610ff9565b8261059491906110b5565b90505b5b60128303156105fd5760128311156105d5576012836105b79190610fc5565b600a6105c39190610ff9565b816105ce91906110b5565b90506105fc565b8260126105e29190610fc5565b600a6105ee9190610ff9565b816105f99190611044565b90505b5b949350505050565b6040518060400160405280600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261065a57610659610635565b5b8235905067ffffffffffffffff8111156106775761067661063a565b5b6020830191508360608202830111156106935761069261063f565b5b9250929050565b600080602083850312156106b1576106b061062b565b5b600083013567ffffffffffffffff8111156106cf576106ce610630565b5b6106db85828601610644565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61072681610713565b82525050565b60008115159050919050565b6107418161072c565b82525050565b60408201600082015161075d600085018261071d565b5060208201516107706020850182610738565b50505050565b60006107828383610747565b60408301905092915050565b6000602082019050919050565b60006107a6826106e7565b6107b081856106f2565b93506107bb83610703565b8060005b838110156107ec5781516107d38882610776565b97506107de8361078e565b9250506001810190506107bf565b5085935050505092915050565b61080281610713565b82525050565b60006040820190508181036000830152610822818561079b565b905061083160208301846107f9565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061087d61087861087384610838565b610858565b610838565b9050919050565b600061088f82610862565b9050919050565b60006108a182610884565b9050919050565b6108b181610896565b82525050565b60006020820190506108cc60008301846108a8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b61094f82610935565b810181811067ffffffffffffffff8211171561096e5761096d6108d2565b5b80604052505050565b6000610981610621565b905061098d8282610946565b919050565b600061099d82610838565b9050919050565b6109ad81610992565b81146109b857600080fd5b50565b6000813590506109ca816109a4565b92915050565b600060ff82169050919050565b6109e6816109d0565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b600060608284031215610a1f57610a1e610930565b5b610a296060610977565b90506000610a39848285016109bb565b6000830152506020610a4d848285016109bb565b6020830152506040610a61848285016109f4565b60408301525092915050565b600060608284031215610a8357610a8261062b565b5b6000610a9184828501610a09565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610b2057808604811115610afc57610afb610a9a565b5b6001851615610b0b5780820291505b8081029050610b1985610ac9565b9450610ae0565b94509492505050565b600082610b395760019050610bf5565b81610b475760009050610bf5565b8160018114610b5d5760028114610b6757610b96565b6001915050610bf5565b60ff841115610b7957610b78610a9a565b5b8360020a915084821115610b9057610b8f610a9a565b5b50610bf5565b5060208310610133831016604e8410600b8410161715610bcb5782820a905083811115610bc657610bc5610a9a565b5b610bf5565b610bd88484846001610ad6565b92509050818404811115610bef57610bee610a9a565b5b81810290505b9392505050565b6000610c0782610713565b9150610c12836109d0565b9250610c3f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b29565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610c7c81610c47565b82525050565b6000602082019050610c976000830184610c73565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610cd1578082015181840152602081019050610cb6565b60008484015250505050565b6000610ce882610c9d565b610cf28185610ca8565b9350610d02818560208601610cb3565b80840191505092915050565b6000610d1a8284610cdd565b915081905092915050565b610d2e81610713565b8114610d3957600080fd5b50565b600081519050610d4b81610d25565b92915050565b600060208284031215610d6757610d6661062b565b5b6000610d7584828501610d3c565b91505092915050565b610d8781610992565b82525050565b6000604082019050610da26000830185610d7e565b610daf6020830184610d7e565b9392505050565b600067ffffffffffffffff821115610dd157610dd06108d2565b5b602082029050602081019050919050565b600081519050610df1816109a4565b92915050565b6000610e0a610e0584610db6565b610977565b90508083825260208201905060208402830185811115610e2d57610e2c61063f565b5b835b81811015610e565780610e428882610de2565b845260208401935050602081019050610e2f565b5050509392505050565b600082601f830112610e7557610e74610635565b5b8151610e85848260208601610df7565b91505092915050565b600060208284031215610ea457610ea361062b565b5b600082015167ffffffffffffffff811115610ec257610ec1610630565b5b610ece84828501610e60565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f0c81610992565b82525050565b6000610f1e8383610f03565b60208301905092915050565b6000602082019050919050565b6000610f4282610ed7565b610f4c8185610ee2565b9350610f5783610ef3565b8060005b83811015610f88578151610f6f8882610f12565b9750610f7a83610f2a565b925050600181019050610f5b565b5085935050505092915050565b60006040820190508181036000830152610faf8185610f37565b9050610fbe60208301846107f9565b9392505050565b6000610fd082610713565b9150610fdb83610713565b9250828203905081811115610ff357610ff2610a9a565b5b92915050565b600061100482610713565b915061100f83610713565b925061103c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610b29565b905092915050565b600061104f82610713565b915061105a83610713565b925082820261106881610713565b9150828204841483151761107f5761107e610a9a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110c082610713565b91506110cb83610713565b9250826110db576110da611086565b5b82820490509291505056fea2646970667358221220f57a298fd72a385bc669d1155e150c8ba5cde0bbc253c51cd6f3cb6f18ebbcf164736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrices((address,address,uint8)[])": {
        "details": "this method will return estimations for swap for provided amounts"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}