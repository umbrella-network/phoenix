{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@umb-network/toolbox/dist/contracts/lib/ValueDecoder.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity >=0.6.8;\n\nlibrary ValueDecoder {\n  function toUint(bytes memory _bytes) internal pure returns (uint256 value) {\n    assembly {\n      value := mload(add(_bytes, 32))\n    }\n  }\n\n  function toUint(bytes32 _bytes) internal pure returns (uint256 value) {\n    assembly {\n      value := _bytes\n    }\n  }\n\n  function toInt(uint224 u) internal pure returns (int256) {\n    int224 i;\n    uint224 max = type(uint224).max;\n\n    if (u <= (max - 1) / 2) { // positive values\n      assembly {\n        i := add(u, 0)\n      }\n\n      return i;\n    } else { // negative values\n      assembly {\n        i := sub(sub(u, max), 1)\n      }\n    }\n\n    return i;\n  }\n}\n\n"
    },
    "contracts/BaseChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@umb-network/toolbox/dist/contracts/lib/ValueDecoder.sol\";\n\nimport \"./interfaces/IBaseChainV1.sol\";\nimport \"./interfaces/IStakingBank.sol\";\nimport \"./extensions/Registrable.sol\";\nimport \"./Registry.sol\";\n\nabstract contract BaseChain is Registrable, Ownable {\n    using ValueDecoder for bytes;\n    using ValueDecoder for uint224;\n    using MerkleProof for bytes32[];\n\n    /// @param root merkle root for consensus\n    /// @param dataTimestamp consensus timestamp\n    struct Block {\n        bytes32 root;\n        uint32 dataTimestamp;\n    }\n\n    /// @param value FCD value\n    /// @param dataTimestamp FCD timestamp\n    struct FirstClassData {\n        uint224 value;\n        uint32 dataTimestamp;\n    }\n\n    /// @param blocksCountOffset number of all blocks that were generated before switching to this contract\n    /// @param sequence is a total number of blocks (consensus rounds) including previous contracts\n    /// @param lastTimestamp is a timestamp of last submitted block\n    /// @param padding number of seconds that need to pass before new submit will be possible\n    /// @param deprecated flag that changes to TRUE on `unregister`, when TRUE submissions are not longer available\n    struct ConsensusData {\n        uint32 blocksCountOffset;\n        uint32 sequence;\n        uint32 lastTimestamp;\n        uint32 padding;\n        bool deprecated;\n    }\n\n    uint256 constant public VERSION = 2;\n\n    bool internal immutable _ALLOW_FOR_MIXED_TYPE; // solhint-disable-line var-name-mixedcase\n\n    bytes4 constant private _VERSION_SELECTOR = bytes4(keccak256(\"VERSION()\"));\n\n    /// @dev minimal number of signatures required for accepting submission (PoA)\n    uint16 internal immutable _REQUIRED_SIGNATURES; // solhint-disable-line var-name-mixedcase\n\n    ConsensusData internal _consensusData;\n\n    bytes constant public ETH_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\n\n    /// @dev block id (consensus ID) => root\n    /// consensus ID is at the same time consensus timestamp\n    mapping(uint256 => bytes32) public roots;\n\n    /// @dev FCD key => FCD data\n    mapping(bytes32 => FirstClassData) public fcds;\n\n    event LogDeprecation(address indexed deprecator);\n    event LogPadding(address indexed executor, uint32 timePadding);\n\n    error ArraysDataDoNotMatch();\n    error AlreadyDeprecated();\n    error AlreadyRegistered();\n    error BlockSubmittedToFastOrDataToOld();\n    error ContractNotReady();\n    error FCDOverflow();\n    error InvalidContractType();\n    error NoChangeToState();\n    error OnlyOwnerOrRegistry();\n    error UnregisterFirst();\n\n    modifier onlyOwnerOrRegistry () {\n        if (msg.sender != address(contractRegistry) && msg.sender != owner()) revert OnlyOwnerOrRegistry();\n        _;\n    }\n\n    /// @param _contractRegistry Registry address\n    /// @param _padding required \"space\" between blocks in seconds\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\n    constructor(\n        IRegistry _contractRegistry,\n        uint32 _padding,\n        uint16 _requiredSignatures,\n        bool _allowForMixedType\n    ) Registrable(_contractRegistry) {\n        _ALLOW_FOR_MIXED_TYPE = _allowForMixedType;\n        _REQUIRED_SIGNATURES = _requiredSignatures;\n\n        _setPadding(_padding);\n\n        BaseChain oldChain = BaseChain(_contractRegistry.getAddress(\"Chain\"));\n\n        if (address(oldChain) == address(0)) {\n            // if this is first contract in sidechain, then we need to initialise lastTimestamp so submission\n            // can be possible\n            _consensusData.lastTimestamp = uint32(block.timestamp) - _padding - 1;\n        }\n    }\n\n    /// @dev setter for `padding`\n    function setPadding(uint16 _padding) external {\n        _setPadding(_padding);\n    }\n\n    /// @notice if this method needs to be called manually (not from Registry)\n    /// it is important to do it as part of tx batch\n    /// eg using multisig, we should prepare set of transactions and confirm them all at once\n    /// @inheritdoc Registrable\n    function register() external override onlyOwnerOrRegistry {\n        address oldChain = contractRegistry.getAddress(\"Chain\");\n\n        // registration must be done before address in registry is replaced\n        if (oldChain == address(this)) revert AlreadyRegistered();\n\n        if (oldChain == address(0x0)) {\n            return;\n        }\n\n        _cloneLastDataFromPrevChain(oldChain);\n    }\n\n    /// @inheritdoc Registrable\n    function unregister() external override onlyOwnerOrRegistry {\n        // in case we deprecated contract manually, we simply return\n        if (_consensusData.deprecated) return;\n\n        address newChain = contractRegistry.getAddress(\"Chain\");\n        // unregistering must be done after address in registry is replaced\n        if (newChain == address(this)) revert UnregisterFirst();\n\n        // TODO:\n        // I think we need to remove restriction for type (at least once)\n        // when we will switch to multichain architecture\n\n        if (!_ALLOW_FOR_MIXED_TYPE) {\n            // can not be replaced with chain of different type\n            if (BaseChain(newChain).isForeign() != this.isForeign()) revert InvalidContractType();\n        }\n\n        _consensusData.deprecated = true;\n        emit LogDeprecation(msg.sender);\n    }\n\n    /// @notice it allows to deprecate contract manually\n    /// Only new Registry calls `unregister()` where we set deprecated to true\n    /// In old Registries we don't have this feature, so in order to safely redeploy new Chain\n    /// we will have to first deprecate current contract manually, then register new contract\n    function deprecate() external onlyOwnerOrRegistry {\n        if (_consensusData.deprecated) revert AlreadyDeprecated();\n\n        _consensusData.deprecated = true;\n        emit LogDeprecation(msg.sender);\n    }\n\n    /// @dev getter for `_consensusData`\n    function getConsensusData() external view returns (ConsensusData memory) {\n        return _consensusData;\n    }\n\n    /// @dev number of blocks (consensus rounds) saved in this contract\n    function blocksCount() external view returns (uint256) {\n        return _consensusData.sequence - _consensusData.blocksCountOffset;\n    }\n\n    function blocksCountOffset() external view returns (uint32) {\n        return _consensusData.blocksCountOffset;\n    }\n\n    function lastBlockId() external view returns (uint256) {\n        return _consensusData.lastTimestamp;\n    }\n\n    /// @return TRUE if contract is ForeignChain, FALSE otherwise\n    function isForeign() external pure virtual returns (bool);\n\n    /// @inheritdoc Registrable\n    function getName() external pure override returns (bytes32) {\n        return \"Chain\";\n    }\n\n    /// @param _affidavit root and FCDs hashed together\n    /// @param _v part of signature\n    /// @param _r part of signature\n    /// @param _s part of signature\n    /// @return signer address\n    function recoverSigner(bytes32 _affidavit, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\n        bytes32 hash = keccak256(abi.encodePacked(ETH_PREFIX, _affidavit));\n        return ecrecover(hash, _v, _r, _s);\n    }\n\n    /// @param _blockId ID of submitted block\n    /// @return block data (root + timestamp)\n    function blocks(uint256 _blockId) external view returns (Block memory) {\n        return Block(roots[_blockId], uint32(_blockId));\n    }\n\n    /// @return current block ID\n    /// please note, that current ID is not the same as last ID, current means that once padding pass,\n    /// ID will switch to next one and it will be pointing to empty submit until submit for that ID is done\n    function getBlockId() external view returns (uint32) {\n        if (_consensusData.lastTimestamp == 0) return 0;\n\n        return getBlockIdAtTimestamp(block.timestamp);\n    }\n\n    function requiredSignatures() external view returns (uint16) {\n        return _REQUIRED_SIGNATURES;\n    }\n\n    /// @dev calculates block ID for provided timestamp\n    /// this function does not works for past timestamps\n    /// @param _timestamp current or future timestamp\n    /// @return block ID for provided timestamp\n    function getBlockIdAtTimestamp(uint256 _timestamp) virtual public view returns (uint32) {\n        ConsensusData memory data = _consensusData;\n\n        unchecked {\n            // we can't overflow because we adding two `uint32`\n            if (data.lastTimestamp + data.padding < _timestamp) {\n                return uint32(_timestamp);\n            }\n        }\n\n        return data.lastTimestamp;\n    }\n\n    /// @return last submitted block ID, please note, that on deployment, when there is no submission for this contract\n    /// block for last ID will be available in previous contract\n    function getLatestBlockId() virtual public view returns (uint32) {\n        return _consensusData.lastTimestamp;\n    }\n\n    /// @dev verifies if the leaf is valid leaf for merkle tree\n    /// @param _proof merkle proof for merkle tree\n    /// @param _root merkle root\n    /// @param _leaf leaf hash\n    /// @return TRUE if `_leaf` is valid, FALSE otherwise\n    function verifyProof(bytes32[] memory _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n        if (_root == bytes32(0)) {\n            return false;\n        }\n\n        return _proof.verify(_root, _leaf);\n    }\n\n    /// @dev creates leaf hash, that has is used in merkle tree\n    /// @param _key key under which we store the value\n    /// @param _value value itself as bytes\n    /// @return leaf hash\n    function hashLeaf(bytes memory _key, bytes memory _value) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_key, _value));\n    }\n\n    /// @dev verifies, if provided key-value pair was part of consensus\n    /// @param _blockId consensus ID for which we doing a check\n    /// @param _proof merkle proof for pair\n    /// @param _key pair key\n    /// @param _value pair value\n    /// @return TRUE if key-value par was part of consensus, FALSE otherwise\n    function verifyProofForBlock(\n        uint256 _blockId,\n        bytes32[] memory _proof,\n        bytes memory _key,\n        bytes memory _value\n    )\n        public\n        view\n        returns (bool)\n    {\n        return _proof.verify(roots[_blockId], keccak256(abi.encodePacked(_key, _value)));\n    }\n\n    /// @dev this is helper method, that extracts one merkle proof from many hashed provided as bytes\n    /// @param _data many hashes as bytes\n    /// @param _offset this is starting point for extraction\n    /// @param _items how many hashes to extract\n    /// @return merkle proof (array of bytes32 hashes)\n    function bytesToBytes32Array(\n        bytes memory _data,\n        uint256 _offset,\n        uint256 _items\n    )\n        public\n        pure\n        returns (bytes32[] memory)\n    {\n        bytes32[] memory dataList = new bytes32[](_items);\n\n        // we can unchecked because we working only with `i` and `_offset`\n        // in case of wrong `_offset` it will throw\n        unchecked {\n            for (uint256 i = 0; i < _items; i++) {\n                bytes32 temp;\n                uint256 idx = (i + 1 + _offset) * 32;\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    temp := mload(add(_data, idx))\n                }\n\n                dataList[i] = temp;\n            }\n        }\n\n        return (dataList);\n    }\n\n    /// @dev batch method for data verification\n    /// @param _blockIds consensus IDs for which we doing a checks\n    /// @param _proofs merkle proofs for all pair, sequence of hashes provided as bytes\n    /// @param _proofItemsCounter array of counters, each counter tells how many hashes proof for each leaf has\n    /// @param _leaves array of merkle leaves\n    /// @return results array of verification results, TRUE if leaf is part of consensus, FALSE otherwise\n    function verifyProofs(\n        uint32[] memory _blockIds,\n        bytes memory _proofs,\n        uint256[] memory _proofItemsCounter,\n        bytes32[] memory _leaves\n    )\n        public\n        view\n        returns (bool[] memory results)\n    {\n        results = new bool[](_leaves.length);\n        uint256 offset = 0;\n\n        for (uint256 i = 0; i < _leaves.length;) {\n            results[i] = bytesToBytes32Array(_proofs, offset, _proofItemsCounter[i]).verify(\n                roots[_blockIds[i]], _leaves[i]\n            );\n\n            unchecked {\n                // we can uncheck because it will not overflow in a lifetime, and if someone provide invalid counter\n                // we verification will not be valid (or we throw because of invalid memory access)\n                offset += _proofItemsCounter[i];\n                // we can uncheck because `i` will not overflow in a lifetime\n                i++;\n            }\n        }\n    }\n\n    /// @param _blockId consensus ID\n    /// @return root for provided consensus ID\n    function getBlockRoot(uint32 _blockId) external view returns (bytes32) {\n        return roots[_blockId];\n    }\n\n    /// @param _blockId consensus ID\n    /// @return timestamp for provided consensus ID\n    function getBlockTimestamp(uint32 _blockId) external view returns (uint32) {\n        return roots[_blockId] == bytes32(0) ? 0 : _blockId;\n    }\n\n    /// @dev batch getter for FCDs\n    /// @param _keys FCDs keys to fetch\n    /// @return values array of FCDs values\n    /// @return timestamps array of FCDs timestamps\n    function getCurrentValues(bytes32[] calldata _keys)\n        external\n        view\n        returns (uint256[] memory values, uint32[] memory timestamps)\n    {\n        timestamps = new uint32[](_keys.length);\n        values = new uint256[](_keys.length);\n\n        for (uint i=0; i<_keys.length;) {\n            FirstClassData storage numericFCD = fcds[_keys[i]];\n            values[i] = uint256(numericFCD.value);\n            timestamps[i] = numericFCD.dataTimestamp;\n\n            unchecked {\n                // we can uncheck because `i` will not overflow in a lifetime\n                i++;\n            }\n        }\n    }\n\n    /// @dev getter for single FCD value\n    /// @param _key FCD key\n    /// @return value FCD value\n    /// @return timestamp FCD timestamp\n    function getCurrentValue(bytes32 _key) external view returns (uint256 value, uint256 timestamp) {\n        FirstClassData storage numericFCD = fcds[_key];\n        return (uint256(numericFCD.value), numericFCD.dataTimestamp);\n    }\n\n    /// @dev getter for single FCD value in case its type is `int`\n    /// @param _key FCD key\n    /// @return value FCD value\n    /// @return timestamp FCD timestamp\n    function getCurrentIntValue(bytes32 _key) external view returns (int256 value, uint256 timestamp) {\n        FirstClassData storage numericFCD = fcds[_key];\n        return (numericFCD.value.toInt(), numericFCD.dataTimestamp);\n    }\n\n    function _setPadding(uint32 _padding) internal onlyOwner {\n        if (_consensusData.padding == _padding) revert NoChangeToState();\n\n        _consensusData.padding = _padding;\n        emit LogPadding(msg.sender, _padding);\n    }\n\n    /// @dev we cloning last block time, because we will need reference point for next submissions\n    function _cloneLastDataFromPrevChain(address _prevChain) internal {\n        (bool success, bytes memory v) = _prevChain.staticcall(abi.encode(_VERSION_SELECTOR));\n        uint256 prevVersion = success ? abi.decode(v, (uint256)) : 1;\n\n        if (prevVersion == 1) {\n            uint32 latestId = IBaseChainV1(address(_prevChain)).getLatestBlockId();\n            _consensusData.lastTimestamp = IBaseChainV1(address(_prevChain)).getBlockTimestamp(latestId);\n\n            // +1 because getLatestBlockId subtracts 1\n            // +1 because it might be situation when tx is already in progress in old contract\n            // and old contract do not have deprecated flag\n            _consensusData.sequence = latestId + 2;\n            _consensusData.blocksCountOffset = latestId + 2;\n        } else { // VERSION 2\n            // with new Registry, we have register/unregister methods\n            // Chain will be deprecated, so there is no need to do \"+1\" as in old version\n            // TODO what with current Registries??\n            // we need a way to make it deprecated!\n            ConsensusData memory data = BaseChain(_prevChain).getConsensusData();\n\n            _consensusData.sequence = data.sequence;\n            _consensusData.blocksCountOffset = data.sequence;\n            _consensusData.lastTimestamp = data.lastTimestamp;\n        }\n    }\n}\n"
    },
    "contracts/Chain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./BaseChain.sol\";\n\ncontract Chain is BaseChain {\n    IStakingBank public immutable stakingBank;\n\n    event LogMint(address indexed minter, uint256 blockId, uint256 staked, uint256 power);\n    event LogVoter(uint256 indexed blockId, address indexed voter, uint256 vote);\n\n    error NotEnoughSignatures();\n    error SignaturesOutOfOrder();\n\n    /// @param _contractRegistry Registry address\n    /// @param _padding required \"space\" between blocks in seconds\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\n    /// @param _allowForMixedType we have two \"types\" of Chain: HomeChain and ForeignChain, when we redeploying\n    /// we don't want to mix up them, so we checking, if new Chain has the same type as current one.\n    /// However, when we will be switching from one homechain to another one, we have to allow for this mixing up.\n    /// This flag will tell contract, if this is the case.\n    constructor(\n        IRegistry _contractRegistry,\n        uint32 _padding,\n        uint16 _requiredSignatures,\n        bool _allowForMixedType\n    ) BaseChain(_contractRegistry, _padding, _requiredSignatures, _allowForMixedType) {\n        stakingBank = IStakingBank(_contractRegistry.requireAndGetAddress(\"StakingBank\"));\n    }\n\n    /// @dev method for submitting consensus data\n    /// @param _dataTimestamp consensus timestamp, this is time for all data in merkle tree including FCDs\n    /// @param _root merkle root\n    /// @param _keys FCDs keys\n    /// @param _values FCDs values\n    /// @param _v array of `v` part of validators signatures\n    /// @param _r array of `r` part of validators signatures\n    /// @param _s array of `s` part of validators signatures\n    // solhint-disable-next-line function-max-lines, code-complexity\n    function submit(\n        uint32 _dataTimestamp,\n        bytes32 _root,\n        bytes32[] memory _keys,\n        uint256[] memory _values,\n        uint8[] memory _v,\n        bytes32[] memory _r,\n        bytes32[] memory _s\n    ) external {\n        // below two checks are only for pretty errors, so we can safe gas and allow for raw revert\n        // if (_keys.length != _values.length) revert ArraysDataDoNotMatch();\n        // if (_v.length != _r.length || _r.length != _s.length) revert ArraysDataDoNotMatch();\n\n        _verifySubmitTimestampAndIncSequence(_dataTimestamp);\n\n        // we can't expect minter will have exactly the same timestamp\n        // but for sure we can demand not to be off by a lot, that's why +3sec\n        // temporary remove this condition, because recently on ropsten we see cases when minter/node\n        // can be even 100sec behind\n        // require(_dataTimestamp <= block.timestamp + 3,\n        //   string(abi.encodePacked(\"oh, so you can predict the future:\", _dataTimestamp - block.timestamp + 48)));\n\n        bytes memory testimony = abi.encodePacked(_dataTimestamp, _root);\n\n        for (uint256 i = 0; i < _keys.length;) {\n            if (uint224(_values[i]) != _values[i]) revert FCDOverflow();\n\n            fcds[_keys[i]] = FirstClassData(uint224(_values[i]), _dataTimestamp);\n            testimony = abi.encodePacked(testimony, _keys[i], _values[i]);\n\n            unchecked {\n                // we can't pass enough data to overflow\n                i++;\n            }\n        }\n\n        uint256 signatures = 0;\n        uint256 power = 0;\n        //uint256 staked = stakingBank.totalSupply();\n        bytes32 affidavit = keccak256(testimony);\n\n        address prevSigner = address(0x0);\n\n        for (uint256 i; i < _v.length;) {\n            address signer = recoverSigner(affidavit, _v[i], _r[i], _s[i]);\n            uint256 balance = stakingBank.balanceOf(signer);\n\n            if (prevSigner >= signer) revert SignaturesOutOfOrder();\n\n            prevSigner = signer;\n\n            if (balance == 0) {\n                unchecked { i++; }\n                continue;\n            }\n\n            signatures++;\n            emit LogVoter(uint256(_dataTimestamp), signer, balance);\n\n            unchecked {\n                // we can't overflow because that means token overflowed\n                // and even if we do, we will get lower power\n                power += balance;\n                i++;\n            }\n        }\n\n        if (signatures < _REQUIRED_SIGNATURES) revert NotEnoughSignatures();\n\n        emit LogMint(msg.sender, _dataTimestamp, stakingBank.totalSupply(), power);\n\n        // TODO remember to protect against flash loans when DPoS will be in place\n        // we turn on power once we have DPoS in action, we have PoA now\n        // require(power * 100 / staked >= 66, \"not enough power was gathered\");\n\n        roots[_dataTimestamp] = _root;\n        _consensusData.lastTimestamp = _dataTimestamp;\n    }\n\n    /// @inheritdoc BaseChain\n    function isForeign() external pure virtual override returns (bool) {\n        return false;\n    }\n\n    /// @dev helper method that returns all important data about current state of contract\n    /// @return blockNumber `block.number`\n    /// @return timePadding `this.padding`\n    /// @return lastDataTimestamp timestamp for last submitted consensus\n    /// @return lastId ID of last submitted consensus\n    /// @return nextLeader leader for `block.timestamp + 1`\n    /// @return nextBlockId block ID for `block.timestamp + padding`\n    /// @return validators array of all validators addresses\n    /// @return powers array of all validators powers\n    /// @return locations array of all validators locations\n    /// @return staked total UMB staked by validators\n    /// @return minSignatures `this.requiredSignatures`\n    function getStatus() external view virtual returns(\n        uint256 blockNumber,\n        uint32 timePadding,\n        uint32 lastDataTimestamp,\n        uint32 lastId,\n        address nextLeader,\n        uint32 nextBlockId,\n        address[] memory validators,\n        uint256[] memory powers,\n        string[] memory locations,\n        uint256 staked,\n        uint16 minSignatures\n    ) {\n        ConsensusData memory data = _consensusData;\n\n        blockNumber = block.number;\n        timePadding = data.padding;\n        lastId = data.lastTimestamp;\n        lastDataTimestamp = lastId;\n        minSignatures = _REQUIRED_SIGNATURES;\n\n        staked = stakingBank.totalSupply();\n        uint256 numberOfValidators = stakingBank.getNumberOfValidators();\n        powers = new uint256[](numberOfValidators);\n        validators = new address[](numberOfValidators);\n        locations = new string[](numberOfValidators);\n\n        for (uint256 i = 0; i < numberOfValidators;) {\n            validators[i] = stakingBank.addresses(i);\n            (, locations[i]) = stakingBank.validators(validators[i]);\n            powers[i] = stakingBank.balanceOf(validators[i]);\n\n            unchecked {\n                // we will run out of gas before overflow happen\n                i++;\n            }\n        }\n\n        unchecked {\n            // we will not overflow with timestamp in a lifetime\n            nextBlockId = lastId + data.padding + 1;\n\n            nextLeader = numberOfValidators > 0\n                // we will not overflow with timestamp in a lifetime\n                ? validators[getLeaderIndex(numberOfValidators, block.timestamp + 1)]\n                : address(0);\n        }\n    }\n\n    /// @return address of leader for next second\n    function getNextLeaderAddress() external view returns (address) {\n        return getLeaderAddressAtTime(block.timestamp + 1);\n    }\n\n    /// @return address of current leader\n    function getLeaderAddress() external view returns (address) {\n        return getLeaderAddressAtTime(block.timestamp);\n    }\n\n    /// @param _numberOfValidators total number of validators\n    /// @param _timestamp timestamp for which you want to calculate index\n    /// @return leader index, use it for StakingBank.addresses[index] to fetch leader address\n    function getLeaderIndex(uint256 _numberOfValidators, uint256 _timestamp) public view virtual returns (uint256) {\n        ConsensusData memory data = _consensusData;\n\n        unchecked {\n            // we will not overflow on `timestamp` and `padding` in a life time\n            // timePadding + 1 => because padding is a space between blocks,\n            // so next round starts on first block after padding\n            // TODO will it work for off-chain??\n            uint256 validatorIndex = data.sequence + (_timestamp - data.lastTimestamp) / (data.padding + 1);\n\n            return validatorIndex % _numberOfValidators;\n        }\n    }\n\n    // @todo - properly handled non-enabled validators, newly added validators, and validators with low stake\n    /// @param _timestamp timestamp for which you want to calculate leader address\n    /// @return leader address for provider timestamp\n    function getLeaderAddressAtTime(uint256 _timestamp) public view virtual returns (address) {\n        uint256 numberOfValidators = stakingBank.getNumberOfValidators();\n\n        if (numberOfValidators == 0) {\n            return address(0x0);\n        }\n\n        uint256 validatorIndex = getLeaderIndex(numberOfValidators, _timestamp);\n\n        return stakingBank.addresses(validatorIndex);\n    }\n\n    /// @dev we had stack too deep in `submit` so this method was created as a solution\n    // we increasing `_consensusData.sequence` here so we don't have to read sequence again in other place\n    function _verifySubmitTimestampAndIncSequence(uint256 _dataTimestamp) internal {\n        ConsensusData memory data = _consensusData;\n\n        // `data.lastTimestamp` must be setup either on deployment\n        // or via cloning from previous contract\n        if (data.lastTimestamp == 0) revert ContractNotReady();\n\n        unchecked {\n            // we will not overflow with timestamp and padding in a life time\n            if (data.lastTimestamp + data.padding >= _dataTimestamp) revert BlockSubmittedToFastOrDataToOld();\n        }\n\n        unchecked {\n            // we will not overflow in a life time\n            _consensusData.sequence = uint32(data.sequence + 1);\n        }\n    }\n}\n"
    },
    "contracts/extensions/Registrable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/IRegistry.sol\";\nimport \"../interfaces/IStakingBank.sol\";\n\n/// @dev Any contract that we want to register in ContractRegistry, must inherit from Registrable\nabstract contract Registrable {\n    IRegistry public immutable contractRegistry;\n\n    modifier onlyFromContract(address _msgSender, bytes32 _contractName) {\n        require(\n            contractRegistry.getAddress(_contractName) == _msgSender,\n            string(abi.encodePacked(\"caller is not \", _contractName))\n        );\n        _;\n    }\n\n    modifier withRegistrySetUp() {\n        require(address(contractRegistry) != address(0x0), \"_registry is empty\");\n        _;\n    }\n\n    constructor(IRegistry _contractRegistry) {\n        require(address(_contractRegistry) != address(0x0), \"_registry is empty\");\n        contractRegistry = _contractRegistry;\n    }\n\n    /// @dev this method will be called as a first method in registration process when old contract will be replaced\n    /// when called, old contract address is still in registry\n    function register() virtual external;\n\n    /// @dev this method will be called as a last method in registration process when old contract will be replaced\n    /// when called, new contract address is already in registry\n    function unregister() virtual external;\n\n    /// @return contract name as bytes32\n    function getName() virtual external pure returns (bytes32);\n\n    /// @dev helper method for fetching StakingBank address\n    function stakingBankContract() public view returns (IStakingBank) {\n        return IStakingBank(contractRegistry.requireAndGetAddress(\"StakingBank\"));\n    }\n\n    /// @dev helper method for fetching UMB address\n    function tokenContract() public view withRegistrySetUp returns (ERC20) {\n        return ERC20(contractRegistry.requireAndGetAddress(\"UMB\"));\n    }\n}\n"
    },
    "contracts/ForeignChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./Chain.sol\";\n\n/// @dev contract for foreign chains\ncontract ForeignChain is Chain {\n    error NotSupported();\n\n    /// @param _contractRegistry Registry address\n    /// @param _padding required \"space\" between blocks in seconds\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\n    constructor(\n        IRegistry _contractRegistry,\n        uint32 _padding,\n        uint16 _requiredSignatures,\n        bool _allowForMixedType\n    ) Chain(_contractRegistry, _padding, _requiredSignatures, _allowForMixedType) {\n        // no additional configuration needed\n    }\n\n    /// @inheritdoc BaseChain\n    function isForeign() external pure override returns (bool) {\n        return true;\n    }\n\n    /// @inheritdoc Chain\n    /// @notice this method is made to be compatible with MasterChain, but it does not return full data eg validators\n    /// data will be missing.\n    /// @return blockNumber `block.number`\n    /// @return timePadding `this.padding`\n    /// @return lastDataTimestamp timestamp for last submitted consensus\n    /// @return lastId ID of last submitted consensus\n    /// @return nextLeader will be always address(0)\n    /// @return nextBlockId block ID for `block.timestamp + padding`\n    /// @return validators array will be always empty\n    /// @return powers array will be always empty\n    /// @return locations array will be always empty\n    /// @return staked total UMB staked by validators\n    /// @return minSignatures `this.requiredSignatures`\n    function getStatus() external view override returns(\n        uint256 blockNumber,\n        uint32 timePadding,\n        uint32 lastDataTimestamp,\n        uint32 lastId,\n        address nextLeader,\n        uint32 nextBlockId,\n        address[] memory validators,\n        uint256[] memory powers,\n        string[] memory locations,\n        uint256 staked,\n        uint16 minSignatures\n    ) {\n        ConsensusData memory data = _consensusData;\n\n        blockNumber = block.number;\n        timePadding = data.padding;\n        lastId = data.lastTimestamp;\n        lastDataTimestamp = lastId;\n        minSignatures = _REQUIRED_SIGNATURES;\n\n        staked = stakingBank.totalSupply();\n        uint256 numberOfValidators = 0;\n        powers = new uint256[](numberOfValidators);\n        validators = new address[](numberOfValidators);\n        locations = new string[](numberOfValidators);\n        nextLeader = address(0);\n\n        unchecked {\n            // we will not overflow with timestamp in a lifetime\n            nextBlockId = lastId + data.padding + 1;\n        }\n    }\n\n    function getLeaderIndex(uint256, uint256) public pure override returns (uint256) {\n        revert NotSupported();\n    }\n\n    function getLeaderAddressAtTime(uint256) public pure override returns (address) {\n        revert NotSupported();\n    }\n}\n"
    },
    "contracts/interfaces/IBaseChainV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBaseChainV1 {\n    /// @dev number of blocks (consensus rounds) saved in this contract\n    function blocksCount() external returns (uint32);\n\n    /// @dev number of all blocks that were generated before switching to this contract\n    /// please note, that there might be a gap of one block when we switching from old to new contract\n    /// see constructor for details\n    function blocksCountOffset() external returns (uint32);\n\n    function getLatestBlockId() external view returns (uint32);\n\n    function getBlockTimestamp(uint32 _blockId) external view returns (uint32);\n\n    function getStatus() external view returns (\n        uint256 blockNumber,\n        uint16 timePadding,\n        uint32 lastDataTimestamp,\n        uint32 lastId,\n        uint32 nextBlockId\n    );\n}\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n\ninterface IRegistry {\n    event LogRegistered(address indexed destination, bytes32 name);\n\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\n    /// This method can be used for contracts that for some reason do not have `getName` method\n    /// @param  _names array of contract names that we want to register\n    /// @param  _destinations array of contract addresses\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\n\n    /// @dev imports new contracts and override old addresses, if they exist.\n    /// Names of contracts are fetched directly from each contract by calling `getName`\n    /// @param  _destinations array of contract addresses\n    function importContracts(address[] calldata _destinations) external;\n\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\n    /// @param _newContract address of contract that will replace old one\n    function atomicUpdate(address _newContract) external;\n\n    /// @dev similar to `getAddress` but throws when contract name not exists\n    /// @param name contract name\n    /// @return contract address registered under provided name or throws, if does not exists\n    function requireAndGetAddress(bytes32 name) external view returns (address);\n\n    /// @param name contract name in a form of bytes32\n    /// @return contract address registered under provided name\n    function getAddress(bytes32 name) external view returns (address);\n\n    /// @param _name contract name\n    /// @return contract address assigned to the name or address(0) if not exists\n    function getAddressByString(string memory _name) external view returns (address);\n\n    /// @dev helper method that converts string to bytes32,\n    /// you can use to to generate contract name\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\n}\n"
    },
    "contracts/interfaces/IStakingBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingBank is IERC20 {\n    /// @param id address of validator wallet\n    /// @param location URL of the validator API\n    struct Validator {\n        address id;\n        string location;\n    }\n\n    event LogValidatorRegistered(address indexed id);\n    event LogValidatorUpdated(address indexed id);\n    event LogValidatorRemoved(address indexed id);\n    event LogMinAmountForStake(uint256 minAmountForStake);\n\n    /// @dev setter for `minAmountForStake`\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\n\n    /// @dev allows to stake `token` by validators\n    /// Validator needs to approve StakingBank beforehand\n    /// @param _value amount of tokens to stake\n    function stake(uint256 _value) external;\n\n    /// @dev notification about approval from `_from` address on UMB token\n    /// Staking bank will stake max approved amount from `_from` address\n    /// @param _from address which approved token spend for IStakingBank\n    function receiveApproval(address _from) external returns (bool success);\n\n    /// @dev withdraws stake tokens\n    /// it throws, when balance will be less than required minimum for stake\n    /// to withdraw all use `exit`\n    function withdraw(uint256 _value) external returns (bool success);\n\n    /// @dev unstake and withdraw all tokens\n    function exit() external returns (bool success);\n\n    /// @dev creates (register) new validator\n    /// @param _id validator address\n    /// @param _location location URL of the validator API\n    function create(address _id, string calldata _location) external;\n\n    /// @dev removes validator\n    /// @param _id validator wallet\n    function remove(address _id) external;\n\n    /// @dev updates validator location\n    /// @param _id validator wallet\n    /// @param _location new validator URL\n    function update(address _id, string calldata _location) external;\n\n    /// @return total number of registered validators (with and without balance)\n    function getNumberOfValidators() external view returns (uint256);\n\n    /// @dev gets validator address for provided index\n    /// @param _ix index in array of list of all validators wallets\n    function addresses(uint256 _ix) external view returns (address);\n\n    /// @param _id address of validator\n    /// @return id address of validator\n    /// @return location URL of validator\n    function validators(address _id) external view returns (address id, string memory location);\n}\n"
    },
    "contracts/interfaces/IStakingBankStatic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IStakingBank.sol\";\n\n\ninterface IStakingBankStatic is IStakingBank {\n    /// @param _validators array of validators addresses to verify\n    /// @return TRUE when all validators are valid, FALSE otherwise\n    function verifyValidators(address[] calldata _validators) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IUmbrellaFeeds.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUmbrellaFeeds {\n    struct PriceData {\n        /// @dev this is placeholder, that can be used for some additional data\n        /// atm of creating this smart contract, it is only used as marker for removed data (when == type(uint8).max)\n        uint8 data;\n        /// @dev heartbeat: how often price data will be refreshed in case price stay flat\n        uint24 heartbeat;\n        /// @dev timestamp: price time, at this time validators run consensus\n        uint32 timestamp;\n        /// @dev price\n        uint128 price;\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /// @dev method for submitting consensus data\n    /// @param _priceKeys array of keys for `_priceDatas`\n    /// @param _priceDatas PriceData signed by validators\n    /// @param _signatures validators signatures\n    function update(\n        bytes32[] calldata _priceKeys,\n        PriceData[] calldata _priceDatas,\n        Signature[] calldata _signatures\n    ) external;\n\n    /// @dev it will return array of price datas for provided `_keys`\n    /// In case ony of feed does not exist, fallback call will be executed for that feed.\n    /// @notice If data for any key not exists, function will revert. Use `getManyPriceDataRaw` method if you don't\n    /// want revert.\n    /// @param _keys array of feed keys\n    /// @return data PriceData array\n    function getManyPriceData(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\n\n    /// @dev same as getManyPriceData() but does not revert on empty data.\n    /// @notice This method does no revert if some data does not exists.\n    /// Check `data.timestamp` to see if price exist, if it is 0, then it does not exist.\n    function getManyPriceDataRaw(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\n\n    /// @dev this is main endpoint for reading feeds.\n    /// In case timestamp is empty (that means there is no data), contract will revert.\n    /// If you do not need whole data from `PriceData` struct, you can save some gas by using other view methods that\n    /// returns just what you need.\n    /// @notice method will revert if data for `_key` not exists.\n    /// @param _key hash of feed name\n    /// @return data full PriceData struct\n    function getPriceData(bytes32 _key) external view returns (PriceData memory data);\n\n    /// @notice reader for mapping\n    /// @param _key hash of feed name\n    /// @return data full PriceData struct\n    function prices(bytes32 _key) external view returns (PriceData memory data);\n\n    /// @notice method will revert if data for `_key` not exists.\n    /// @param _key hash of feed name\n    /// @return price\n    function getPrice(bytes32 _key) external view returns (uint128 price);\n\n    /// @notice method will revert if data for `_key` not exists.\n    /// @param _key hash of feed name\n    /// @return price\n    /// @return timestamp\n    function getPriceTimestamp(bytes32 _key) external view returns (uint128 price, uint32 timestamp);\n\n    /// @notice method will revert if data for `_key` not exists.\n    /// @param _key hash of feed name\n    /// @return price\n    /// @return timestamp\n    /// @return heartbeat\n    function getPriceTimestampHeartbeat(bytes32 _key)\n        external\n        view\n        returns (uint128 price, uint32 timestamp, uint24 heartbeat);\n\n    /// @dev This method should be used only for Layer2 as it is more gas consuming than others views.\n    /// @notice It does not revert on empty data.\n    /// @param _name string feed name\n    /// @return data PriceData\n    function getPriceDataByName(string calldata _name) external view returns (PriceData memory data);\n\n    /// @dev decimals for prices stored in this contract\n    function DECIMALS() external view returns (uint8); // solhint-disable-line func-name-mixedcase\n}\n"
    },
    "contracts/interfaces/StakingBankStaticNotSupported.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IStakingBank.sol\";\n\nabstract contract StakingBankStaticNotSupported is IStakingBank {\n    error NotSupported();\n\n    function create(address, string calldata) external pure {\n        revert NotSupported();\n    }\n\n    function update(address, string calldata) external pure {\n        revert NotSupported();\n    }\n\n    function remove(address) external pure {\n        revert NotSupported();\n    }\n\n    function transfer(address, uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function transferFrom(address, address, uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function receiveApproval(address) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function allowance(address, address) external pure returns (uint256) {\n        revert NotSupported();\n    }\n\n    function approve(address, uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function stake(uint256) external pure {\n        revert NotSupported();\n    }\n\n    function withdraw(uint256) external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function exit() external pure returns (bool) {\n        revert NotSupported();\n    }\n\n    function setMinAmountForStake(uint256) external pure {\n        revert NotSupported();\n    }\n}\n"
    },
    "contracts/mock/Distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../Registry.sol\";\n\ncontract Distributor is Ownable {\n    address[] public recipients;\n    uint256 public bottomLimit = 5e17;\n    uint256 public topLimit = 1e18;\n\n    constructor(address[] memory _recipients) {\n        recipients = _recipients;\n    }\n\n    receive() external payable {\n        distribute();\n    }\n\n    function setLimits(uint256 _bottom, uint256 _top) external onlyOwner {\n        bottomLimit = _bottom;\n        topLimit = _top;\n    }\n\n    function withdraw() external {\n        uint balance = address(this).balance;\n        uint buffer = recipients.length * (topLimit - bottomLimit);\n\n        if (balance > buffer) {\n            payable(owner()).transfer(balance - buffer);\n        }\n    }\n\n    function addRecipients(address[] calldata _recipients) external onlyOwner {\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            recipients.push(_recipients[i]);\n        }\n    }\n\n    function removeRecipient(address _recipient) external onlyOwner {\n        for (uint256 i = 0; i < recipients.length; i++) {\n            if (recipients[i] == _recipient) {\n                recipients[i] = recipients[recipients.length - 1];\n                recipients.pop();\n                return;\n            }\n        }\n    }\n\n    function recipientsCount() external view returns (uint256) {\n        return recipients.length;\n    }\n\n    function allRecipients() external view returns (address[] memory) {\n        return recipients;\n    }\n\n    function getName() external pure returns (bytes32) {\n        return \"Distributor\";\n    }\n\n    function distribute() public {\n        uint256 limit = bottomLimit;\n        uint256 top = topLimit;\n        uint256 count = recipients.length;\n        uint256 totalBalance = address(this).balance;\n\n        for (uint256 i = 0; i < count; i++) {\n            uint256 balance = recipients[i].balance;\n\n            if (balance > limit) {\n                continue;\n            }\n\n            uint256 amount = top - balance > totalBalance ? totalBalance : top - balance;\n\n            if (amount > 0) {\n                payable(recipients[i]).transfer(amount);\n                totalBalance -= amount;\n            }\n        }\n    }\n}\n"
    },
    "contracts/mock/LimitedMintingToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IStakingBank.sol\";\n\ncontract LimitedMintingToken is ERC20, Ownable {\n    struct MintData {\n        uint256 dailyAllowance;\n        mapping (address => uint256) lastMintTimestamp;\n        mapping (address => uint256) todaysMintedAmount;\n    }\n\n    MintData public mintData;\n\n    constructor(string memory _name, string memory _symbol, uint256 _dailyAllowance) ERC20(_name, _symbol) {\n        mintData.dailyAllowance = _dailyAllowance;\n    }\n\n    function mint(address _holder, uint256 _amount) external {\n        MintData storage data = mintData;\n\n        (uint256 limit, bool fullLimit) = _currentLimit(data);\n\n        require(limit > 0, \"This address already claimed the maximum daily amount\");\n\n        uint256 lastTimestamp = data.lastMintTimestamp[msg.sender];\n        uint256 mintedAmount = data.todaysMintedAmount[msg.sender];\n\n        uint256 amount = _amount > limit ? limit : _amount;\n        data.lastMintTimestamp[msg.sender] = fullLimit ? block.timestamp : lastTimestamp;\n        data.todaysMintedAmount[msg.sender] = fullLimit ? amount : mintedAmount + amount;\n\n        _mint(_holder, amount);\n    }\n\n    function mintApproveAndStake(IStakingBank _stakingBank, address _holder, uint256 _amount) external {\n        _mint(_holder, _amount);\n        _approve(_holder, address(_stakingBank), _amount);\n        _stakingBank.receiveApproval(_holder);\n    }\n\n    function getDailyAllowance() external view returns (uint256) {\n        return mintData.dailyAllowance;\n    }\n\n    function getName() external pure returns (bytes32) {\n        return \"UMB\";\n    }\n\n    function setDailyAllowance(uint256 newDailyAllowance) public onlyOwner {\n        MintData storage data = mintData;\n        data.dailyAllowance = newDailyAllowance;\n    }\n\n    function _currentLimit(MintData storage data) internal view returns (uint256 limit, bool fullLimit) {\n        uint256 lastMint = data.lastMintTimestamp[msg.sender];\n        fullLimit = block.timestamp - lastMint >= 24 hours;\n\n        uint256 usedLimit = data.todaysMintedAmount[msg.sender];\n\n        limit = fullLimit ? data.dailyAllowance : data.dailyAllowance - usedLimit;\n    }\n}\n"
    },
    "contracts/mock/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/IStakingBank.sol\";\n\n// please remember this is our dummy token!\n// it will be replaced by proper DPoS solution in future\ncontract Token is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol) ERC20(_name, _symbol) {\n    }\n\n    function mint(address _holder, uint256 _amount) external {\n        _mint(_holder, _amount);\n    }\n\n    function mintApproveAndStake(IStakingBank _stakingBank, address _holder, uint256 _amount) external {\n        _mint(_holder, _amount);\n        _approve(_holder, address(_stakingBank), _amount);\n        _stakingBank.receiveApproval(_holder);\n    }\n\n    function getName() external pure returns (bytes32) {\n        return \"UMB\";\n    }\n}\n"
    },
    "contracts/onChainFeeds/UmbrellaFeeds.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/IUmbrellaFeeds.sol\";\nimport \"../interfaces/IRegistry.sol\";\nimport \"../interfaces/IStakingBankStatic.sol\";\n\n/// @dev Main contract for all on-chain data.\n/// Check `UmbrellaFeedsReader` to see how to integrate.\n///\n/// @notice This contract can be destroyed and replaced with new one (with new address).\n/// For best gas efficiency you should pick one of two ways of integration:\n/// 1. make `UmbrellaFeeds` immutable and use fallback in case of selfdestruct. After new deployment, it is recommended\n/// to update address to avoid fallback and reduce gas cost to minimum. In long run this is most efficient solution,\n/// better than any proxy.\n/// 2. always check newest `UmbrellaFeeds` via `Regostry` and fallback will not be needed.\ncontract UmbrellaFeeds is IUmbrellaFeeds {\n    bytes constant public ETH_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\n    string constant public NAME = \"UmbrellaFeeds\";\n\n    /// @dev deployment time, used for protect for unintentional destroy\n    uint256 public immutable DEPLOYED_AT;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev Registry contract where list of all addresses is stored. Fallback feature uses this registry to\n    /// resolve newest `UmbrellaFeeds` address\n    IRegistry public immutable REGISTRY;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev StakingBank contract where list of validators is stored\n    IStakingBankStatic public immutable STAKING_BANK;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev minimal number of signatures required for accepting price submission (PoA)\n    uint16 public immutable REQUIRED_SIGNATURES; // solhint-disable-line var-name-mixedcase\n\n    /// @dev decimals for prices stored in this contract\n    uint8 public immutable DECIMALS;  // solhint-disable-line var-name-mixedcase\n\n    /// @notice map of all prices stored in this contract, key for map is hash of feed name\n    /// eg for \"ETH-USD\" feed, key will be hash(\"ETH-USD\")\n    mapping (bytes32 => PriceData) private _prices;\n\n    error ArraysDataDoNotMatch();\n    error FeedNotExist();\n    error NotEnoughSignatures();\n    error InvalidSigner();\n    error InvalidRequiredSignatures();\n    error SignaturesOutOfOrder();\n    error ECDSAInvalidSignatureS();\n    error ECDSAInvalidSignatureV();\n    error OldData();\n    error ContractInUse();\n    error ContractNotInitialised();\n\n    /// @param _contractRegistry Registry address\n    /// @param _requiredSignatures number of required signatures for accepting consensus submission\n    /// @param _decimals decimals for prices stored in this contract\n    constructor(\n        IRegistry _contractRegistry,\n        uint16 _requiredSignatures,\n        uint8 _decimals\n    ) {\n        if (_requiredSignatures == 0) revert InvalidRequiredSignatures();\n\n        REGISTRY = _contractRegistry;\n        REQUIRED_SIGNATURES = _requiredSignatures;\n        STAKING_BANK = IStakingBankStatic(_contractRegistry.requireAndGetAddress(\"StakingBank\"));\n        DECIMALS = _decimals;\n        DEPLOYED_AT = block.timestamp;\n    }\n\n    /// @dev destroys old contract\n    /// there is sanity check that prevents abuse of destroy method\n    /// @param _name string feed key to verify, that contract was initialised\n    function destroy(string calldata _name) external {\n        if (REGISTRY.getAddressByString(NAME) == address(this)) revert ContractInUse();\n\n        if (_prices[keccak256(abi.encodePacked(_name))].timestamp == 0 && DEPLOYED_AT + 3 days > block.timestamp) {\n            revert ContractNotInitialised();\n        }\n\n        selfdestruct(payable(msg.sender));\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function update(\n        bytes32[] calldata _priceKeys,\n        PriceData[] calldata _priceDatas,\n        Signature[] calldata _signatures\n    ) external {\n        if (_priceKeys.length != _priceDatas.length) revert ArraysDataDoNotMatch();\n\n        bytes32 priceDataHash = keccak256(abi.encode(getChainId(), address(this), _priceKeys, _priceDatas));\n        verifySignatures(priceDataHash, _signatures);\n\n        uint256 i;\n\n        while (i < _priceDatas.length) {\n            bytes32 priceKey = _priceKeys[i];\n\n            // we do not allow for older prices\n            // at the same time it prevents from reusing signatures\n            if (_prices[priceKey].timestamp >= _priceDatas[i].timestamp) revert OldData();\n\n            _prices[priceKey] = _priceDatas[i];\n\n            // atm there is no need for events, so in order to save gas, we do not emit any\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function getManyPriceData(bytes32[] calldata _keys) external view returns (PriceData[] memory data) {\n        data = new PriceData[](_keys.length);\n\n        for (uint256 i; i < _keys.length;) {\n            data[i] = _prices[_keys[i]];\n            if (data[i].timestamp == 0) revert FeedNotExist();\n\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function getManyPriceDataRaw(bytes32[] calldata _keys) external view returns (PriceData[] memory data) {\n        data = new PriceData[](_keys.length);\n\n        for (uint256 i; i < _keys.length;) {\n            data[i] = _prices[_keys[i]];\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function prices(bytes32 _key) external view returns (PriceData memory data) {\n        data = _prices[_key];\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function getPriceData(bytes32 _key) external view returns (PriceData memory data) {\n        data = _prices[_key];\n        if (data.timestamp == 0) revert FeedNotExist();\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function getPrice(bytes32 _key) external view returns (uint128 price) {\n        PriceData memory data = _prices[_key];\n        if (data.timestamp == 0) revert FeedNotExist();\n\n        return data.price;\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function getPriceTimestamp(bytes32 _key) external view returns (uint128 price, uint32 timestamp) {\n        PriceData memory data = _prices[_key];\n        if (data.timestamp == 0) revert FeedNotExist();\n\n        return (data.price, data.timestamp);\n    }\n\n    function getPriceTimestampHeartbeat(bytes32 _key)\n        external\n        view\n        returns (uint128 price, uint32 timestamp, uint24 heartbeat)\n    {\n        PriceData memory data = _prices[_key];\n        if (data.timestamp == 0) revert FeedNotExist();\n\n        return (data.price, data.timestamp, data.heartbeat);\n    }\n\n    /// @inheritdoc IUmbrellaFeeds\n    function getPriceDataByName(string calldata _name) external view returns (PriceData memory data) {\n        bytes32 key = keccak256(abi.encodePacked(_name));\n        data = _prices[key];\n    }\n\n    /// @dev helper method for QA purposes\n    /// @return hash of data that are signed by validators (keys and priced data)\n    function hashData(bytes32[] calldata _priceKeys, PriceData[] calldata _priceDatas)\n        external\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(getChainId(), address(this), _priceKeys, _priceDatas));\n    }\n\n    /// @param _hash hash of signed data\n    /// @param _signatures array of validators signatures\n    function verifySignatures(bytes32 _hash, Signature[] calldata _signatures) public view {\n        address prevSigner = address(0x0);\n\n        if (_signatures.length < REQUIRED_SIGNATURES) revert NotEnoughSignatures();\n\n        address[] memory validators = new address[](REQUIRED_SIGNATURES);\n\n        // to save gas we check only required number of signatures\n        // case, where you can have part of signatures invalid but still enough valid in total is not supported\n        for (uint256 i; i < REQUIRED_SIGNATURES;) {\n            (uint8 v, bytes32 r, bytes32 s) = (_signatures[i].v, _signatures[i].r, _signatures[i].s);\n\n            if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n                revert ECDSAInvalidSignatureS();\n            }\n\n            if (uint8(v) != 27 && uint8(v) != 28) revert ECDSAInvalidSignatureV();\n\n            address signer = recoverSigner(_hash, v, r, s);\n            if (prevSigner >= signer) revert SignaturesOutOfOrder();\n\n            // because we check only required number of signatures, any invalid one will cause revert\n            prevSigner = signer;\n            validators[i] = signer;\n\n            unchecked { i++; }\n        }\n\n        // bulk verification can optimise gas when we have 5 or more validators\n        if (!STAKING_BANK.verifyValidators(validators)) revert InvalidSigner();\n    }\n\n    function getChainId() public view returns (uint256 id) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n    }\n\n    /// @param _hash hashed of data\n    /// @param _v part of signature\n    /// @param _r part of signature\n    /// @param _s part of signature\n    /// @return signer address\n    function recoverSigner(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\n        bytes32 hash = keccak256(abi.encodePacked(ETH_PREFIX, _hash));\n        return ecrecover(hash, _v, _r, _s);\n    }\n\n    /// @dev to follow Registrable interface\n    function getName() public pure returns (bytes32) {\n        return \"UmbrellaFeeds\";\n    }\n}\n"
    },
    "contracts/onChainFeeds/UmbrellaFeedsReader.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/IRegistry.sol\";\nimport \"../interfaces/IUmbrellaFeeds.sol\";\n\n/// @dev This is optional price reader for just one feed.\n/// It comes with chanilink interface that makes migration process easier.\n/// For maximum gas optimisation it is recommended to use UmbrellaFeeds directly - simply follow this contract as\n/// a guide for integration.\n///\n/// This contract has build in fallback feature in case, `UmbrellaFeeds` will be replaced by newer contract.\n/// Fallback is transparent for the user, no additional setup is needed.\n///\n/// How fallback feature works? If data for provided key is empty (when UmbrellaFeeds was destroyed and replaced),\n/// contract will execute following procedure:\n/// 1. if data is empty, contract will check if there is new registered contract with requested data\n/// 2. if data is found in new contract it will be returned\n/// 3. if there is no data or there is no new contract tx will revert.\ncontract UmbrellaFeedsReader {\n    /// @dev Registry contract where list of all addresses is stored. Fallback feature uses this registry to\n    /// resolve newest `UmbrellaFeeds` address\n    IRegistry public immutable REGISTRY;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev contract where all the feeds are stored\n    address public immutable UMBRELLA_FEEDS;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev key (hash of string key), under which feed is being stored\n    bytes32 public immutable KEY;  // solhint-disable-line var-name-mixedcase\n\n    /// @dev string representation of feed key (feed name)\n    string public description;\n\n    /// @dev decimals for feed\n    uint8 internal immutable _DECIMALS;  // solhint-disable-line var-name-mixedcase\n\n    error EmptyAddress();\n    error FeedNotExist();\n\n    /// @param _registry IRegistry address\n    /// @param _umbrellaFeeds UmbrellaFeeds address\n    /// @param _key price data key (before hashing)\n    constructor(IRegistry _registry, IUmbrellaFeeds _umbrellaFeeds, string memory _key) {\n        if (address(_registry) == address(0)) revert EmptyAddress();\n\n        REGISTRY = _registry;\n        UMBRELLA_FEEDS = address(_umbrellaFeeds);\n        description = _key;\n        _DECIMALS = _umbrellaFeeds.DECIMALS();\n\n        bytes32 hash = keccak256(abi.encodePacked(_key));\n        KEY = hash;\n\n        // sanity check\n        _umbrellaFeeds.getPriceData(hash);\n    }\n\n    /// @dev decimals for feed\n    function decimals() external view returns (uint8) {\n        return _DECIMALS;\n    }\n\n    /// @dev this method follows chainlink interface for easy migration, NOTE: not all returned data are covered!\n    /// latestRoundData() raise exception when there is no data, instead of returning unset values,\n    /// which could be misinterpreted as actual reported values.\n    /// It DOES NOT raise when data is outdated (based on heartbeat and timestamp).\n    /// @notice You can save some gas by doing call directly to `UMBRELLA_FEEDS` contract.\n    /// @return uint80 originally `roundId`, not in use, always 0\n    /// @return answer price\n    /// @return uint256 originally `startedAt`, not in use, always 0\n    /// @return updatedAt last timestamp data was updated\n    /// @return uint80 originally `answeredInRound` not in use, always 0\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 /* roundId */,\n            int256 answer,\n            uint256 /* startedAt */,\n            uint256 updatedAt,\n            uint80 /* answeredInRound */\n        )\n    {\n        IUmbrellaFeeds.PriceData memory priceData = _getPriceDataRaw();\n\n        if (priceData.timestamp == 0) {\n            priceData = _fallbackCall();\n        }\n\n        return (0, int256(uint256(priceData.price)), 0, priceData.timestamp, 0);\n    }\n\n    /// @dev this is main endpoint for reading feed. Feed is read from UmbrellaFeeds contract using hardcoded `KEY`.\n    /// In case timestamp is empty (that means there is no data), contract will execute fallback call.\n    /// @notice revert on empty data\n    function getPriceData() external view returns (IUmbrellaFeeds.PriceData memory priceData) {\n        priceData = _getPriceDataRaw();\n\n        if (priceData.timestamp == 0) {\n            priceData = _fallbackCall();\n        }\n    }\n\n    /// @dev same as `getPriceData` but does not revert when no data\n    function getPriceDataRaw() external view returns (IUmbrellaFeeds.PriceData memory priceData) {\n        priceData = _getPriceDataRaw();\n\n        if (priceData.timestamp == 0) {\n            return _fallbackCallRaw();\n        }\n    }\n\n    /// @dev same as `getPriceData` but does not revert when no data\n    function _getPriceDataRaw() internal view returns (IUmbrellaFeeds.PriceData memory priceData) {\n        (bool success, bytes memory data) = UMBRELLA_FEEDS.staticcall(\n            abi.encodeWithSelector(IUmbrellaFeeds.prices.selector, KEY)\n        );\n\n        if (success && data.length != 0) {\n            priceData = abi.decode(data, (IUmbrellaFeeds.PriceData));\n        }\n    }\n\n    /// @dev it will revert on empty data\n    function _fallbackCall() internal view returns (IUmbrellaFeeds.PriceData memory data) {\n        address umbrellaFeeds = REGISTRY.getAddressByString(\"UmbrellaFeeds\");\n\n        // if contract was NOT updated, fallback is not needed, data does not exist - revert\n        if (umbrellaFeeds == UMBRELLA_FEEDS) revert FeedNotExist();\n\n        data = IUmbrellaFeeds(umbrellaFeeds).getPriceData(KEY);\n    }\n\n    /// @dev it will not revert on empty data\n    function _fallbackCallRaw() internal view returns (IUmbrellaFeeds.PriceData memory data) {\n        address umbrellaFeeds = REGISTRY.getAddressByString(\"UmbrellaFeeds\");\n\n        // if contract was updated, we do fallback\n        if (umbrellaFeeds != UMBRELLA_FEEDS) {\n            data = IUmbrellaFeeds(umbrellaFeeds).prices(KEY);\n        }\n    }\n}\n"
    },
    "contracts/onChainFeeds/UmbrellaFeedsReaderFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/IRegistry.sol\";\nimport \"../interfaces/IStakingBank.sol\";\n\nimport \"./UmbrellaFeedsReader.sol\";\n\n/// @notice Factory to deploy UmbrellaFeedsReader contract\ncontract UmbrellaFeedsReaderFactory {\n    /// @dev Registry contract where list of all addresses is stored. Used to resolve newest `UmbrellaFeeds` address\n    IRegistry public immutable REGISTRY; // solhint-disable-line var-name-mixedcase\n\n    /// @dev list of all readers\n    mapping (bytes32 => UmbrellaFeedsReader) public readers;\n\n    event NewUmbrellaFeedsReader(UmbrellaFeedsReader indexed umbrellaFeedsReader, string feedName);\n\n    error EmptyAddress();\n\n    constructor(IRegistry _registry) {\n        if (address(_registry) == address(0)) revert EmptyAddress();\n\n        REGISTRY = _registry;\n    }\n\n    /// @dev Method to deploy new UmbrellaFeedsReader for particular key.\n    /// This deployment is optional and it can be done by anyone who needs it.\n    /// Reader can be used to simplify migration from Chainlink to Umbrella.\n    ///\n    /// Check UmbrellaFeedsReader docs for more details.\n    ///\n    /// We not using minimal proxy because it does not allow for immutable variables.\n    /// @param _feedName string Feed name that is registered in UmbrellaFeeds\n    /// @return reader UmbrellaFeedsReader contract address, in case anyone wants to use it from Layer1\n    function deploy(string memory _feedName) external returns (UmbrellaFeedsReader reader) {\n        reader = deployed(_feedName);\n        IUmbrellaFeeds umbrellaFeeds = IUmbrellaFeeds(REGISTRY.getAddressByString(\"UmbrellaFeeds\"));\n\n        // if UmbrellaFeeds contract is up to date, there is no need to redeploy\n        if (address(reader) != address(0) && address(reader.UMBRELLA_FEEDS()) == address(umbrellaFeeds)) {\n            return reader;\n        }\n\n        reader = new UmbrellaFeedsReader(REGISTRY, umbrellaFeeds, _feedName);\n        readers[hash(_feedName)] = reader;\n\n        emit NewUmbrellaFeedsReader(reader, _feedName);\n    }\n\n    function deployed(string memory _feedName) public view returns (UmbrellaFeedsReader) {\n        return readers[hash(_feedName)];\n    }\n\n    function hash(string memory _feedName) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_feedName));\n    }\n\n    /// @dev to follow Registrable interface\n    function getName() public pure returns (bytes32) {\n        return \"UmbrellaFeedsReaderFactory\";\n    }\n}\n"
    },
    "contracts/Registry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n// Inheritance\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./extensions/Registrable.sol\";\nimport \"./interfaces/IRegistry.sol\";\n\n/// @dev contracts registry\n/// protocol uses this registry to fetch current contract addresses\ncontract Registry is IRegistry, Ownable {\n    /// name => contract address\n    mapping(bytes32 => address) public registry;\n\n\n    error NameNotRegistered();\n    error ArraysDataDoNotMatch();\n\n    /// @inheritdoc IRegistry\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external onlyOwner {\n        if (_names.length != _destinations.length) revert ArraysDataDoNotMatch();\n\n        for (uint i = 0; i < _names.length;) {\n            registry[_names[i]] = _destinations[i];\n            emit LogRegistered(_destinations[i], _names[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc IRegistry\n    function importContracts(address[] calldata _destinations) external onlyOwner {\n        for (uint i = 0; i < _destinations.length;) {\n            bytes32 name = Registrable(_destinations[i]).getName();\n            registry[name] = _destinations[i];\n            emit LogRegistered(_destinations[i], name);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc IRegistry\n    function atomicUpdate(address _newContract) external onlyOwner {\n        Registrable(_newContract).register();\n\n        bytes32 name = Registrable(_newContract).getName();\n        address oldContract = registry[name];\n        registry[name] = _newContract;\n\n        Registrable(oldContract).unregister();\n\n        emit LogRegistered(_newContract, name);\n    }\n\n    /// @inheritdoc IRegistry\n    function requireAndGetAddress(bytes32 name) external view returns (address) {\n        address _foundAddress = registry[name];\n        if (_foundAddress == address(0)) revert NameNotRegistered();\n\n        return _foundAddress;\n    }\n\n    /// @inheritdoc IRegistry\n    function getAddress(bytes32 _bytes) external view returns (address) {\n        return registry[_bytes];\n    }\n\n    /// @inheritdoc IRegistry\n    function getAddressByString(string memory _name) public view returns (address) {\n        return registry[stringToBytes32(_name)];\n    }\n\n    /// @inheritdoc IRegistry\n    function stringToBytes32(string memory _string) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(_string);\n\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            result := mload(add(_string, 32))\n        }\n    }\n}\n"
    },
    "contracts/stakingBankStatic/StakingBankStatic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/StakingBankStaticNotSupported.sol\";\n\n/// @dev Because we are using PoA in UMB oracle, staked balance does not matter. What's matter is, if signer is\n/// validator or not. In this case  we can optimise `StakingBank` and make it static for better gas performance.\nabstract contract StakingBankStatic is StakingBankStaticNotSupported {\n    uint256 public constant ONE = 1e18;\n\n    uint256 public immutable NUMBER_OF_VALIDATORS; // solhint-disable-line var-name-mixedcase\n    uint256 public immutable TOTAL_SUPPLY; // solhint-disable-line var-name-mixedcase\n\n    constructor(uint256 _validatorsCount) {\n        NUMBER_OF_VALIDATORS = _validatorsCount;\n        TOTAL_SUPPLY = _validatorsCount * ONE;\n\n        _assertValidSetup(_validatorsCount);\n    }\n\n    function balances(address _validator) external view returns (uint256) {\n        return _isValidator(_validator) ? ONE : 0;\n    }\n\n    function verifyValidators(address[] calldata _validators) external view returns (bool) {\n        for (uint256 i; i < _validators.length;) {\n            if (!_isValidator(_validators[i])) return false;\n            unchecked { i++; }\n        }\n\n        return true;\n    }\n\n    function getNumberOfValidators() external view returns (uint256) {\n        return NUMBER_OF_VALIDATORS;\n    }\n\n    function getAddresses() external view returns (address[] memory) {\n        return _addresses();\n    }\n\n    function getBalances() external view returns (uint256[] memory allBalances) {\n        allBalances = new uint256[](NUMBER_OF_VALIDATORS);\n\n        for (uint256 i; i < NUMBER_OF_VALIDATORS;) {\n            allBalances[i] = ONE;\n\n            unchecked {\n                // we will not have enough data to overflow\n                i++;\n            }\n        }\n    }\n\n    function addresses(uint256 _ix) external view returns (address) {\n        return _addresses()[_ix];\n    }\n\n    function validators(address _id) external view virtual returns (address id, string memory location);\n\n    /// @dev to follow ERC20 interface\n    function balanceOf(address _account) external view returns (uint256) {\n        return _isValidator(_account) ? ONE : 0;\n    }\n\n    /// @dev to follow ERC20 interface\n    function totalSupply() external view returns (uint256) {\n        return TOTAL_SUPPLY;\n    }\n\n    /// @dev to follow Registrable interface\n    function getName() external pure returns (bytes32) {\n        return \"StakingBank\";\n    }\n\n    /// @dev to follow Registrable interface\n    function register() external pure {\n        // there are no requirements atm\n    }\n\n    /// @dev to follow Registrable interface\n    function unregister() external pure {\n        // there are no requirements atm\n    }\n\n    function _addresses() internal view virtual returns (address[] memory);\n\n    function _isValidator(address _validator) internal view virtual returns (bool);\n\n    function _assertValidSetup(uint256 _validatorsCount) internal view virtual{\n        address[] memory list = _addresses();\n        require(list.length == _validatorsCount);\n\n        for (uint256 i; i < _validatorsCount;) {\n            require(_isValidator(list[i]));\n\n            unchecked { i ++; }\n        }\n    }\n}\n"
    },
    "contracts/stakingBankStatic/StakingBankStaticCI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./StakingBankStatic.sol\";\n\n\ncontract StakingBankStaticCI is StakingBankStatic {\n    // 0x87630b2d1de0fbd5044eb6891b3d9d98c34c8d310c852f98550ba774480e47cc\n    address public constant VALIDATOR_0 = 0x2fFd013AaA7B5a7DA93336C2251075202b33FB2B;\n    // 0x3f1e8b94c70206bf816c1ed0b15ad98bdf225ae4c6e7e4eee6cdbcf706fda2ae\n    address public constant VALIDATOR_1 = 0x43158ea338Ff13D0bDa0c3EB969B9EA5a624E7Cc;\n    // 0x5da6b84117504d06b5dcd52b990d76965d2882f4e5852eb610bc76e4209b10d7\n    address public constant VALIDATOR_2 = 0x9Fd8DD0627b9A32399Fd115c4725C7e17BC40e6d;\n    // 0x1e5012671de3332ad0b43661984e94ab0e405bffddc9d3e863055040bab354b8\n    address public constant VALIDATOR_3 = 0xa3F3659E469b7aE0b249546338DEdc0b684edB05;\n    // 0x0edc1e35ea7701ddac703286674e79f04addbf5d2f6162fabc19d39bd3dc6662\n    address public constant VALIDATOR_4 = 0xB98A954B9036DF144d685E910bfbAEC6B33A8d11;\n    // 0x23c601ae397441f3ef6f1075dcb0031ff17fb079837beadaf3c84d96c6f3e569\n    address public constant VALIDATOR_5 = 0xE5904695748fe4A84b40b3fc79De2277660BD1D3;\n\n\n    constructor(uint256 _validatorsCount) StakingBankStatic(_validatorsCount) {}\n\n    function validators(address _id) external pure override returns (address id, string memory location) {\n        if (_id == VALIDATOR_0) return (_id, \"https://validator.ci.umb.network\");\n        if (_id == VALIDATOR_1) return (_id, \"https://validator2.ci.umb.network\");\n        if (_id == VALIDATOR_2) return (_id, \"https://validator3.ci.umb.network\");\n        if (_id == VALIDATOR_3) return (_id, \"https://validator4.ci.umb.network\");\n        if (_id == VALIDATOR_4) return (_id, \"https://validator5.ci.umb.network\");\n        if (_id == VALIDATOR_5) return (_id, \"https://validator6.ci.umb.network\");\n\n        return (address(0), \"\");\n    }\n\n    function _addresses() internal view override returns (address[] memory) {\n        address[] memory list = new address[](NUMBER_OF_VALIDATORS);\n\n        list[0] = VALIDATOR_0;\n        list[1] = VALIDATOR_1;\n        list[2] = VALIDATOR_2;\n        list[3] = VALIDATOR_3;\n        list[4] = VALIDATOR_4;\n        list[5] = VALIDATOR_5;\n\n        return list;\n    }\n\n    function _isValidator(address _validator) internal pure override returns (bool) {\n        return (_validator == VALIDATOR_0\n            || _validator == VALIDATOR_1\n            || _validator == VALIDATOR_2\n            || _validator == VALIDATOR_3\n            || _validator == VALIDATOR_4\n            || _validator == VALIDATOR_5\n        );\n    }\n}\n"
    },
    "contracts/stakingBankStatic/StakingBankStaticDev.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./StakingBankStatic.sol\";\n\n\ncontract StakingBankStaticDev is StakingBankStatic {\n    address public constant VALIDATOR_0 = 0xDc3eBc37DA53A644D67E5E3b5BA4EEF88D969d5C;\n    address public constant VALIDATOR_1 = 0x998cb7821e605cC16b6174e7C50E19ADb2Dd2fB0;\n\n    constructor(uint256 _validatorsCount) StakingBankStatic(_validatorsCount) {}\n\n    function validators(address _id) external pure override returns (address id, string memory location) {\n        if (_id == VALIDATOR_0) return (_id, \"https://validator.dev.umb.network\");\n        if (_id == VALIDATOR_1) return (_id, \"https://validator2.dev.umb.network\");\n\n        return (address(0), \"\");\n    }\n\n    function _addresses() internal view override returns (address[] memory) {\n        address[] memory list = new address[](NUMBER_OF_VALIDATORS);\n\n        list[0] = VALIDATOR_0;\n        list[1] = VALIDATOR_1;\n\n        return list;\n    }\n\n    function _isValidator(address _validator) internal pure override returns (bool) {\n        return (_validator == VALIDATOR_0 || _validator == VALIDATOR_1);\n    }\n}\n"
    },
    "contracts/stakingBankStatic/StakingBankStaticLocal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./StakingBankStatic.sol\";\n\n\ncontract StakingBankStaticLocal is StakingBankStatic {\n    address public constant VALIDATOR_0 = 0xeAD9C93b79Ae7C1591b1FB5323BD777E86e150d4;\n\n    constructor(uint256 _validatorsCount) StakingBankStatic(_validatorsCount) {}\n\n    function validators(address _id) external pure override returns (address id, string memory location) {\n        if (_id == VALIDATOR_0) return (_id, \"localhost\");\n\n        return (address(0), \"\");\n    }\n\n    function _addresses() internal view override returns (address[] memory) {\n        address[] memory list = new address[](NUMBER_OF_VALIDATORS);\n\n        list[0] = VALIDATOR_0;\n\n        return list;\n    }\n\n    function _isValidator(address _validator) internal pure override returns (bool) {\n        return (_validator == VALIDATOR_0);\n    }\n}\n"
    },
    "contracts/stakingBankStatic/StakingBankStaticProd.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./StakingBankStatic.sol\";\n\ncontract StakingBankStaticProd is StakingBankStatic {\n    address public constant VALIDATOR_0 = 0x977Ba523420110e230643B772Fe9cF955e11dA7B;\n    address public constant VALIDATOR_1 = 0xe2422b23e52bc13ebA04d7FbB9F332Deb43360fB;\n\n    // external order is based on validators submits on AVAX for Apr 2023\n    address public constant VALIDATOR_2 = 0x57F404aD75e371c1A539589C1eFCA12e0C6980AD;\n    address public constant VALIDATOR_3 = 0xD56C6A4f64E0bD70260472d1DB6Cf5825858CB0d;\n    address public constant VALIDATOR_4 = 0x220230Eda8f50067Dd9e4729345dabCCe0C61542;\n    address public constant VALIDATOR_5 = 0x93FdcAB283b0BcAc48157590af482E1CFd6af6aC;\n    address public constant VALIDATOR_6 = 0xCd733E06B06083d52fC5867E8E3432aA5c103A38;\n    address public constant VALIDATOR_7 = 0x42e210b110c6aa49CdfA7ceF1444Aa4719653111;\n    address public constant VALIDATOR_8 = 0x501731c6a69803a53Ec6c3e12f293c247cE1092B;\n    address public constant VALIDATOR_9 = 0x8bF9661F1b247522C75DD0FE84355aD2EfF27144;\n    address public constant VALIDATOR_10 = 0x281754Ab58391A478B7aA4E7f39991CfB41118c4;\n    address public constant VALIDATOR_11 = 0xB9C63a350A04d8BD245d18928a26EE036352dDd8;\n    address public constant VALIDATOR_12 = 0x57A51D5BDcE188c2295fCA3b4687475a54E65A02;\n    address public constant VALIDATOR_13 = 0x777FbA3666fa7747476a34577FcCC404b263E09F;\n    address public constant VALIDATOR_14 = 0x2F85824B2B38F179E451988670935d315b5b9692;\n    address public constant VALIDATOR_15 = 0xA7241994267682de4dE7Ef62f52dc2C783d1784B;\n    address public constant VALIDATOR_16 = 0x6eEd457C20603EDAE50C3A112CAA1a9425321bD0;\n    address public constant VALIDATOR_17 = 0xC5a7650c2725a7B6A39f15cb9FbffC7af357AFeb;\n    address public constant VALIDATOR_18 = 0xFEd95453678920c1b7b3A81F033Ca02a27225556;\n\n    constructor(uint256 _validatorsCount) StakingBankStatic(_validatorsCount) {}\n\n    // solhint-disable-next-line code-complexity\n    function validators(address _id) external pure override returns (address id, string memory location) {\n        if (_id == VALIDATOR_0) return (_id, \"https://validator.umb.network\");\n        if (_id == VALIDATOR_1) return (_id, \"https://validator2.umb.network\");\n        if (_id == VALIDATOR_2) return (_id, \"https://umbrella.artemahr.tech\");\n        if (_id == VALIDATOR_3) return (_id, \"https://umb.vtabsolutions.com:3030\");\n        if (_id == VALIDATOR_4) return (_id, \"https://umb.stakers.world\");\n        if (_id == VALIDATOR_5) return (_id, \"https://umbrella.crazywhale.es\");\n        if (_id == VALIDATOR_6) return (_id, \"https://umbrella-node.gateomega.com\");\n        if (_id == VALIDATOR_7) return (_id, \"https://umb.anorak.technology\");\n        if (_id == VALIDATOR_8) return (_id, \"https://umbrella.validator.infstones.io\");\n        if (_id == VALIDATOR_9) return (_id, \"https://umb.hashquark.io\");\n        if (_id == VALIDATOR_10) return (_id, \"http://umbrella.staking4all.org:3000\");\n        if (_id == VALIDATOR_11) return (_id, \"https://umbrella-api.validatrium.club\");\n        if (_id == VALIDATOR_12) return (_id, \"http://5.161.78.230:3000\");\n        if (_id == VALIDATOR_13) return (_id, \"https://umbnode.blockchainliverpool.com\");\n        if (_id == VALIDATOR_14) return (_id, \"https://umb-api.staking.rocks\");\n        if (_id == VALIDATOR_15) return (_id, \"https://rpc.urbanhq.net\");\n        if (_id == VALIDATOR_16) return (_id, \"https://umbrella-node.ankastake.com\");\n        if (_id == VALIDATOR_17) return (_id, \"https://umbrella.tchambrella.com\");\n        if (_id == VALIDATOR_18) return (_id, \"https://umbrella-node.cmt13.eu\");\n\n        return (address(0), \"\");\n    }\n\n    function _addresses() internal view override returns (address[] memory) {\n        address[] memory list = new address[](NUMBER_OF_VALIDATORS);\n\n        list[0] = VALIDATOR_0;\n        list[1] = VALIDATOR_1;\n        list[2] = VALIDATOR_2;\n        list[3] = VALIDATOR_3;\n        list[4] = VALIDATOR_4;\n        list[5] = VALIDATOR_5;\n        list[6] = VALIDATOR_6;\n        list[7] = VALIDATOR_7;\n        list[8] = VALIDATOR_8;\n        list[9] = VALIDATOR_9;\n        list[10] = VALIDATOR_10;\n        list[11] = VALIDATOR_11;\n        list[12] = VALIDATOR_12;\n        list[13] = VALIDATOR_13;\n        list[14] = VALIDATOR_14;\n        list[15] = VALIDATOR_15;\n        list[16] = VALIDATOR_16;\n        list[17] = VALIDATOR_17;\n        list[18] = VALIDATOR_18;\n\n        return list;\n    }\n\n    function _isValidator(address _validator) internal pure override returns (bool) {\n        return (\n            _validator == VALIDATOR_0\n            || _validator == VALIDATOR_1\n            || _validator == VALIDATOR_2\n            || _validator == VALIDATOR_3\n            || _validator == VALIDATOR_4\n            || _validator == VALIDATOR_5\n            || _validator == VALIDATOR_6\n            || _validator == VALIDATOR_7\n            || _validator == VALIDATOR_8\n            || _validator == VALIDATOR_9\n            || _validator == VALIDATOR_10\n            || _validator == VALIDATOR_11\n            || _validator == VALIDATOR_12\n            || _validator == VALIDATOR_13\n            || _validator == VALIDATOR_14\n            || _validator == VALIDATOR_15\n            || _validator == VALIDATOR_16\n            || _validator == VALIDATOR_17\n            || _validator == VALIDATOR_18\n        );\n    }\n}\n"
    },
    "contracts/stakingBankStatic/StakingBankStaticSbx.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./StakingBankStatic.sol\";\n\n\ncontract StakingBankStaticSbx is StakingBankStatic {\n    address public constant VALIDATOR_0 = 0xE3bDa0C6E1fBB111091Dfef6f22a673b20Ea5F50;\n    address public constant VALIDATOR_1 = 0xc1773490F00963CBAb3841fc07C1a0796E658Ba2;\n\n    constructor(uint256 _validatorsCount) StakingBankStatic(_validatorsCount) {}\n\n    function validators(address _id) external pure override returns (address id, string memory location) {\n        if (_id == VALIDATOR_0) return (_id, \"https://validator.sbx.umb.network\");\n        if (_id == VALIDATOR_1) return (_id, \"https://validator2.sbx.umb.network\");\n\n        return (address(0), \"\");\n    }\n\n    function _addresses() internal view override returns (address[] memory) {\n        address[] memory list = new address[](NUMBER_OF_VALIDATORS);\n\n        list[0] = VALIDATOR_0;\n        list[1] = VALIDATOR_1;\n\n        return list;\n    }\n\n    function _isValidator(address _validator) internal pure override returns (bool) {\n        return (_validator == VALIDATOR_0 || _validator == VALIDATOR_1);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}