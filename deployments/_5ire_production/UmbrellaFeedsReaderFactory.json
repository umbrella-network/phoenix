{
  "address": "0xD12EbD0892BC812218688Dcd90DD6FE160aE092A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract UmbrellaFeedsReader",
          "name": "umbrellaFeedsReader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedName",
          "type": "string"
        }
      ],
      "name": "NewUmbrellaFeedsReader",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_feedName",
          "type": "string"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract UmbrellaFeedsReader",
          "name": "reader",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_feedName",
          "type": "string"
        }
      ],
      "name": "deployed",
      "outputs": [
        {
          "internalType": "contract UmbrellaFeedsReader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_feedName",
          "type": "string"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "readers",
      "outputs": [
        {
          "internalType": "contract UmbrellaFeedsReader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb609354ba257ea7616ddd9c3e6af8bc31723d79d5d4a6e9352d466f5e14c2bc8",
  "receipt": {
    "to": null,
    "from": "0xA6e4fFa19B213AbeA258ae72e8e1a209B9E543e7",
    "contractAddress": "0xD12EbD0892BC812218688Dcd90DD6FE160aE092A",
    "transactionIndex": 0,
    "gasUsed": "2038111",
    "logsBloom": "0x
    "blockHash": "0x90ce207a4e3e1b81802df338a99c0a33a372459bec92fe9180f4f31ea22991c1",
    "transactionHash": "0xb609354ba257ea7616ddd9c3e6af8bc31723d79d5d4a6e9352d466f5e14c2bc8",
    "logs": [],
    "blockNumber": 4137904,
    "cumulativeGasUsed": "2038111",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4A28406ECE8fFd7A91789738a5ac15DAc44bFa1b"
  ],
  "numDeployments": 1,
  "solcInputHash": "dc68422c0ad35a4fe46d461b096b9383",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract UmbrellaFeedsReader\",\"name\":\"umbrellaFeedsReader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"}],\"name\":\"NewUmbrellaFeedsReader\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_feedName\",\"type\":\"string\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract UmbrellaFeedsReader\",\"name\":\"reader\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_feedName\",\"type\":\"string\"}],\"name\":\"deployed\",\"outputs\":[{\"internalType\":\"contract UmbrellaFeedsReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_feedName\",\"type\":\"string\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"readers\",\"outputs\":[{\"internalType\":\"contract UmbrellaFeedsReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(string)\":{\"details\":\"Method to deploy new UmbrellaFeedsReader for particular key. This deployment is optional and it can be done by anyone who needs it. Reader can be used to simplify migration from Chainlink to Umbrella. Check UmbrellaFeedsReader docs for more details. We not using minimal proxy because it does not allow for immutable variables.\",\"params\":{\"_feedName\":\"string Feed name that is registered in UmbrellaFeeds\"},\"returns\":{\"reader\":\"UmbrellaFeedsReader contract address, in case anyone wants to use it from Layer1\"}},\"getName()\":{\"details\":\"to follow Registrable interface\"}},\"stateVariables\":{\"REGISTRY\":{\"details\":\"Registry contract where list of all addresses is stored. Used to resolve newest `UmbrellaFeeds` address\"},\"readers\":{\"details\":\"list of all readers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Factory to deploy UmbrellaFeedsReader contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/onChainFeeds/UmbrellaFeedsReaderFactory.sol\":\"UmbrellaFeedsReaderFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IRegistry {\\n    event LogRegistered(address indexed destination, bytes32 name);\\n\\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\\n    /// This method can be used for contracts that for some reason do not have `getName` method\\n    /// @param  _names array of contract names that we want to register\\n    /// @param  _destinations array of contract addresses\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\\n\\n    /// @dev imports new contracts and override old addresses, if they exist.\\n    /// Names of contracts are fetched directly from each contract by calling `getName`\\n    /// @param  _destinations array of contract addresses\\n    function importContracts(address[] calldata _destinations) external;\\n\\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\\n    /// @param _newContract address of contract that will replace old one\\n    function atomicUpdate(address _newContract) external;\\n\\n    /// @dev similar to `getAddress` but throws when contract name not exists\\n    /// @param name contract name\\n    /// @return contract address registered under provided name or throws, if does not exists\\n    function requireAndGetAddress(bytes32 name) external view returns (address);\\n\\n    /// @param name contract name in a form of bytes32\\n    /// @return contract address registered under provided name\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    /// @param _name contract name\\n    /// @return contract address assigned to the name or address(0) if not exists\\n    function getAddressByString(string memory _name) external view returns (address);\\n\\n    /// @dev helper method that converts string to bytes32,\\n    /// you can use to to generate contract name\\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\\n}\\n\",\"keccak256\":\"0xa0099ecf4182138fda7a0733407784461410c245de67c1e7ba7cd7c9595e054f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingBank is IERC20 {\\n    /// @param id address of validator wallet\\n    /// @param location URL of the validator API\\n    struct Validator {\\n        address id;\\n        string location;\\n    }\\n\\n    event LogValidatorRegistered(address indexed id);\\n    event LogValidatorUpdated(address indexed id);\\n    event LogValidatorRemoved(address indexed id);\\n    event LogMinAmountForStake(uint256 minAmountForStake);\\n\\n    /// @dev setter for `minAmountForStake`\\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\\n\\n    /// @dev allows to stake `token` by validators\\n    /// Validator needs to approve StakingBank beforehand\\n    /// @param _value amount of tokens to stake\\n    function stake(uint256 _value) external;\\n\\n    /// @dev notification about approval from `_from` address on UMB token\\n    /// Staking bank will stake max approved amount from `_from` address\\n    /// @param _from address which approved token spend for IStakingBank\\n    function receiveApproval(address _from) external returns (bool success);\\n\\n    /// @dev withdraws stake tokens\\n    /// it throws, when balance will be less than required minimum for stake\\n    /// to withdraw all use `exit`\\n    function withdraw(uint256 _value) external returns (bool success);\\n\\n    /// @dev unstake and withdraw all tokens\\n    function exit() external returns (bool success);\\n\\n    /// @dev creates (register) new validator\\n    /// @param _id validator address\\n    /// @param _location location URL of the validator API\\n    function create(address _id, string calldata _location) external;\\n\\n    /// @dev removes validator\\n    /// @param _id validator wallet\\n    function remove(address _id) external;\\n\\n    /// @dev updates validator location\\n    /// @param _id validator wallet\\n    /// @param _location new validator URL\\n    function update(address _id, string calldata _location) external;\\n\\n    /// @return total number of registered validators (with and without balance)\\n    function getNumberOfValidators() external view returns (uint256);\\n\\n    /// @dev gets validator address for provided index\\n    /// @param _ix index in array of list of all validators wallets\\n    function addresses(uint256 _ix) external view returns (address);\\n\\n    /// @param _id address of validator\\n    /// @return id address of validator\\n    /// @return location URL of validator\\n    function validators(address _id) external view returns (address id, string memory location);\\n}\\n\",\"keccak256\":\"0x2c518aeab8b0b3a364fafaec559d3ff0dc6a119f8d203fa31ef7ad667ca0f7b9\",\"license\":\"MIT\"},\"contracts/interfaces/IUmbrellaFeeds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUmbrellaFeeds {\\n    struct PriceData {\\n        /// @dev this is placeholder, that can be used for some additional data\\n        /// atm of creating this smart contract, it is only used as marker for removed data (when == type(uint8).max)\\n        uint8 data;\\n        /// @dev heartbeat: how often price data will be refreshed in case price stay flat\\n        uint24 heartbeat;\\n        /// @dev timestamp: price time, at this time validators run consensus\\n        uint32 timestamp;\\n        /// @dev price\\n        uint128 price;\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// @dev method for submitting consensus data\\n    /// @param _priceKeys array of keys for `_priceDatas`\\n    /// @param _priceDatas PriceData signed by validators\\n    /// @param _signatures validators signatures\\n    function update(\\n        bytes32[] calldata _priceKeys,\\n        PriceData[] calldata _priceDatas,\\n        Signature[] calldata _signatures\\n    ) external;\\n\\n    /// @dev it will return array of price datas for provided `_keys`\\n    /// In case ony of feed does not exist, fallback call will be executed for that feed.\\n    /// @notice If data for any key not exists, function will revert. Use `getManyPriceDataRaw` method if you don't\\n    /// want revert.\\n    /// @param _keys array of feed keys\\n    /// @return data PriceData array\\n    function getManyPriceData(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\\n\\n    /// @dev same as getManyPriceData() but does not revert on empty data.\\n    /// @notice This method does no revert if some data does not exists.\\n    /// Check `data.timestamp` to see if price exist, if it is 0, then it does not exist.\\n    function getManyPriceDataRaw(bytes32[] calldata _keys) external view returns (PriceData[] memory data);\\n\\n    /// @dev this is main endpoint for reading feeds.\\n    /// In case timestamp is empty (that means there is no data), contract will revert.\\n    /// If you do not need whole data from `PriceData` struct, you can save some gas by using other view methods that\\n    /// returns just what you need.\\n    /// @notice method will revert if data for `_key` not exists.\\n    /// @param _key hash of feed name\\n    /// @return data full PriceData struct\\n    function getPriceData(bytes32 _key) external view returns (PriceData memory data);\\n\\n    /// @notice reader for mapping\\n    /// @param _key hash of feed name\\n    /// @return data full PriceData struct\\n    function prices(bytes32 _key) external view returns (PriceData memory data);\\n\\n    /// @notice method will revert if data for `_key` not exists.\\n    /// @param _key hash of feed name\\n    /// @return price\\n    function getPrice(bytes32 _key) external view returns (uint128 price);\\n\\n    /// @notice method will revert if data for `_key` not exists.\\n    /// @param _key hash of feed name\\n    /// @return price\\n    /// @return timestamp\\n    function getPriceTimestamp(bytes32 _key) external view returns (uint128 price, uint32 timestamp);\\n\\n    /// @notice method will revert if data for `_key` not exists.\\n    /// @param _key hash of feed name\\n    /// @return price\\n    /// @return timestamp\\n    /// @return heartbeat\\n    function getPriceTimestampHeartbeat(bytes32 _key)\\n        external\\n        view\\n        returns (uint128 price, uint32 timestamp, uint24 heartbeat);\\n\\n    /// @dev This method should be used only for Layer2 as it is more gas consuming than others views.\\n    /// @notice It does not revert on empty data.\\n    /// @param _name string feed name\\n    /// @return data PriceData\\n    function getPriceDataByName(string calldata _name) external view returns (PriceData memory data);\\n\\n    /// @dev decimals for prices stored in this contract\\n    function DECIMALS() external view returns (uint8); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x3b89742a9ab465f00aa9cf8635a5dfdc02d7ecf9bad8f564bee7c15d8aea46cb\",\"license\":\"MIT\"},\"contracts/onChainFeeds/UmbrellaFeedsReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IUmbrellaFeeds.sol\\\";\\n\\n/// @dev This is optional price reader for just one feed.\\n/// It comes with chanilink interface that makes migration process easier.\\n/// For maximum gas optimisation it is recommended to use UmbrellaFeeds directly - simply follow this contract as\\n/// a guide for integration.\\n///\\n/// This contract has build in fallback feature in case, `UmbrellaFeeds` will be replaced by newer contract.\\n/// Fallback is transparent for the user, no additional setup is needed.\\n///\\n/// How fallback feature works? If data for provided key is empty (when UmbrellaFeeds was destroyed and replaced),\\n/// contract will execute following procedure:\\n/// 1. if data is empty, contract will check if there is new registered contract with requested data\\n/// 2. if data is found in new contract it will be returned\\n/// 3. if there is no data or there is no new contract tx will revert.\\ncontract UmbrellaFeedsReader {\\n    /// @dev Registry contract where list of all addresses is stored. Fallback feature uses this registry to\\n    /// resolve newest `UmbrellaFeeds` address\\n    IRegistry public immutable REGISTRY;  // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev contract where all the feeds are stored\\n    address public immutable UMBRELLA_FEEDS;  // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev key (hash of string key), under which feed is being stored\\n    bytes32 public immutable KEY;  // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev string representation of feed key (feed name)\\n    string public description;\\n\\n    /// @dev decimals for feed\\n    uint8 internal immutable _DECIMALS;  // solhint-disable-line var-name-mixedcase\\n\\n    error EmptyAddress();\\n    error FeedNotExist();\\n\\n    /// @param _registry IRegistry address\\n    /// @param _umbrellaFeeds UmbrellaFeeds address\\n    /// @param _key price data key (before hashing)\\n    constructor(IRegistry _registry, IUmbrellaFeeds _umbrellaFeeds, string memory _key) {\\n        if (address(_registry) == address(0)) revert EmptyAddress();\\n\\n        REGISTRY = _registry;\\n        UMBRELLA_FEEDS = address(_umbrellaFeeds);\\n        description = _key;\\n        _DECIMALS = _umbrellaFeeds.DECIMALS();\\n\\n        bytes32 hash = keccak256(abi.encodePacked(_key));\\n        KEY = hash;\\n\\n        // sanity check\\n        _umbrellaFeeds.getPriceData(hash);\\n    }\\n\\n    /// @dev decimals for feed\\n    function decimals() external view returns (uint8) {\\n        return _DECIMALS;\\n    }\\n\\n    /// @dev this method follows chainlink interface for easy migration, NOTE: not all returned data are covered!\\n    /// latestRoundData() raise exception when there is no data, instead of returning unset values,\\n    /// which could be misinterpreted as actual reported values.\\n    /// It DOES NOT raise when data is outdated (based on heartbeat and timestamp).\\n    /// @notice You can save some gas by doing call directly to `UMBRELLA_FEEDS` contract.\\n    /// @return uint80 originally `roundId`, not in use, always 0\\n    /// @return answer price\\n    /// @return uint256 originally `startedAt`, not in use, always 0\\n    /// @return updatedAt last timestamp data was updated\\n    /// @return uint80 originally `answeredInRound` not in use, always 0\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 /* roundId */,\\n            int256 answer,\\n            uint256 /* startedAt */,\\n            uint256 updatedAt,\\n            uint80 /* answeredInRound */\\n        )\\n    {\\n        IUmbrellaFeeds.PriceData memory priceData = _getPriceDataRaw();\\n\\n        if (priceData.timestamp == 0) {\\n            priceData = _fallbackCall();\\n        }\\n\\n        return (0, int256(uint256(priceData.price)), 0, priceData.timestamp, 0);\\n    }\\n\\n    /// @dev this is main endpoint for reading feed. Feed is read from UmbrellaFeeds contract using hardcoded `KEY`.\\n    /// In case timestamp is empty (that means there is no data), contract will execute fallback call.\\n    /// @notice revert on empty data\\n    function getPriceData() external view returns (IUmbrellaFeeds.PriceData memory priceData) {\\n        priceData = _getPriceDataRaw();\\n\\n        if (priceData.timestamp == 0) {\\n            priceData = _fallbackCall();\\n        }\\n    }\\n\\n    /// @dev same as `getPriceData` but does not revert when no data\\n    function getPriceDataRaw() external view returns (IUmbrellaFeeds.PriceData memory priceData) {\\n        priceData = _getPriceDataRaw();\\n\\n        if (priceData.timestamp == 0) {\\n            return _fallbackCallRaw();\\n        }\\n    }\\n\\n    /// @dev same as `getPriceData` but does not revert when no data\\n    function _getPriceDataRaw() internal view returns (IUmbrellaFeeds.PriceData memory priceData) {\\n        (bool success, bytes memory data) = UMBRELLA_FEEDS.staticcall(\\n            abi.encodeWithSelector(IUmbrellaFeeds.prices.selector, KEY)\\n        );\\n\\n        if (success && data.length != 0) {\\n            priceData = abi.decode(data, (IUmbrellaFeeds.PriceData));\\n        }\\n    }\\n\\n    /// @dev it will revert on empty data\\n    function _fallbackCall() internal view returns (IUmbrellaFeeds.PriceData memory data) {\\n        address umbrellaFeeds = REGISTRY.getAddressByString(\\\"UmbrellaFeeds\\\");\\n\\n        // if contract was NOT updated, fallback is not needed, data does not exist - revert\\n        if (umbrellaFeeds == UMBRELLA_FEEDS) revert FeedNotExist();\\n\\n        data = IUmbrellaFeeds(umbrellaFeeds).getPriceData(KEY);\\n    }\\n\\n    /// @dev it will not revert on empty data\\n    function _fallbackCallRaw() internal view returns (IUmbrellaFeeds.PriceData memory data) {\\n        address umbrellaFeeds = REGISTRY.getAddressByString(\\\"UmbrellaFeeds\\\");\\n\\n        // if contract was updated, we do fallback\\n        if (umbrellaFeeds != UMBRELLA_FEEDS) {\\n            data = IUmbrellaFeeds(umbrellaFeeds).prices(KEY);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf9417df1d6605ada8ea603592f3c5e550be763e113cb1b69a8c8fee48de73db8\",\"license\":\"MIT\"},\"contracts/onChainFeeds/UmbrellaFeedsReaderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IStakingBank.sol\\\";\\n\\nimport \\\"./UmbrellaFeedsReader.sol\\\";\\n\\n/// @notice Factory to deploy UmbrellaFeedsReader contract\\ncontract UmbrellaFeedsReaderFactory {\\n    /// @dev Registry contract where list of all addresses is stored. Used to resolve newest `UmbrellaFeeds` address\\n    IRegistry public immutable REGISTRY; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev list of all readers\\n    mapping (bytes32 => UmbrellaFeedsReader) public readers;\\n\\n    event NewUmbrellaFeedsReader(UmbrellaFeedsReader indexed umbrellaFeedsReader, string feedName);\\n\\n    error EmptyAddress();\\n\\n    constructor(IRegistry _registry) {\\n        if (address(_registry) == address(0)) revert EmptyAddress();\\n\\n        REGISTRY = _registry;\\n    }\\n\\n    /// @dev Method to deploy new UmbrellaFeedsReader for particular key.\\n    /// This deployment is optional and it can be done by anyone who needs it.\\n    /// Reader can be used to simplify migration from Chainlink to Umbrella.\\n    ///\\n    /// Check UmbrellaFeedsReader docs for more details.\\n    ///\\n    /// We not using minimal proxy because it does not allow for immutable variables.\\n    /// @param _feedName string Feed name that is registered in UmbrellaFeeds\\n    /// @return reader UmbrellaFeedsReader contract address, in case anyone wants to use it from Layer1\\n    function deploy(string memory _feedName) external returns (UmbrellaFeedsReader reader) {\\n        reader = deployed(_feedName);\\n        IUmbrellaFeeds umbrellaFeeds = IUmbrellaFeeds(REGISTRY.getAddressByString(\\\"UmbrellaFeeds\\\"));\\n\\n        // if UmbrellaFeeds contract is up to date, there is no need to redeploy\\n        if (address(reader) != address(0) && address(reader.UMBRELLA_FEEDS()) == address(umbrellaFeeds)) {\\n            return reader;\\n        }\\n\\n        reader = new UmbrellaFeedsReader(REGISTRY, umbrellaFeeds, _feedName);\\n        readers[hash(_feedName)] = reader;\\n\\n        emit NewUmbrellaFeedsReader(reader, _feedName);\\n    }\\n\\n    function deployed(string memory _feedName) public view returns (UmbrellaFeedsReader) {\\n        return readers[hash(_feedName)];\\n    }\\n\\n    function hash(string memory _feedName) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_feedName));\\n    }\\n\\n    /// @dev to follow Registrable interface\\n    function getName() public pure returns (bytes32) {\\n        return \\\"UmbrellaFeedsReaderFactory\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xdcfedbd301a65355adc84bef52ea16288762b782c20624222242aa37d206d50d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806306433b1b146200006f5780630d5befc1146200009157806317d7de7c14620000c7578063b411ee9414620000e9578063c7602316146200011f578063c7ee05191462000155575b600080fd5b620000796200018b565b604051620000889190620005c3565b60405180910390f35b620000af6004803603810190620000a9919062000756565b620001af565b604051620000be9190620007cc565b60405180910390f35b620000d1620001f5565b604051620000e0919062000804565b60405180910390f35b62000107600480360381019062000101919062000756565b6200021d565b60405162000116919062000804565b60405180910390f35b6200013d600480360381019062000137919062000756565b6200024f565b6040516200014c9190620007cc565b60405180910390f35b6200017360048036038101906200016d919062000852565b620004f7565b604051620001829190620007cc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000620001bf846200021d565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f556d6272656c6c614665656473526561646572466163746f7279000000000000905090565b60008160405160200162000232919062000907565b604051602081830303815290604052805190602001209050919050565b60006200025c82620001af565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8f98f886040518163ffffffff1660e01b8152600401620002b99062000981565b602060405180830381865afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd9190620009e8565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015620003d957508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663bb25b1ea6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200039b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c19190620009e8565b73ffffffffffffffffffffffffffffffffffffffff16145b15620003e65750620004f2565b7f0000000000000000000000000000000000000000000000000000000000000000818460405162000417906200052a565b620004259392919062000a80565b604051809103906000f08015801562000442573d6000803e3d6000fd5b5091508160008062000454866200021d565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f7f5e2d33fdf12b9e483624348a7513ba1c5b0c4ecada4be7c542fc2c7e3fbe3184604051620004e8919062000ac4565b60405180910390a2505b919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118e88062000ae983390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620005836200057d620005778462000538565b62000558565b62000538565b9050919050565b6000620005978262000562565b9050919050565b6000620005ab826200058a565b9050919050565b620005bd816200059e565b82525050565b6000602082019050620005da6000830184620005b2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200064982620005fe565b810181811067ffffffffffffffff821117156200066b576200066a6200060f565b5b80604052505050565b600062000680620005e0565b90506200068e82826200063e565b919050565b600067ffffffffffffffff821115620006b157620006b06200060f565b5b620006bc82620005fe565b9050602081019050919050565b82818337600083830152505050565b6000620006ef620006e98462000693565b62000674565b9050828152602081018484840111156200070e576200070d620005f9565b5b6200071b848285620006c9565b509392505050565b600082601f8301126200073b576200073a620005f4565b5b81356200074d848260208601620006d8565b91505092915050565b6000602082840312156200076f576200076e620005ea565b5b600082013567ffffffffffffffff81111562000790576200078f620005ef565b5b6200079e8482850162000723565b91505092915050565b6000620007b4826200058a565b9050919050565b620007c681620007a7565b82525050565b6000602082019050620007e36000830184620007bb565b92915050565b6000819050919050565b620007fe81620007e9565b82525050565b60006020820190506200081b6000830184620007f3565b92915050565b6200082c81620007e9565b81146200083857600080fd5b50565b6000813590506200084c8162000821565b92915050565b6000602082840312156200086b576200086a620005ea565b5b60006200087b848285016200083b565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015620008ba5780820151818401526020810190506200089d565b83811115620008ca576000848401525b50505050565b6000620008dd8262000884565b620008e981856200088f565b9350620008fb8185602086016200089a565b80840191505092915050565b6000620009158284620008d0565b915081905092915050565b600082825260208201905092915050565b7f556d6272656c6c61466565647300000000000000000000000000000000000000600082015250565b600062000969600d8362000920565b9150620009768262000931565b602082019050919050565b600060208201905081810360008301526200099c816200095a565b9050919050565b6000620009b08262000538565b9050919050565b620009c281620009a3565b8114620009ce57600080fd5b50565b600081519050620009e281620009b7565b92915050565b60006020828403121562000a015762000a00620005ea565b5b600062000a1184828501620009d1565b91505092915050565b600062000a27826200058a565b9050919050565b62000a398162000a1a565b82525050565b600062000a4c8262000884565b62000a58818562000920565b935062000a6a8185602086016200089a565b62000a7581620005fe565b840191505092915050565b600060608201905062000a976000830186620005b2565b62000aa6602083018562000a2e565b818103604083015262000aba818462000a3f565b9050949350505050565b6000602082019050818103600083015262000ae0818462000a3f565b90509291505056fe6101006040523480156200001257600080fd5b50604051620018e8380380620018e8833981810160405281019062000038919062000569565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200009f576040517f7138356f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505080600090805190602001906200011f9291906200025e565b508173ffffffffffffffffffffffffffffffffffffffff16632e0f26256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200016c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000192919062000622565b60ff1660e08160ff1681525050600081604051602001620001b49190620006a1565b6040516020818303038152906040528051906020012090508060c081815250508273ffffffffffffffffffffffffffffffffffffffff166343fa6211826040518263ffffffff1660e01b81526004016200020f9190620006d5565b608060405180830381865afa1580156200022d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025391906200084a565b5050505050620008e0565b8280546200026c90620008ab565b90600052602060002090601f016020900481019282620002905760008555620002dc565b82601f10620002ab57805160ff1916838001178555620002dc565b82800160010185558215620002dc579182015b82811115620002db578251825591602001919060010190620002be565b5b509050620002eb9190620002ef565b5090565b5b808211156200030a576000816000905550600101620002f0565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200034f8262000322565b9050919050565b6000620003638262000342565b9050919050565b620003758162000356565b81146200038157600080fd5b50565b60008151905062000395816200036a565b92915050565b6000620003a88262000342565b9050919050565b620003ba816200039b565b8114620003c657600080fd5b50565b600081519050620003da81620003af565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043582620003ea565b810181811067ffffffffffffffff82111715620004575762000456620003fb565b5b80604052505050565b60006200046c6200030e565b90506200047a82826200042a565b919050565b600067ffffffffffffffff8211156200049d576200049c620003fb565b5b620004a882620003ea565b9050602081019050919050565b60005b83811015620004d5578082015181840152602081019050620004b8565b83811115620004e5576000848401525b50505050565b600062000502620004fc846200047f565b62000460565b905082815260208101848484011115620005215762000520620003e5565b5b6200052e848285620004b5565b509392505050565b600082601f8301126200054e576200054d620003e0565b5b815162000560848260208601620004eb565b91505092915050565b60008060006060848603121562000585576200058462000318565b5b6000620005958682870162000384565b9350506020620005a886828701620003c9565b925050604084015167ffffffffffffffff811115620005cc57620005cb6200031d565b5b620005da8682870162000536565b9150509250925092565b600060ff82169050919050565b620005fc81620005e4565b81146200060857600080fd5b50565b6000815190506200061c81620005f1565b92915050565b6000602082840312156200063b576200063a62000318565b5b60006200064b848285016200060b565b91505092915050565b600081519050919050565b600081905092915050565b6000620006778262000654565b6200068381856200065f565b935062000695818560208601620004b5565b80840191505092915050565b6000620006af82846200066a565b915081905092915050565b6000819050919050565b620006cf81620006ba565b82525050565b6000602082019050620006ec6000830184620006c4565b92915050565b600080fd5b600062ffffff82169050919050565b6200071181620006f7565b81146200071d57600080fd5b50565b600081519050620007318162000706565b92915050565b600063ffffffff82169050919050565b620007528162000737565b81146200075e57600080fd5b50565b600081519050620007728162000747565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6200079f8162000778565b8114620007ab57600080fd5b50565b600081519050620007bf8162000794565b92915050565b600060808284031215620007de57620007dd620006f2565b5b620007ea608062000460565b90506000620007fc848285016200060b565b6000830152506020620008128482850162000720565b6020830152506040620008288482850162000761565b60408301525060606200083e84828501620007ae565b60608301525092915050565b60006080828403121562000863576200086262000318565b5b60006200087384828501620007c5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620008c457607f821691505b602082108103620008da57620008d96200087c565b5b50919050565b60805160a05160c05160e051610f966200095260003960006101bd015260008181610197015281816103b5015281816105d801526107a20152600081816102da01528181610376015281816105690152610701015260008181610173015281816104cf01526106670152610f966000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c806306433b1b1461007d5780632dc387b31461009b578063313ce567146100b95780637284e416146100d757806376ded135146100f5578063a4a2816814610113578063bb25b1ea14610131578063feaf968c1461014f575b600080fd5b610085610171565b60405161009291906108eb565b60405180910390f35b6100a3610195565b6040516100b0919061091f565b60405180910390f35b6100c16101b9565b6040516100ce9190610956565b60405180910390f35b6100df6101e1565b6040516100ec9190610a0a565b60405180910390f35b6100fd61026f565b60405161010a9190610af8565b60405180910390f35b61011b6102a6565b6040516101289190610af8565b60405180910390f35b6101396102d8565b6040516101469190610b34565b60405180910390f35b6101576102fc565b604051610168959493929190610ba6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080546101ee90610c28565b80601f016020809104026020016040519081016040528092919081815260200182805461021a90610c28565b80156102675780601f1061023c57610100808354040283529160200191610267565b820191906000526020600020905b81548152906001019060200180831161024a57829003601f168201915b505050505081565b610277610824565b61027f610369565b90506000816040015163ffffffff16036102a25761029b6104c3565b90506102a3565b5b90565b6102ae610824565b6102b6610369565b90506000816040015163ffffffff16036102d5576102d261065b565b90505b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060008061030d610369565b90506000816040015163ffffffff160361032c5761032961065b565b90505b600081606001516fffffffffffffffffffffffffffffffff166000836040015160008163ffffffff16915095509550955095509550509091929394565b610371610824565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166360846bc660e01b7f00000000000000000000000000000000000000000000000000000000000000006040516024016103e4919061091f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161044e9190610ca0565b600060405180830381855afa9150503d8060008114610489576040519150601f19603f3d011682016040523d82523d6000602084013e61048e565b606091505b50915091508180156104a257506000815114155b156104be57808060200190518101906104bb9190610e6e565b92505b505090565b6104cb610824565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8f98f886040518163ffffffff1660e01b815260040161052490610ee7565b602060405180830381865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105659190610f33565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610657578073ffffffffffffffffffffffffffffffffffffffff166360846bc67f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610613919061091f565b608060405180830381865afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190610e6e565b91505b5090565b610663610824565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8f98f886040518163ffffffff1660e01b81526004016106bc90610ee7565b602060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190610f33565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610784576040517f15647ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166343fa62117f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016107dd919061091f565b608060405180830381865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610e6e565b91505090565b6040518060800160405280600060ff168152602001600062ffffff168152602001600063ffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108b16108ac6108a78461086c565b61088c565b61086c565b9050919050565b60006108c382610896565b9050919050565b60006108d5826108b8565b9050919050565b6108e5816108ca565b82525050565b600060208201905061090060008301846108dc565b92915050565b6000819050919050565b61091981610906565b82525050565b60006020820190506109346000830184610910565b92915050565b600060ff82169050919050565b6109508161093a565b82525050565b600060208201905061096b6000830184610947565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109ab578082015181840152602081019050610990565b838111156109ba576000848401525b50505050565b6000601f19601f8301169050919050565b60006109dc82610971565b6109e6818561097c565b93506109f681856020860161098d565b6109ff816109c0565b840191505092915050565b60006020820190508181036000830152610a2481846109d1565b905092915050565b610a358161093a565b82525050565b600062ffffff82169050919050565b610a5381610a3b565b82525050565b600063ffffffff82169050919050565b610a7281610a59565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610a9d81610a78565b82525050565b608082016000820151610ab96000850182610a2c565b506020820151610acc6020850182610a4a565b506040820151610adf6040850182610a69565b506060820151610af26060850182610a94565b50505050565b6000608082019050610b0d6000830184610aa3565b92915050565b6000610b1e8261086c565b9050919050565b610b2e81610b13565b82525050565b6000602082019050610b496000830184610b25565b92915050565b600069ffffffffffffffffffff82169050919050565b610b6e81610b4f565b82525050565b6000819050919050565b610b8781610b74565b82525050565b6000819050919050565b610ba081610b8d565b82525050565b600060a082019050610bbb6000830188610b65565b610bc86020830187610b7e565b610bd56040830186610b97565b610be26060830185610b97565b610bef6080830184610b65565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c4057607f821691505b602082108103610c5357610c52610bf9565b5b50919050565b600081519050919050565b600081905092915050565b6000610c7a82610c59565b610c848185610c64565b9350610c9481856020860161098d565b80840191505092915050565b6000610cac8284610c6f565b915081905092915050565b6000604051905090565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d03826109c0565b810181811067ffffffffffffffff82111715610d2257610d21610ccb565b5b80604052505050565b6000610d35610cb7565b9050610d418282610cfa565b919050565b610d4f8161093a565b8114610d5a57600080fd5b50565b600081519050610d6c81610d46565b92915050565b610d7b81610a3b565b8114610d8657600080fd5b50565b600081519050610d9881610d72565b92915050565b610da781610a59565b8114610db257600080fd5b50565b600081519050610dc481610d9e565b92915050565b610dd381610a78565b8114610dde57600080fd5b50565b600081519050610df081610dca565b92915050565b600060808284031215610e0c57610e0b610cc6565b5b610e166080610d2b565b90506000610e2684828501610d5d565b6000830152506020610e3a84828501610d89565b6020830152506040610e4e84828501610db5565b6040830152506060610e6284828501610de1565b60608301525092915050565b600060808284031215610e8457610e83610cc1565b5b6000610e9284828501610df6565b91505092915050565b7f556d6272656c6c61466565647300000000000000000000000000000000000000600082015250565b6000610ed1600d8361097c565b9150610edc82610e9b565b602082019050919050565b60006020820190508181036000830152610f0081610ec4565b9050919050565b610f1081610b13565b8114610f1b57600080fd5b50565b600081519050610f2d81610f07565b92915050565b600060208284031215610f4957610f48610cc1565b5b6000610f5784828501610f1e565b9150509291505056fea2646970667358221220cab64fd82e235637ccebdb365366012a5e08bc149a1b3facd9cd40ab2db8d53a64736f6c634300080d0033a2646970667358221220285e5edb451c5cf1ca0e6c03fb7a78d7d336c4ce2b37185346e7243719a4236b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(string)": {
        "details": "Method to deploy new UmbrellaFeedsReader for particular key. This deployment is optional and it can be done by anyone who needs it. Reader can be used to simplify migration from Chainlink to Umbrella. Check UmbrellaFeedsReader docs for more details. We not using minimal proxy because it does not allow for immutable variables.",
        "params": {
          "_feedName": "string Feed name that is registered in UmbrellaFeeds"
        },
        "returns": {
          "reader": "UmbrellaFeedsReader contract address, in case anyone wants to use it from Layer1"
        }
      },
      "getName()": {
        "details": "to follow Registrable interface"
      }
    },
    "stateVariables": {
      "REGISTRY": {
        "details": "Registry contract where list of all addresses is stored. Used to resolve newest `UmbrellaFeeds` address"
      },
      "readers": {
        "details": "list of all readers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Factory to deploy UmbrellaFeedsReader contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5224,
        "contract": "contracts/onChainFeeds/UmbrellaFeedsReaderFactory.sol:UmbrellaFeedsReaderFactory",
        "label": "readers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_contract(UmbrellaFeedsReader)5208)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(UmbrellaFeedsReader)5208": {
        "encoding": "inplace",
        "label": "contract UmbrellaFeedsReader",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_contract(UmbrellaFeedsReader)5208)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract UmbrellaFeedsReader)",
        "numberOfBytes": "32",
        "value": "t_contract(UmbrellaFeedsReader)5208"
      }
    }
  }
}