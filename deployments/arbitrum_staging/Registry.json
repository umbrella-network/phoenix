{
  "address": "0x51eFAbE1718be9940c5f4D10F1983a46d99EC4D9",
  "abi": [
    {
      "inputs": [],
      "name": "ArraysDataDoNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "LogRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newContract",
          "type": "address"
        }
      ],
      "name": "atomicUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes",
          "type": "bytes32"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getAddressByString",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_names",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_destinations",
          "type": "address[]"
        }
      ],
      "name": "importAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_destinations",
          "type": "address[]"
        }
      ],
      "name": "importContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "requireAndGetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a06bea8066b43fa8c7e369c37b679a93725eedbc99af11c91549da0909afc5b",
  "receipt": {
    "to": null,
    "from": "0x66f13FDceed822E74b6a1e08e082Fa699fF36454",
    "contractAddress": "0x51eFAbE1718be9940c5f4D10F1983a46d99EC4D9",
    "transactionIndex": 1,
    "gasUsed": "1123176",
    "logsBloom": "0x
    "blockHash": "0x3807c0f84dea63712a919df5777f6671d7950241d5297a255aba1efc607ef198",
    "transactionHash": "0x1a06bea8066b43fa8c7e369c37b679a93725eedbc99af11c91549da0909afc5b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8948783,
        "transactionHash": "0x1a06bea8066b43fa8c7e369c37b679a93725eedbc99af11c91549da0909afc5b",
        "address": "0x51eFAbE1718be9940c5f4D10F1983a46d99EC4D9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000066f13fdceed822e74b6a1e08e082fa699ff36454"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3807c0f84dea63712a919df5777f6671d7950241d5297a255aba1efc607ef198"
      }
    ],
    "blockNumber": 8948783,
    "cumulativeGasUsed": "1123176",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4db3e1d3dd51dbe508dc0a6a04352df6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArraysDataDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"LogRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"atomicUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAddressByString\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"}],\"name\":\"importAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"}],\"name\":\"importContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"requireAndGetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"contracts registry protocol uses this registry to fetch current contract addresses\",\"kind\":\"dev\",\"methods\":{\"atomicUpdate(address)\":{\"details\":\"this method ensure, that old and new contract is aware of it state in registry Note: BSC registry does not have this method. This method was introduced in later stage.\",\"params\":{\"_newContract\":\"address of contract that will replace old one\"}},\"getAddress(bytes32)\":{\"params\":{\"name\":\"contract name in a form of bytes32\"},\"returns\":{\"_0\":\"contract address registered under provided name\"}},\"getAddressByString(string)\":{\"params\":{\"_name\":\"contract name\"},\"returns\":{\"_0\":\"contract address assigned to the name or address(0) if not exists\"}},\"importAddresses(bytes32[],address[])\":{\"details\":\"imports new contract addresses and override old addresses, if they exist under provided name This method can be used for contracts that for some reason do not have `getName` method\",\"params\":{\"_destinations\":\"array of contract addresses\",\"_names\":\"array of contract names that we want to register\"}},\"importContracts(address[])\":{\"details\":\"imports new contracts and override old addresses, if they exist. Names of contracts are fetched directly from each contract by calling `getName`\",\"params\":{\"_destinations\":\"array of contract addresses\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requireAndGetAddress(bytes32)\":{\"details\":\"similar to `getAddress` but throws when contract name not exists\",\"params\":{\"name\":\"contract name\"},\"returns\":{\"_0\":\"contract address registered under provided name or throws, if does not exists\"}},\"stringToBytes32(string)\":{\"details\":\"helper method that converts string to bytes32, you can use to to generate contract name\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registry(bytes32)\":{\"notice\":\"name => contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// Inheritance\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./extensions/Registrable.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\n/// @dev contracts registry\\n/// protocol uses this registry to fetch current contract addresses\\ncontract Registry is IRegistry, Ownable {\\n    /// name => contract address\\n    mapping(bytes32 => address) public registry;\\n\\n\\n    error NameNotRegistered();\\n    error ArraysDataDoNotMatch();\\n\\n    /// @inheritdoc IRegistry\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external onlyOwner {\\n        if (_names.length != _destinations.length) revert ArraysDataDoNotMatch();\\n\\n        for (uint i = 0; i < _names.length;) {\\n            registry[_names[i]] = _destinations[i];\\n            emit LogRegistered(_destinations[i], _names[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function importContracts(address[] calldata _destinations) external onlyOwner {\\n        for (uint i = 0; i < _destinations.length;) {\\n            bytes32 name = Registrable(_destinations[i]).getName();\\n            registry[name] = _destinations[i];\\n            emit LogRegistered(_destinations[i], name);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function atomicUpdate(address _newContract) external onlyOwner {\\n        Registrable(_newContract).register();\\n\\n        bytes32 name = Registrable(_newContract).getName();\\n        address oldContract = registry[name];\\n        registry[name] = _newContract;\\n\\n        Registrable(oldContract).unregister();\\n\\n        emit LogRegistered(_newContract, name);\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function requireAndGetAddress(bytes32 name) external view returns (address) {\\n        address _foundAddress = registry[name];\\n        if (_foundAddress == address(0)) revert NameNotRegistered();\\n\\n        return _foundAddress;\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function getAddress(bytes32 _bytes) external view returns (address) {\\n        return registry[_bytes];\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function getAddressByString(string memory _name) public view returns (address) {\\n        return registry[stringToBytes32(_name)];\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function stringToBytes32(string memory _string) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(_string);\\n\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := mload(add(_string, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf8ac18bf5766420afcc70f34339192fa67169106ccdb51573267a1ffd95fb81\",\"license\":\"MIT\"},\"contracts/extensions/Registrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IStakingBank.sol\\\";\\n\\n/// @dev Any contract that we want to register in ContractRegistry, must inherit from Registrable\\nabstract contract Registrable {\\n    IRegistry public immutable contractRegistry;\\n\\n    modifier onlyFromContract(address _msgSender, bytes32 _contractName) {\\n        require(\\n            contractRegistry.getAddress(_contractName) == _msgSender,\\n            string(abi.encodePacked(\\\"caller is not \\\", _contractName))\\n        );\\n        _;\\n    }\\n\\n    modifier withRegistrySetUp() {\\n        require(address(contractRegistry) != address(0x0), \\\"_registry is empty\\\");\\n        _;\\n    }\\n\\n    constructor(IRegistry _contractRegistry) {\\n        require(address(_contractRegistry) != address(0x0), \\\"_registry is empty\\\");\\n        contractRegistry = _contractRegistry;\\n    }\\n\\n    /// @dev this method will be called as a first method in registration process when old contract will be replaced\\n    /// when called, old contract address is still in registry\\n    function register() virtual external;\\n\\n    /// @dev this method will be called as a last method in registration process when old contract will be replaced\\n    /// when called, new contract address is already in registry\\n    function unregister() virtual external;\\n\\n    /// @return contract name as bytes32\\n    function getName() virtual external pure returns (bytes32);\\n\\n    /// @dev helper method for fetching StakingBank address\\n    function stakingBankContract() public view returns (IStakingBank) {\\n        return IStakingBank(contractRegistry.requireAndGetAddress(\\\"StakingBank\\\"));\\n    }\\n\\n    /// @dev helper method for fetching UMB address\\n    function tokenContract() public view withRegistrySetUp returns (ERC20) {\\n        return ERC20(contractRegistry.requireAndGetAddress(\\\"UMB\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x58413fc819ff8f78ba80a9339bf6b4bb818932ddef0ce58dd4813acba01bda8c\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IRegistry {\\n    event LogRegistered(address indexed destination, bytes32 name);\\n\\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\\n    /// This method can be used for contracts that for some reason do not have `getName` method\\n    /// @param  _names array of contract names that we want to register\\n    /// @param  _destinations array of contract addresses\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\\n\\n    /// @dev imports new contracts and override old addresses, if they exist.\\n    /// Names of contracts are fetched directly from each contract by calling `getName`\\n    /// @param  _destinations array of contract addresses\\n    function importContracts(address[] calldata _destinations) external;\\n\\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\\n    /// @param _newContract address of contract that will replace old one\\n    function atomicUpdate(address _newContract) external;\\n\\n    /// @dev similar to `getAddress` but throws when contract name not exists\\n    /// @param name contract name\\n    /// @return contract address registered under provided name or throws, if does not exists\\n    function requireAndGetAddress(bytes32 name) external view returns (address);\\n\\n    /// @param name contract name in a form of bytes32\\n    /// @return contract address registered under provided name\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    /// @param _name contract name\\n    /// @return contract address assigned to the name or address(0) if not exists\\n    function getAddressByString(string memory _name) external view returns (address);\\n\\n    /// @dev helper method that converts string to bytes32,\\n    /// you can use to to generate contract name\\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\\n}\\n\",\"keccak256\":\"0xa0099ecf4182138fda7a0733407784461410c245de67c1e7ba7cd7c9595e054f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingBank is IERC20 {\\n    /// @param id address of validator wallet\\n    /// @param location URL of the validator API\\n    struct Validator {\\n        address id;\\n        string location;\\n    }\\n\\n    event LogValidatorRegistered(address indexed id);\\n    event LogValidatorUpdated(address indexed id);\\n    event LogValidatorRemoved(address indexed id);\\n    event LogMinAmountForStake(uint256 minAmountForStake);\\n\\n    /// @dev setter for `minAmountForStake`\\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\\n\\n    /// @dev allows to stake `token` by validators\\n    /// Validator needs to approve StakingBank beforehand\\n    /// @param _value amount of tokens to stake\\n    function stake(uint256 _value) external;\\n\\n    /// @dev notification about approval from `_from` address on UMB token\\n    /// Staking bank will stake max approved amount from `_from` address\\n    /// @param _from address which approved token spend for IStakingBank\\n    function receiveApproval(address _from) external returns (bool success);\\n\\n    /// @dev withdraws stake tokens\\n    /// it throws, when balance will be less than required minimum for stake\\n    /// to withdraw all use `exit`\\n    function withdraw(uint256 _value) external returns (bool success);\\n\\n    /// @dev unstake and withdraw all tokens\\n    function exit() external returns (bool success);\\n\\n    /// @dev creates (register) new validator\\n    /// @param _id validator address\\n    /// @param _location location URL of the validator API\\n    function create(address _id, string calldata _location) external;\\n\\n    /// @dev removes validator\\n    /// @param _id validator wallet\\n    function remove(address _id) external;\\n\\n    /// @dev updates validator location\\n    /// @param _id validator wallet\\n    /// @param _location new validator URL\\n    function update(address _id, string calldata _location) external;\\n\\n    /// @return total number of registered validators (with and without balance)\\n    function getNumberOfValidators() external view returns (uint256);\\n\\n    /// @dev gets validator address for provided index\\n    /// @param _ix index in array of list of all validators wallets\\n    function addresses(uint256 _ix) external view returns (address);\\n\\n    /// @param _id address of validator\\n    /// @return id address of validator\\n    /// @return location URL of validator\\n    function validators(address _id) external view returns (address id, string memory location);\\n}\\n\",\"keccak256\":\"0x2c518aeab8b0b3a364fafaec559d3ff0dc6a119f8d203fa31ef7ad667ca0f7b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112ed8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806310b689011461009e57806321f8a721146100ba57806346bcb49d146100ea578063648642e91461011a578063715018a6146101365780637ef50298146101405780638da5cb5b14610170578063ab0b8f771461018e578063cfb51928146101aa578063e8f98f88146101da578063f2fde38b1461020a575b600080fd5b6100b860048036038101906100b39190610d47565b610226565b005b6100d460048036038101906100cf9190610dca565b61044b565b6040516100e19190610e38565b60405180910390f35b61010460048036038101906100ff9190610dca565b610488565b6040516101119190610e38565b60405180910390f35b610134600480360381019061012f9190610e7f565b610530565b005b61013e6107bc565b005b61015a60048036038101906101559190610dca565b610844565b6040516101679190610e38565b60405180910390f35b610178610877565b6040516101859190610e38565b60405180910390f35b6101a860048036038101906101a39190610f02565b6108a0565b005b6101c460048036038101906101bf91906110c4565b610a9d565b6040516101d1919061111c565b60405180910390f35b6101f460048036038101906101ef91906110c4565b610ac6565b6040516102019190610e38565b60405180910390f35b610224600480360381019061021f9190610e7f565b610b0b565b005b61022e610c02565b73ffffffffffffffffffffffffffffffffffffffff1661024c610877565b73ffffffffffffffffffffffffffffffffffffffff16146102a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029990611194565b60405180910390fd5b60005b828290508110156104465760008383838181106102c5576102c46111b4565b5b90506020020160208101906102da9190610e7f565b73ffffffffffffffffffffffffffffffffffffffff166317d7de7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034891906111f8565b905083838381811061035d5761035c6111b4565b5b90506020020160208101906103729190610e7f565b6001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508383838181106103d6576103d56111b4565b5b90506020020160208101906103eb9190610e7f565b73ffffffffffffffffffffffffffffffffffffffff167f528ecde2b2a965b3d69f80eb4775d121bf5fe485f9bfc184b5b789a90065bb0482604051610430919061111c565b60405180910390a28180600101925050506102a5565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610527576040517f31aef0e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b610538610c02565b73ffffffffffffffffffffffffffffffffffffffff16610556610877565b73ffffffffffffffffffffffffffffffffffffffff16146105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390611194565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16631aa3a0086040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105f457600080fd5b505af1158015610608573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff166317d7de7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d91906111f8565b905060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663e79a198f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075157600080fd5b505af1158015610765573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f528ecde2b2a965b3d69f80eb4775d121bf5fe485f9bfc184b5b789a90065bb04836040516107af919061111c565b60405180910390a2505050565b6107c4610c02565b73ffffffffffffffffffffffffffffffffffffffff166107e2610877565b73ffffffffffffffffffffffffffffffffffffffff1614610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90611194565b60405180910390fd5b6108426000610c0a565b565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108a8610c02565b73ffffffffffffffffffffffffffffffffffffffff166108c6610877565b73ffffffffffffffffffffffffffffffffffffffff161461091c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091390611194565b60405180910390fd5b81819050848490501461095b576040517f0cf7902300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015610a965782828281811061097c5761097b6111b4565b5b90506020020160208101906109919190610e7f565b600160008787858181106109a8576109a76111b4565b5b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828282818110610a0e57610a0d6111b4565b5b9050602002016020810190610a239190610e7f565b73ffffffffffffffffffffffffffffffffffffffff167f528ecde2b2a965b3d69f80eb4775d121bf5fe485f9bfc184b5b789a90065bb04868684818110610a6d57610a6c6111b4565b5b90506020020135604051610a81919061111c565b60405180910390a2808060010191505061095e565b5050505050565b6000808290506000815103610ab8576000801b915050610ac1565b60208301519150505b919050565b600060016000610ad584610a9d565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610b13610c02565b73ffffffffffffffffffffffffffffffffffffffff16610b31610877565b73ffffffffffffffffffffffffffffffffffffffff1614610b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7e90611194565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed90611297565b60405180910390fd5b610bff81610c0a565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610d0757610d06610ce2565b5b8235905067ffffffffffffffff811115610d2457610d23610ce7565b5b602083019150836020820283011115610d4057610d3f610cec565b5b9250929050565b60008060208385031215610d5e57610d5d610cd8565b5b600083013567ffffffffffffffff811115610d7c57610d7b610cdd565b5b610d8885828601610cf1565b92509250509250929050565b6000819050919050565b610da781610d94565b8114610db257600080fd5b50565b600081359050610dc481610d9e565b92915050565b600060208284031215610de057610ddf610cd8565b5b6000610dee84828501610db5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2282610df7565b9050919050565b610e3281610e17565b82525050565b6000602082019050610e4d6000830184610e29565b92915050565b610e5c81610e17565b8114610e6757600080fd5b50565b600081359050610e7981610e53565b92915050565b600060208284031215610e9557610e94610cd8565b5b6000610ea384828501610e6a565b91505092915050565b60008083601f840112610ec257610ec1610ce2565b5b8235905067ffffffffffffffff811115610edf57610ede610ce7565b5b602083019150836020820283011115610efb57610efa610cec565b5b9250929050565b60008060008060408587031215610f1c57610f1b610cd8565b5b600085013567ffffffffffffffff811115610f3a57610f39610cdd565b5b610f4687828801610eac565b9450945050602085013567ffffffffffffffff811115610f6957610f68610cdd565b5b610f7587828801610cf1565b925092505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fd182610f88565b810181811067ffffffffffffffff82111715610ff057610fef610f99565b5b80604052505050565b6000611003610cce565b905061100f8282610fc8565b919050565b600067ffffffffffffffff82111561102f5761102e610f99565b5b61103882610f88565b9050602081019050919050565b82818337600083830152505050565b600061106761106284611014565b610ff9565b90508281526020810184848401111561108357611082610f83565b5b61108e848285611045565b509392505050565b600082601f8301126110ab576110aa610ce2565b5b81356110bb848260208601611054565b91505092915050565b6000602082840312156110da576110d9610cd8565b5b600082013567ffffffffffffffff8111156110f8576110f7610cdd565b5b61110484828501611096565b91505092915050565b61111681610d94565b82525050565b6000602082019050611131600083018461110d565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061117e602083611137565b915061118982611148565b602082019050919050565b600060208201905081810360008301526111ad81611171565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506111f281610d9e565b92915050565b60006020828403121561120e5761120d610cd8565b5b600061121c848285016111e3565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611281602683611137565b915061128c82611225565b604082019050919050565b600060208201905081810360008301526112b081611274565b905091905056fea264697066735822122009a8c52588ce3f4b7f085944c80e84a74a2841020cdae529f53f14ecb1c8003064736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "contracts registry protocol uses this registry to fetch current contract addresses",
    "kind": "dev",
    "methods": {
      "atomicUpdate(address)": {
        "details": "this method ensure, that old and new contract is aware of it state in registry Note: BSC registry does not have this method. This method was introduced in later stage.",
        "params": {
          "_newContract": "address of contract that will replace old one"
        }
      },
      "getAddress(bytes32)": {
        "params": {
          "name": "contract name in a form of bytes32"
        },
        "returns": {
          "_0": "contract address registered under provided name"
        }
      },
      "getAddressByString(string)": {
        "params": {
          "_name": "contract name"
        },
        "returns": {
          "_0": "contract address assigned to the name or address(0) if not exists"
        }
      },
      "importAddresses(bytes32[],address[])": {
        "details": "imports new contract addresses and override old addresses, if they exist under provided name This method can be used for contracts that for some reason do not have `getName` method",
        "params": {
          "_destinations": "array of contract addresses",
          "_names": "array of contract names that we want to register"
        }
      },
      "importContracts(address[])": {
        "details": "imports new contracts and override old addresses, if they exist. Names of contracts are fetched directly from each contract by calling `getName`",
        "params": {
          "_destinations": "array of contract addresses"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requireAndGetAddress(bytes32)": {
        "details": "similar to `getAddress` but throws when contract name not exists",
        "params": {
          "name": "contract name"
        },
        "returns": {
          "_0": "contract address registered under provided name or throws, if does not exists"
        }
      },
      "stringToBytes32(string)": {
        "details": "helper method that converts string to bytes32, you can use to to generate contract name"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registry(bytes32)": {
        "notice": "name => contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2767,
        "contract": "contracts/Registry.sol:Registry",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}