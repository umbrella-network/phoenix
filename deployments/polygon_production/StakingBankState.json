{
  "address": "0xff38197cceF56149976C6D7F6103eB700C086247",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "_contractRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArrayLengthError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTotalSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoChangeToState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountForStake",
          "type": "uint256"
        }
      ],
      "name": "LogMinAmountForStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "LogValidatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "LogValidatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "LogValidatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "TotalSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ValidatorBalanceUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "allBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfValidators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receiveApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receiveApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "setBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "setMinAmountForStake",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "setTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingBankContract",
      "outputs": [
        {
          "internalType": "contract IStakingBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContract",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x05ca3b92467b484d3c9acd27ed52ea5c086fa20d0da3ead01a2533f1cff1554c",
  "receipt": {
    "to": null,
    "from": "0xA6e4fFa19B213AbeA258ae72e8e1a209B9E543e7",
    "contractAddress": "0xff38197cceF56149976C6D7F6103eB700C086247",
    "transactionIndex": 32,
    "gasUsed": "1941678",
    "logsBloom": "0x
    "blockHash": "0xf96a2c6773a324e9b996925a93826bb41b1cee0c619f9b6f2dc99bac12c8d8e8",
    "transactionHash": "0x05ca3b92467b484d3c9acd27ed52ea5c086fa20d0da3ead01a2533f1cff1554c",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 35105595,
        "transactionHash": "0x05ca3b92467b484d3c9acd27ed52ea5c086fa20d0da3ead01a2533f1cff1554c",
        "address": "0xff38197cceF56149976C6D7F6103eB700C086247",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a6e4ffa19b213abea258ae72e8e1a209b9e543e7"
        ],
        "data": "0x",
        "logIndex": 208,
        "blockHash": "0xf96a2c6773a324e9b996925a93826bb41b1cee0c619f9b6f2dc99bac12c8d8e8"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 35105595,
        "transactionHash": "0x05ca3b92467b484d3c9acd27ed52ea5c086fa20d0da3ead01a2533f1cff1554c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a6e4ffa19b213abea258ae72e8e1a209b9e543e7",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d6af1e3dcb7270000000000000000000000000000000000000000000000001f30c5d586c7b2c210000000000000000000000000000000000000000000048898f19ed83f1f33c7f000000000000000000000000000000000000000000000001f235ae3a2eafb9b10000000000000000000000000000000000000000000048898ff09ca22fbeaeef",
        "logIndex": 209,
        "blockHash": "0xf96a2c6773a324e9b996925a93826bb41b1cee0c619f9b6f2dc99bac12c8d8e8"
      }
    ],
    "blockNumber": 35105595,
    "cumulativeGasUsed": "23424472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x455acbbC2c15c086978083968a69B2e7E4d38d34"
  ],
  "numDeployments": 1,
  "solcInputHash": "8de513e03c67740dfcba1fe201c8738f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoChangeToState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountForStake\",\"type\":\"uint256\"}],\"name\":\"LogMinAmountForStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LogValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LogValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LogValidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ValidatorBalanceUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"setBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setMinAmountForStake\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBankContract\",\"outputs\":[{\"internalType\":\"contract IStakingBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"exit()\":{\"details\":\"unstake and withdraw all tokens\"},\"getName()\":{\"returns\":{\"_0\":\"contract name as bytes32\"}},\"getNumberOfValidators()\":{\"returns\":{\"_0\":\"total number of registered validators (with and without balance)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register()\":{\"details\":\"this method will be called as a first method in registration process when old contract will be replaced when called, old contract address is still in registry\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBalances(address[],uint256[],uint256)\":{\"params\":{\"_balances\":\"array of validator _balances that will be set (can be 0s)\",\"_totalSupply\":\"cloned value of total staked amount from master chain, it can be 0\",\"_validators\":\"array of validator addresses that needs to be updated\"}},\"setTotalSupply(uint256)\":{\"params\":{\"_totalSupply\":\"cloned value from master chain, it can be 0\"}},\"stakingBankContract()\":{\"details\":\"helper method for fetching StakingBank address\"},\"tokenContract()\":{\"details\":\"helper method for fetching UMB address\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregister()\":{\"details\":\"this method will be called as a last method in registration process when old contract will be replaced when called, new contract address is already in registry\"}},\"stateVariables\":{\"totalSupply\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addresses(uint256)\":{\"notice\":\"list of all validators wallets\"},\"balances(address)\":{\"notice\":\"validator address => validator balance\"},\"setBalances(address[],uint256[],uint256)\":{\"notice\":\"use it to clone validators balances from master chain\"},\"setTotalSupply(uint256)\":{\"notice\":\"use it to clone validators balances from master chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingBankState.sol\":\"StakingBankState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// Inheritance\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./extensions/Registrable.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\n/// @dev contracts registry\\n/// protocol uses this registry to fetch current contract addresses\\ncontract Registry is IRegistry, Ownable {\\n    /// name => contract address\\n    mapping(bytes32 => address) public registry;\\n\\n\\n    error NameNotRegistered();\\n    error ArraysDataDoNotMatch();\\n\\n    /// @inheritdoc IRegistry\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external onlyOwner {\\n        if (_names.length != _destinations.length) revert ArraysDataDoNotMatch();\\n\\n        for (uint i = 0; i < _names.length;) {\\n            registry[_names[i]] = _destinations[i];\\n            emit LogRegistered(_destinations[i], _names[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function importContracts(address[] calldata _destinations) external onlyOwner {\\n        for (uint i = 0; i < _destinations.length;) {\\n            bytes32 name = Registrable(_destinations[i]).getName();\\n            registry[name] = _destinations[i];\\n            emit LogRegistered(_destinations[i], name);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function atomicUpdate(address _newContract) external onlyOwner {\\n        Registrable(_newContract).register();\\n\\n        bytes32 name = Registrable(_newContract).getName();\\n        address oldContract = registry[name];\\n        registry[name] = _newContract;\\n\\n        Registrable(oldContract).unregister();\\n\\n        emit LogRegistered(_newContract, name);\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function requireAndGetAddress(bytes32 name) external view returns (address) {\\n        address _foundAddress = registry[name];\\n        if (_foundAddress == address(0)) revert NameNotRegistered();\\n\\n        return _foundAddress;\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function getAddress(bytes32 _bytes) external view returns (address) {\\n        return registry[_bytes];\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function getAddressByString(string memory _name) public view returns (address) {\\n        return registry[stringToBytes32(_name)];\\n    }\\n\\n    /// @inheritdoc IRegistry\\n    function stringToBytes32(string memory _string) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(_string);\\n\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := mload(add(_string, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf8ac18bf5766420afcc70f34339192fa67169106ccdb51573267a1ffd95fb81\",\"license\":\"MIT\"},\"contracts/StakingBankState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IStakingBank.sol\\\";\\nimport \\\"./extensions/Registrable.sol\\\";\\nimport \\\"./Registry.sol\\\";\\n\\ncontract StakingBankState is IStakingBank, Registrable, Ownable {\\n    uint256 public totalSupply;\\n\\n    /// validator address => validator balance\\n    mapping(address => uint256) public balances;\\n\\n    /// list of all validators wallets\\n    address[] public addresses;\\n\\n    event ValidatorBalanceUpdate(address indexed validator, uint256 balance);\\n    event TotalSupply(uint256 total);\\n\\n    error ArrayLengthError();\\n    error InvalidTotalSupply();\\n    error NoChangeToState();\\n    error NotSupported();\\n\\n    constructor(IRegistry _contractRegistry) Registrable(_contractRegistry) {\\n        // no additional configuration needed\\n    }\\n\\n    /// @inheritdoc Registrable\\n    function register() external override {\\n        // there are no requirements atm\\n    }\\n\\n    /// @inheritdoc Registrable\\n    function unregister() external override {\\n        // there are no requirements atm\\n    }\\n\\n    /// @notice use it to clone validators balances from master chain\\n    /// @param _totalSupply cloned value from master chain, it can be 0\\n    function setTotalSupply(uint256 _totalSupply) external onlyOwner {\\n        if (totalSupply == _totalSupply) revert NoChangeToState();\\n\\n        _setTotalSupply(_totalSupply);\\n    }\\n\\n    /// @notice use it to clone validators balances from master chain\\n    /// @param _validators array of validator addresses that needs to be updated\\n    /// @param _balances array of validator _balances that will be set (can be 0s)\\n    /// @param _totalSupply cloned value of total staked amount from master chain, it can be 0\\n    function setBalances(address[] calldata _validators, uint256[] calldata _balances, uint256 _totalSupply)\\n        external\\n        onlyOwner\\n    {\\n        if (_validators.length != _balances.length) revert ArrayLengthError();\\n\\n        for (uint256 i; i < _validators.length;) {\\n            _setBalance(_validators[i], _balances[i]);\\n\\n            unchecked {\\n                // we will not have enough data to overflow\\n                i++;\\n            }\\n        }\\n\\n        if (_calculateTotalBalance() > _totalSupply) revert InvalidTotalSupply();\\n\\n        if (totalSupply != _totalSupply) {\\n            _setTotalSupply(_totalSupply);\\n        }\\n    }\\n\\n    function getNumberOfValidators() external view returns (uint256) {\\n        return addresses.length;\\n    }\\n\\n    function getAddresses() external view returns (address[] memory) {\\n        return addresses;\\n    }\\n\\n    function getBalances() external view returns (uint256[] memory allBalances) {\\n        uint256 count = addresses.length;\\n        allBalances = new uint256[](count);\\n\\n        for (uint256 i = 0; i < count;) {\\n            allBalances[i] = balances[addresses[i]];\\n\\n            unchecked {\\n                // we will not have enough data to overflow\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function transfer(address, uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function stake(uint256) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function withdraw(uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function exit() external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function create(address, string calldata) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function update(address, string calldata) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function remove(address) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function validators(address) external pure returns (address, string memory) {\\n        revert NotSupported();\\n    }\\n\\n    function setMinAmountForStake(uint256) external pure {\\n        revert NotSupported();\\n    }\\n\\n    function approve(address, uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function receiveApproval(address) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function receiveApproval(address, uint256) external pure returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function transferFrom(address, address, uint256) public pure virtual override returns (bool) {\\n        revert NotSupported();\\n    }\\n\\n    function allowance(address, address) external pure returns (uint256) {\\n        revert NotSupported();\\n    }\\n\\n    /// @inheritdoc Registrable\\n    function getName() external pure override returns (bytes32) {\\n        return \\\"StakingBank\\\";\\n    }\\n\\n    /// @param _validator validator addresses that needs to be updated\\n    /// @param _balance validator balance that will be set (can be 0)\\n    function _setBalance(address _validator, uint256 _balance) internal {\\n        uint256 currentBalance = balances[_validator];\\n\\n        // if balance that we want to set for validator is 0, means we want to remove validator\\n        if (_balance == 0) {\\n            // if current balance is 0, validator address is already removed\\n            if (currentBalance != 0) {\\n                _removeAddress(_validator);\\n            }\\n        } else if (currentBalance == 0) {\\n            // if we setting up balance > 0 and current balance is 0, then this is new validator\\n            // so we have to add address\\n            addresses.push(_validator);\\n        }\\n\\n        balances[_validator] = _balance;\\n\\n        emit ValidatorBalanceUpdate(_validator, _balance);\\n    }\\n\\n    function _setTotalSupply(uint256 _totalSupply) private {\\n        totalSupply = _totalSupply;\\n        emit TotalSupply(_totalSupply);\\n    }\\n\\n    function _removeAddress(address _address) internal {\\n        uint256 count = addresses.length;\\n\\n        for (uint256 i = 0; i < count;) {\\n            if (addresses[i] == _address) {\\n                addresses[i] = addresses[count - 1];\\n                addresses.pop();\\n                return;\\n            }\\n\\n            unchecked {\\n                // we will not have enough data to overflow\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function _calculateTotalBalance() internal returns (uint256 total) {\\n        uint256 count = addresses.length;\\n\\n        for (uint256 i = 0; i < count;) {\\n            total += balances[addresses[i]];\\n\\n            unchecked {\\n                // we will not have enough data to overflow\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6cfce5deea204985bc68935495584419c2bb5257f49dff9db026cc67deff91d1\",\"license\":\"MIT\"},\"contracts/extensions/Registrable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IStakingBank.sol\\\";\\n\\n/// @dev Any contract that we want to register in ContractRegistry, must inherit from Registrable\\nabstract contract Registrable {\\n    IRegistry public immutable contractRegistry;\\n\\n    modifier onlyFromContract(address _msgSender, bytes32 _contractName) {\\n        require(\\n            contractRegistry.getAddress(_contractName) == _msgSender,\\n            string(abi.encodePacked(\\\"caller is not \\\", _contractName))\\n        );\\n        _;\\n    }\\n\\n    modifier withRegistrySetUp() {\\n        require(address(contractRegistry) != address(0x0), \\\"_registry is empty\\\");\\n        _;\\n    }\\n\\n    constructor(IRegistry _contractRegistry) {\\n        require(address(_contractRegistry) != address(0x0), \\\"_registry is empty\\\");\\n        contractRegistry = _contractRegistry;\\n    }\\n\\n    /// @dev this method will be called as a first method in registration process when old contract will be replaced\\n    /// when called, old contract address is still in registry\\n    function register() virtual external;\\n\\n    /// @dev this method will be called as a last method in registration process when old contract will be replaced\\n    /// when called, new contract address is already in registry\\n    function unregister() virtual external;\\n\\n    /// @return contract name as bytes32\\n    function getName() virtual external pure returns (bytes32);\\n\\n    /// @dev helper method for fetching StakingBank address\\n    function stakingBankContract() public view returns (IStakingBank) {\\n        return IStakingBank(contractRegistry.requireAndGetAddress(\\\"StakingBank\\\"));\\n    }\\n\\n    /// @dev helper method for fetching UMB address\\n    function tokenContract() public view withRegistrySetUp returns (ERC20) {\\n        return ERC20(contractRegistry.requireAndGetAddress(\\\"UMB\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x58413fc819ff8f78ba80a9339bf6b4bb818932ddef0ce58dd4813acba01bda8c\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n\\ninterface IRegistry {\\n    event LogRegistered(address indexed destination, bytes32 name);\\n\\n    /// @dev imports new contract addresses and override old addresses, if they exist under provided name\\n    /// This method can be used for contracts that for some reason do not have `getName` method\\n    /// @param  _names array of contract names that we want to register\\n    /// @param  _destinations array of contract addresses\\n    function importAddresses(bytes32[] calldata _names, address[] calldata _destinations) external;\\n\\n    /// @dev imports new contracts and override old addresses, if they exist.\\n    /// Names of contracts are fetched directly from each contract by calling `getName`\\n    /// @param  _destinations array of contract addresses\\n    function importContracts(address[] calldata _destinations) external;\\n\\n    /// @dev this method ensure, that old and new contract is aware of it state in registry\\n    /// Note: BSC registry does not have this method. This method was introduced in later stage.\\n    /// @param _newContract address of contract that will replace old one\\n    function atomicUpdate(address _newContract) external;\\n\\n    /// @dev similar to `getAddress` but throws when contract name not exists\\n    /// @param name contract name\\n    /// @return contract address registered under provided name or throws, if does not exists\\n    function requireAndGetAddress(bytes32 name) external view returns (address);\\n\\n    /// @param name contract name in a form of bytes32\\n    /// @return contract address registered under provided name\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    /// @param _name contract name\\n    /// @return contract address assigned to the name or address(0) if not exists\\n    function getAddressByString(string memory _name) external view returns (address);\\n\\n    /// @dev helper method that converts string to bytes32,\\n    /// you can use to to generate contract name\\n    function stringToBytes32(string memory _string) external pure returns (bytes32 result);\\n}\\n\",\"keccak256\":\"0xa0099ecf4182138fda7a0733407784461410c245de67c1e7ba7cd7c9595e054f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingBank is IERC20 {\\n    /// @param id address of validator wallet\\n    /// @param location URL of the validator API\\n    struct Validator {\\n        address id;\\n        string location;\\n    }\\n\\n    event LogValidatorRegistered(address indexed id);\\n    event LogValidatorUpdated(address indexed id);\\n    event LogValidatorRemoved(address indexed id);\\n    event LogMinAmountForStake(uint256 minAmountForStake);\\n\\n    /// @dev setter for `minAmountForStake`\\n    function setMinAmountForStake(uint256 _minAmountForStake) external;\\n\\n    /// @dev allows to stake `token` by validators\\n    /// Validator needs to approve StakingBank beforehand\\n    /// @param _value amount of tokens to stake\\n    function stake(uint256 _value) external;\\n\\n    /// @dev notification about approval from `_from` address on UMB token\\n    /// Staking bank will stake max approved amount from `_from` address\\n    /// @param _from address which approved token spend for IStakingBank\\n    function receiveApproval(address _from) external returns (bool success);\\n\\n    /// @dev withdraws stake tokens\\n    /// it throws, when balance will be less than required minimum for stake\\n    /// to withdraw all use `exit`\\n    function withdraw(uint256 _value) external returns (bool success);\\n\\n    /// @dev unstake and withdraw all tokens\\n    function exit() external returns (bool success);\\n\\n    /// @dev creates (register) new validator\\n    /// @param _id validator address\\n    /// @param _location location URL of the validator API\\n    function create(address _id, string calldata _location) external;\\n\\n    /// @dev removes validator\\n    /// @param _id validator wallet\\n    function remove(address _id) external;\\n\\n    /// @dev updates validator location\\n    /// @param _id validator wallet\\n    /// @param _location new validator URL\\n    function update(address _id, string calldata _location) external;\\n\\n    /// @return total number of registered validators (with and without balance)\\n    function getNumberOfValidators() external view returns (uint256);\\n\\n    /// @dev gets validator address for provided index\\n    /// @param _ix index in array of list of all validators wallets\\n    function addresses(uint256 _ix) external view returns (address);\\n\\n    /// @param _id address of validator\\n    /// @return id address of validator\\n    /// @return location URL of validator\\n    function validators(address _id) external view returns (address id, string memory location);\\n}\\n\",\"keccak256\":\"0x2c518aeab8b0b3a364fafaec559d3ff0dc6a119f8d203fa31ef7ad667ca0f7b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620024ef380380620024ef833981810160405281019062000037919062000250565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a190620002e3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620000ff620000f36200010660201b60201c565b6200010e60201b60201c565b5062000305565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020482620001d7565b9050919050565b60006200021882620001f7565b9050919050565b6200022a816200020b565b81146200023657600080fd5b50565b6000815190506200024a816200021f565b92915050565b600060208284031215620002695762000268620001d2565b5b6000620002798482850162000239565b91505092915050565b600082825260208201905092915050565b7f5f726567697374727920697320656d7074790000000000000000000000000000600082015250565b6000620002cb60128362000282565b9150620002d88262000293565b602082019050919050565b60006020820190508181036000830152620002fe81620002bc565b9050919050565b6080516121b9620003366000396000818161090b0152818161098201528181610a210152610e9901526121b96000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c8063715018a61161010f578063abf410e5116100a2578063edf26d9b11610071578063edf26d9b14610596578063f2fde38b146105c6578063f7ea7a3d146105e2578063fa52c7d8146105fe576101ef565b8063abf410e514610520578063dd62ed3e1461053e578063e79a198f1461056e578063e9fad8ee14610578576101ef565b8063a15ab08d116100de578063a15ab08d1461049a578063a39fac12146104b6578063a694fc3a146104d4578063a9059cbb146104f0576101ef565b8063715018a614610438578063838e7c3a146104425780638da5cb5b1461045e5780639031d9131461047c576101ef565b806329092d0e1161018757806355a373d61161015657806355a373d6146103b0578063637180a8146103ce578063648b8dc0146103ec57806370a0823114610408576101ef565b806329092d0e146103185780632e1a7d4d146103345780634bdf1b0e1461036457806352b41e3514610394576101ef565b806318160ddd116101c357806318160ddd146102905780631aa3a008146102ae57806323b872dd146102b857806327e235e3146102e8576101ef565b8062113e08146101f4578063095ea7b3146102125780630db18e371461024257806317d7de7c14610272575b600080fd5b6101fc61062f565b60405161020991906116d1565b60405180910390f35b61022c60048036038101906102279190611787565b610740565b60405161023991906117e2565b60405180910390f35b61025c600480360381019061025791906117fd565b610774565b60405161026991906117e2565b60405180910390f35b61027a6107a8565b6040516102879190611843565b60405180910390f35b6102986107d0565b6040516102a5919061186d565b60405180910390f35b6102b66107d6565b005b6102d260048036038101906102cd9190611888565b6107d8565b6040516102df91906117e2565b60405180910390f35b61030260048036038101906102fd91906117fd565b61080c565b60405161030f919061186d565b60405180910390f35b610332600480360381019061032d91906117fd565b610824565b005b61034e600480360381019061034991906118db565b610856565b60405161035b91906117e2565b60405180910390f35b61037e60048036038101906103799190611787565b61088a565b60405161038b91906117e2565b60405180910390f35b6103ae60048036038101906103a991906118db565b6108be565b005b6103b86108f0565b6040516103c59190611967565b60405180910390f35b6103d6610a1d565b6040516103e391906119a3565b60405180910390f35b61040660048036038101906104019190611a79565b610abc565b005b610422600480360381019061041d91906117fd565b610c38565b60405161042f919061186d565b60405180910390f35b610440610c81565b005b61045c60048036038101906104579190611b64565b610d09565b005b610466610d3b565b6040516104739190611bd3565b60405180910390f35b610484610d64565b604051610491919061186d565b60405180910390f35b6104b460048036038101906104af9190611b64565b610d71565b005b6104be610da3565b6040516104cb9190611cac565b60405180910390f35b6104ee60048036038101906104e991906118db565b610e31565b005b61050a60048036038101906105059190611787565b610e63565b60405161051791906117e2565b60405180910390f35b610528610e97565b6040516105359190611cef565b60405180910390f35b61055860048036038101906105539190611d0a565b610ebb565b604051610565919061186d565b60405180910390f35b610576610eef565b005b610580610ef1565b60405161058d91906117e2565b60405180910390f35b6105b060048036038101906105ab91906118db565b610f25565b6040516105bd9190611bd3565b60405180910390f35b6105e060048036038101906105db91906117fd565b610f64565b005b6105fc60048036038101906105f791906118db565b61105b565b005b610618600480360381019061061391906117fd565b61111e565b604051610626929190611de3565b60405180910390f35b6060600060038054905090508067ffffffffffffffff81111561065557610654611e13565b5b6040519080825280602002602001820160405280156106835781602001602082028036833780820191505090505b50915060005b8181101561073b5760026000600383815481106106a9576106a8611e42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483828151811061072257610721611e42565b5b6020026020010181815250508080600101915050610689565b505090565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f5374616b696e6742616e6b000000000000000000000000000000000000000000905090565b60015481565b565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026020528060005260406000206000915090505481565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1603610980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097790611ebd565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166346bcb49d6040518163ffffffff1660e01b81526004016109d790611f03565b602060405180830381865afa1580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a189190611f31565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166346bcb49d6040518163ffffffff1660e01b8152600401610a7690611f84565b602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab79190611f31565b905090565b610ac4611154565b73ffffffffffffffffffffffffffffffffffffffff16610ae2610d3b565b73ffffffffffffffffffffffffffffffffffffffff1614610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f90611fe9565b60405180910390fd5b828290508585905014610b77576040517fdf35c77400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85859050811015610bdc57610bcf868683818110610b9b57610b9a611e42565b5b9050602002016020810190610bb091906117fd565b858584818110610bc357610bc2611e42565b5b9050602002013561115c565b8080600101915050610b7a565b5080610be66112c3565b1115610c1e576040517f34bbd58500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060015414610c3157610c3081611376565b5b5050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c89611154565b73ffffffffffffffffffffffffffffffffffffffff16610ca7610d3b565b73ffffffffffffffffffffffffffffffffffffffff1614610cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf490611fe9565b60405180910390fd5b610d0760006113b7565b565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600380549050905090565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606003805480602002602001604051908101604052809291908181526020018280548015610e2757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ddd575b5050505050905090565b6040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60006040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038181548110610f3557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f6c611154565b73ffffffffffffffffffffffffffffffffffffffff16610f8a610d3b565b73ffffffffffffffffffffffffffffffffffffffff1614610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd790611fe9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361104f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110469061207b565b60405180910390fd5b611058816113b7565b50565b611063611154565b73ffffffffffffffffffffffffffffffffffffffff16611081610d3b565b73ffffffffffffffffffffffffffffffffffffffff16146110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90611fe9565b60405180910390fd5b8060015403611112576040517f96f56f6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61111b81611376565b50565b600060606040517fa038794000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600033905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600082036111bf57600081146111ba576111b98361147b565b5b61122c565b6000810361122b576003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fa0906617b0e86c0e6118e9bb4714093a013a5a41105149c908810bece3316ae2836040516112b6919061186d565b60405180910390a2505050565b600080600380549050905060005b818110156113715760026000600383815481106112f1576112f0611e42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361136291906120ca565b925080806001019150506112d1565b505090565b806001819055507f91cf34a58a9ed220d9b072639106d1d07251e1791426d2560ab2d6c4ca19a183816040516113ac919061186d565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600380549050905060005b81811015611603578273ffffffffffffffffffffffffffffffffffffffff16600382815481106114bb576114ba611e42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115f65760036001836115109190612120565b8154811061152157611520611e42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600382815481106115605761155f611e42565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038054806115ba576115b9612154565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050611606565b8080600101915050611488565b50505b50565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61164881611635565b82525050565b600061165a838361163f565b60208301905092915050565b6000602082019050919050565b600061167e82611609565b6116888185611614565b935061169383611625565b8060005b838110156116c45781516116ab888261164e565b97506116b683611666565b925050600181019050611697565b5085935050505092915050565b600060208201905081810360008301526116eb8184611673565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611728826116fd565b9050919050565b6117388161171d565b811461174357600080fd5b50565b6000813590506117558161172f565b92915050565b61176481611635565b811461176f57600080fd5b50565b6000813590506117818161175b565b92915050565b6000806040838503121561179e5761179d6116f3565b5b60006117ac85828601611746565b92505060206117bd85828601611772565b9150509250929050565b60008115159050919050565b6117dc816117c7565b82525050565b60006020820190506117f760008301846117d3565b92915050565b600060208284031215611813576118126116f3565b5b600061182184828501611746565b91505092915050565b6000819050919050565b61183d8161182a565b82525050565b60006020820190506118586000830184611834565b92915050565b61186781611635565b82525050565b6000602082019050611882600083018461185e565b92915050565b6000806000606084860312156118a1576118a06116f3565b5b60006118af86828701611746565b93505060206118c086828701611746565b92505060406118d186828701611772565b9150509250925092565b6000602082840312156118f1576118f06116f3565b5b60006118ff84828501611772565b91505092915050565b6000819050919050565b600061192d611928611923846116fd565b611908565b6116fd565b9050919050565b600061193f82611912565b9050919050565b600061195182611934565b9050919050565b61196181611946565b82525050565b600060208201905061197c6000830184611958565b92915050565b600061198d82611934565b9050919050565b61199d81611982565b82525050565b60006020820190506119b86000830184611994565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126119e3576119e26119be565b5b8235905067ffffffffffffffff811115611a00576119ff6119c3565b5b602083019150836020820283011115611a1c57611a1b6119c8565b5b9250929050565b60008083601f840112611a3957611a386119be565b5b8235905067ffffffffffffffff811115611a5657611a556119c3565b5b602083019150836020820283011115611a7257611a716119c8565b5b9250929050565b600080600080600060608688031215611a9557611a946116f3565b5b600086013567ffffffffffffffff811115611ab357611ab26116f8565b5b611abf888289016119cd565b9550955050602086013567ffffffffffffffff811115611ae257611ae16116f8565b5b611aee88828901611a23565b93509350506040611b0188828901611772565b9150509295509295909350565b60008083601f840112611b2457611b236119be565b5b8235905067ffffffffffffffff811115611b4157611b406119c3565b5b602083019150836001820283011115611b5d57611b5c6119c8565b5b9250929050565b600080600060408486031215611b7d57611b7c6116f3565b5b6000611b8b86828701611746565b935050602084013567ffffffffffffffff811115611bac57611bab6116f8565b5b611bb886828701611b0e565b92509250509250925092565b611bcd8161171d565b82525050565b6000602082019050611be86000830184611bc4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c238161171d565b82525050565b6000611c358383611c1a565b60208301905092915050565b6000602082019050919050565b6000611c5982611bee565b611c638185611bf9565b9350611c6e83611c0a565b8060005b83811015611c9f578151611c868882611c29565b9750611c9183611c41565b925050600181019050611c72565b5085935050505092915050565b60006020820190508181036000830152611cc68184611c4e565b905092915050565b6000611cd982611934565b9050919050565b611ce981611cce565b82525050565b6000602082019050611d046000830184611ce0565b92915050565b60008060408385031215611d2157611d206116f3565b5b6000611d2f85828601611746565b9250506020611d4085828601611746565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d84578082015181840152602081019050611d69565b83811115611d93576000848401525b50505050565b6000601f19601f8301169050919050565b6000611db582611d4a565b611dbf8185611d55565b9350611dcf818560208601611d66565b611dd881611d99565b840191505092915050565b6000604082019050611df86000830185611bc4565b8181036020830152611e0a8184611daa565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5f726567697374727920697320656d7074790000000000000000000000000000600082015250565b6000611ea7601283611d55565b9150611eb282611e71565b602082019050919050565b60006020820190508181036000830152611ed681611e9a565b9050919050565b7f554d420000000000000000000000000000000000000000000000000000000000815250565b6000602082019050611f1760008301611edd565b919050565b600081519050611f2b8161172f565b92915050565b600060208284031215611f4757611f466116f3565b5b6000611f5584828501611f1c565b91505092915050565b7f5374616b696e6742616e6b000000000000000000000000000000000000000000815250565b6000602082019050611f9860008301611f5e565b919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fd3602083611d55565b9150611fde82611f9d565b602082019050919050565b6000602082019050818103600083015261200281611fc6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612065602683611d55565b915061207082612009565b604082019050919050565b6000602082019050818103600083015261209481612058565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120d582611635565b91506120e083611635565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121155761211461209b565b5b828201905092915050565b600061212b82611635565b915061213683611635565b9250828210156121495761214861209b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220fe342eb2f9fa63717f688c45583592ba51aa68ac4d0d86b780a901433f0c637564736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "exit()": {
        "details": "unstake and withdraw all tokens"
      },
      "getName()": {
        "returns": {
          "_0": "contract name as bytes32"
        }
      },
      "getNumberOfValidators()": {
        "returns": {
          "_0": "total number of registered validators (with and without balance)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register()": {
        "details": "this method will be called as a first method in registration process when old contract will be replaced when called, old contract address is still in registry"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBalances(address[],uint256[],uint256)": {
        "params": {
          "_balances": "array of validator _balances that will be set (can be 0s)",
          "_totalSupply": "cloned value of total staked amount from master chain, it can be 0",
          "_validators": "array of validator addresses that needs to be updated"
        }
      },
      "setTotalSupply(uint256)": {
        "params": {
          "_totalSupply": "cloned value from master chain, it can be 0"
        }
      },
      "stakingBankContract()": {
        "details": "helper method for fetching StakingBank address"
      },
      "tokenContract()": {
        "details": "helper method for fetching UMB address"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregister()": {
        "details": "this method will be called as a last method in registration process when old contract will be replaced when called, new contract address is already in registry"
      }
    },
    "stateVariables": {
      "totalSupply": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addresses(uint256)": {
        "notice": "list of all validators wallets"
      },
      "balances(address)": {
        "notice": "validator address => validator balance"
      },
      "setBalances(address[],uint256[],uint256)": {
        "notice": "use it to clone validators balances from master chain"
      },
      "setTotalSupply(uint256)": {
        "notice": "use it to clone validators balances from master chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingBankState.sol:StakingBankState",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4139,
        "contract": "contracts/StakingBankState.sol:StakingBankState",
        "label": "totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4144,
        "contract": "contracts/StakingBankState.sol:StakingBankState",
        "label": "balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4148,
        "contract": "contracts/StakingBankState.sol:StakingBankState",
        "label": "addresses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}