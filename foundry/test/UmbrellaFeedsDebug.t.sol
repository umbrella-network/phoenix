pragma solidity ^0.8.0;

import "ds-test/test.sol";
import "../lib/CheatCodes.sol";
import "../lib/Mock.sol";

import "../../contracts/Registry.sol";
import "../../contracts/onChainFeeds/UmbrellaFeeds.sol";
import "../../contracts/stakingBankStatic/StakingBankStatic.sol";
import "../../contracts/stakingBankStatic/StakingBankStaticDev.sol";

/*
    forge test -vvv --match-contract UmbrellaFeedsTest
*/
contract UmbrellaFeedsDebugTest is DSTest {
    address public immutable registry;
    address public immutable bank;
    UmbrellaFeeds public immutable feeds;

    CheatCodes constant cheats = CheatCodes(HEVM_ADDRESS);

    constructor() {
        registry = Mock.create("Registry");
        bank = Mock.create("Bank");

        address[] memory validators = new address[](2);
        validators[0] = 0xDc3eBc37DA53A644D67E5E3b5BA4EEF88D969d5C;
        validators[1] = 0x998cb7821e605cC16b6174e7C50E19ADb2Dd2fB0;

        cheats.mockCall(registry, abi.encodeCall(Registry.requireAndGetAddress, ("StakingBank")), abi.encode(bank));
        cheats.mockCall(bank, abi.encodeWithSelector(StakingBankStatic.verifyValidators.selector, (validators)), abi.encode(true));
        feeds = new UmbrellaFeeds(IRegistry(registry), 2, 8);
    }

    /*
    forge test -vvv --match-test test_UmbrellaFeeds_prod_debug
    */
    function off_UmbrellaFeeds_prod_debug() public {
        bytes memory data = hex"95f1cf300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000000080a5a381a0a71e01e19e425f3d328086adfc93770a07cccc0a89d3442997cfaebd12696d22e30226aa81898569634cfc79dd91a5666a10f13c06428a50ca07998b1d3774fdfaead42d64509b6eaa3fff336bbfcf77427322b7d55adfa21864ce6d7c55e13a482c46ef0f9a2319e6a727f48a445851591103a2ffc2e2acb9b61e9505d65f61466dda9b8c3a2fbf43ae3a93c4580e84da748715e53c7502978d849f58ecb772f7585fe55e60443168b1de45073ecfd81908d4ef0e8dcc7eb21f0f995d702985839e4be495e8bccc2b75cfe3f9a858409a3e432e51d22d9798addfb59c1383e4aa8b39c0642dd8f6727e16c24bf888ebda069f5ec812e929ae7f09200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8c00000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000006fa0a90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000005f5cdaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000002b4d82a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b000000000000000000000000000000000000000000000000000002a9e1cc6f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000176236b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b000000000000000000000000000000000000000000000000000000002c7587e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000022751b200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c9ad7863b05b12544a7003e0d33719f779780687f4c8277bf27061da669e46f6158d31aeb5ac59f5cddadfafa33c8cbdd42917fa1aec0e61e1a93d188cfc8f402000000000000000000000000000000000000000000000000000000000000001c89a12767854e4f919ed959460480c7e44aa67b1790e817ef142f44ebb02149eb6df183a2cef16d6ecf2c80995561e2a9dd5881f69e8f0612fa7636768e2a8b1f";
        (bool success, ) = address(feeds).call(data);
        assertTrue(success);
    }

    /*
    to test fallback use block 21978008 and 0x2663BFC8D0C833F602F6fF74482C113187cb0e1e as FEED
    forge test -vvvv --match-test test_UmbrellaFeeds_fork_debug --fork-url https://rpc.goerli.linea.build --fork-block-number 1208802
    */
    function off_UmbrellaFeeds_fork_debug() public {
        bytes memory data = hex"95f1cf300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000000080a5a381a0a71e01e19e425f3d328086adfc93770a07cccc0a89d3442997cfaebd12696d22e30226aa81898569634cfc79dd91a5666a10f13c06428a50ca07998b1d3774fdfaead42d64509b6eaa3fff336bbfcf77427322b7d55adfa21864ce6d7c55e13a482c46ef0f9a2319e6a727f48a445851591103a2ffc2e2acb9b61e9505d65f61466dda9b8c3a2fbf43ae3a93c4580e84da748715e53c7502978d849f58ecb772f7585fe55e60443168b1de45073ecfd81908d4ef0e8dcc7eb21f0f995d702985839e4be495e8bccc2b75cfe3f9a858409a3e432e51d22d9798addfb59c1383e4aa8b39c0642dd8f6727e16c24bf888ebda069f5ec812e929ae7f09200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8c00000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000006fa0a90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000005f5cdaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000002b4d82a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b000000000000000000000000000000000000000000000000000002a9e1cc6f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000176236b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b000000000000000000000000000000000000000000000000000000002c7587e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000064c00d0b0000000000000000000000000000000000000000000000000000000022751b200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c9ad7863b05b12544a7003e0d33719f779780687f4c8277bf27061da669e46f6158d31aeb5ac59f5cddadfafa33c8cbdd42917fa1aec0e61e1a93d188cfc8f402000000000000000000000000000000000000000000000000000000000000001c89a12767854e4f919ed959460480c7e44aa67b1790e817ef142f44ebb02149eb6df183a2cef16d6ecf2c80995561e2a9dd5881f69e8f0612fa7636768e2a8b1f";
        (bool success, ) = address(0x3985348936C6FeFC769Ef20da34FFDDbD09fa1d1).call(data); // update
        assertTrue(success);
    }

    /*
    forge test -vvvv --match-test test_UmbrellaFeeds_verifyValidators_debug
    */
    function off_UmbrellaFeeds_verifyValidators_debug() public {
        StakingBankStaticDev b = new StakingBankStaticDev(2);

        bytes memory data = hex"1d4f9ce000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000998cb7821e605cc16b6174e7c50e19adb2dd2fb0000000000000000000000000dc3ebc37da53a644d67e5e3b5ba4eef88d969d5c";
        (bool success, ) = address(b).call(data); // verifyValidators
        assertTrue(success, "StakingBankStaticDev ERROR");

        (success, ) = address(0xE797E570a8D4D17704F46bfA9b76917fa2E5ea85).call(data); // verifyValidators
        assertTrue(success, "StakingBankStaticDev FORK ERROR");
    }
}
